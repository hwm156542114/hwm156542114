<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring学习之路</title>
      <link href="/2021/11/16/spring-xue-xi-zhi-lu/"/>
      <url>/2021/11/16/spring-xue-xi-zhi-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><h4 id="安装与应用"><a href="#安装与应用" class="headerlink" title="安装与应用"></a>安装与应用</h4><blockquote><p>安装</p><p>直接下载<a href="https://repo.spring.io/release/org/springframework/spring/%EF%BC%8C%E7%82%B9%E5%87%BB%E6%88%91%E4%BB%AC%E6%83%B3%E8%A6%81%E4%B8%8B%E8%BD%BD%E7%9A%84%E7%89%88%E6%9C%AC%EF%BC%8C%E8%BF%9B%E5%8E%BB%E4%B9%8B%E5%90%8E%E4%B8%8B%E8%BD%BD%E7%AC%AC%E4%B8%80%E4%B8%AAdist.zip">https://repo.spring.io/release/org/springframework/spring/，点击我们想要下载的版本，进去之后下载第一个dist.zip</a></p><p>详细下载步骤：</p><p>首先我们要进入spring.io界面，然后找到spring Framework，然后点击右上角的GitHub，之后我们进入页面下滑到Access To Binaries ，那里有个查看spring文件，然后我们点击进去之后，点击小房子下面的文件，然后找到release-&gt;org-&gt;springframework-&gt;spring 点击右边会出现一个链接release/org/springframework/spring/，将这个链接追加到io后面就可以访问到下载页面</p><p>应用</p><p>我们首先创建一个简单的java类，然后引入jar包，然后加入库，然后创建对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&gt;</span><span class="token keyword">package</span> <span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token operator">&gt;</span><span class="token keyword">import</span> <span class="token class-name">Java</span><span class="token punctuation">.</span>hellow<span class="token punctuation">;</span><span class="token operator">&gt;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token operator">&gt;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContext</span><span class="token punctuation">;</span><span class="token operator">&gt;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">;</span><span class="token operator">&gt;</span><span class="token keyword">public</span> <span class="token keyword">class</span> hellowTest <span class="token punctuation">{</span><span class="token operator">&gt;</span><span class="token annotation punctuation">@Test</span><span class="token operator">&gt;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Hellow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//加载spring配置文件</span>  <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"xml1.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获取配置对象文件</span>  hellow hellow <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"hellow"</span><span class="token punctuation">,</span> hellow<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hellow<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name"><span class="token namespace">hellow<span class="token punctuation">.</span></span>Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&gt;</span><span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token keyword">package</span> <span class="token class-name">Java</span><span class="token punctuation">;</span><span class="token operator">&gt;</span><span class="token keyword">public</span> <span class="token keyword">class</span> hellow <span class="token punctuation">{</span><span class="token operator">&gt;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你好spring"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&gt;</span><span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h4><ol><li><p>IOC底层原理</p><ol><li>xml配置</li><li>工厂模式</li><li>反射</li></ol><p>通过这三层，来系统的降低我们的耦合度</p></li><li><p>IOC接口</p><ol><li>IOC思想基于IOC容器完成的，IOC容器底层就是对象工厂</li><li>spring提供IOC容器实现两种方式（两个接口）<ol><li>BeanFactory：IOC基本实现，是spring内部的使用接口，不提供开发人员进行使用（加载配置文件的时候不会创建对象，只有在获取对象的时候才去创建对象）</li><li>ApplicationContext：BeanFactory的子接口，拥有更多更强大的功能，一般由开发人员进行使用（加载配置文件的时候就会将配置文件对象创建出来）</li></ol></li><li>ApplicationContext接口有实现类<ol><li>FileSystemXmlApplicationContext</li><li>ClassPathXmlApplicationContext</li></ol></li></ol></li></ol><h5 id="IOC中基于xml依赖注入"><a href="#IOC中基于xml依赖注入" class="headerlink" title="IOC中基于xml依赖注入"></a>IOC中基于xml依赖注入</h5><h6 id="set方法的注入"><a href="#set方法的注入" class="headerlink" title="set方法的注入"></a>set方法的注入</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> book<span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> author<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAuthor</span><span class="token punctuation">(</span><span class="token class-name">String</span> author<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>author<span class="token operator">=</span>author<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Bean</span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>book<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Java.book<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>456<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> test<span class="token punctuation">{</span>    <span class="token comment">//加载配置文件</span>    <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"book.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取配置对象</span>    <span class="token class-name">Book</span> book <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"book"</span><span class="token punctuation">,</span><span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="构造方法的注入"><a href="#构造方法的注入" class="headerlink" title="构造方法的注入"></a>构造方法的注入</h6><p>默认的是无参构造，所以我们需要用构造器重新构造这个对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"book"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"Java.book"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>constructor<span class="token operator">-</span>arg name<span class="token operator">=</span><span class="token string">"name"</span> value<span class="token operator">=</span><span class="token string">"123"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>constructor<span class="token operator">-</span>arg<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>constructor<span class="token operator">-</span>arg name<span class="token operator">=</span><span class="token string">"author"</span> value<span class="token operator">=</span><span class="token string">"456"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>constructor<span class="token operator">-</span>arg<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h6 id="特殊字符的注入"><a href="#特殊字符的注入" class="headerlink" title="特殊字符的注入"></a>特殊字符的注入</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"book"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"Java.book"</span><span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"author"</span><span class="token operator">&gt;</span>           <span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">null</span><span class="token punctuation">&gt;</span></span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">null</span><span class="token operator">&gt;</span>       <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"book"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"Java.book"</span><span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"author"</span><span class="token operator">&gt;</span>          <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">&gt;</span></span>              <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token punctuation">[</span>CDATA<span class="token punctuation">[</span><span class="token operator">&lt;&lt;</span>南京<span class="token operator">&gt;&gt;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>          <span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">&gt;</span>s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="对象的注入"><a href="#对象的注入" class="headerlink" title="对象的注入"></a>对象的注入</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">dao</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Userimpl</span> <span class="token keyword">implements</span> <span class="token class-name">User</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"add..........."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">service</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserserviceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Userservice</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">User</span> user<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"update..........."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"Userimpl"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"dao.Userimpl"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"UserserviceImpl"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"service.UserserviceImpl"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"user"</span> ref<span class="token operator">=</span><span class="token string">"Userimpl"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">&gt;</span>        <span class="token comment">//这里的name是我们在类中创建的名字</span>        <span class="token comment">//这里的ref是我们bean标签的id值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="级联属性的设置"><a href="#级联属性的设置" class="headerlink" title="级联属性的设置"></a>级联属性的设置</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java">emp    <span class="token keyword">package</span> <span class="token class-name">Java</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> emp <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> ename<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Dept</span> dept<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEname</span><span class="token punctuation">(</span><span class="token class-name">String</span> ename<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ename <span class="token operator">=</span> ename<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDept</span><span class="token punctuation">(</span><span class="token class-name">Dept</span> dept<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dept <span class="token operator">=</span> dept<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Dept</span> <span class="token function">getDept</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> dept<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ename<span class="token operator">+</span><span class="token string">"  "</span><span class="token operator">+</span>dept<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Dept</span>    <span class="token keyword">package</span> <span class="token class-name">Java</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dept</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> dname<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDname</span><span class="token punctuation">(</span><span class="token class-name">String</span> dname<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dname <span class="token operator">=</span> dname<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Dept{"</span> <span class="token operator">+</span>                <span class="token string">"dname='"</span> <span class="token operator">+</span> dname <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Test</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"xml3.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        emp emp <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"emp"</span><span class="token punctuation">,</span> emp<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        emp<span class="token punctuation">.</span><span class="token function">sout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Java.Dept<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dname<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>财务部<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Java.emp<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--普通属性设置--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ename<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--对象属性设置--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--        &lt;property name="dept"&gt;--&gt;</span><span class="token comment">&lt;!--            &lt;bean id="dept2" class="Java.Dept"&gt;--&gt;</span><span class="token comment">&lt;!--                &lt;property name="dname" value="456"&gt;&lt;/property&gt;--&gt;</span><span class="token comment">&lt;!--            &lt;/bean&gt;--&gt;</span><span class="token comment">&lt;!--        &lt;/property&gt;--&gt;</span>//这里要使用dept.dname必须要求有get方法<span class="token comment">&lt;!--        &lt;property name="dept.dname" ref="dept"&gt;&lt;/property&gt;--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="数组、集合、map、set属性的注入"><a href="#数组、集合、map、set属性的注入" class="headerlink" title="数组、集合、map、set属性的注入"></a>数组、集合、map、set属性的注入</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">Java</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Array</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> array <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> course<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> set<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCourse</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> course<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>course <span class="token operator">=</span> course<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMap</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>map <span class="token operator">=</span> map<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSet</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> set<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>set <span class="token operator">=</span> set<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>course<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> arrayTest <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"xml4.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        array array <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"array"</span><span class="token punctuation">,</span> array<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        array<span class="token punctuation">.</span><span class="token function">sout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>array<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Java.array<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>course<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">&gt;</span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">&gt;</span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>list<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>list<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">&gt;</span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JAVA<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">&gt;</span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>PHP<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>php<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>set<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">&gt;</span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>set<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>abc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="基于XML的自动装配"><a href="#基于XML的自动装配" class="headerlink" title="基于XML的自动装配"></a>基于XML的自动装配</h6><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--基于XML的自动装配注入--&gt;</span>   <span class="token comment">&lt;!--XML有两种自动装配注入的方法       第一种：通过名称注入 ByName       第二种：通过类型注入 ByType   --&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Java.Dept<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Java.Dept<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Java.Dept<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byType<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="IOC中基于注解的注入"><a href="#IOC中基于注解的注入" class="headerlink" title="IOC中基于注解的注入"></a>IOC中基于注解的注入</h5><p>四种注解方式：</p><ul><li>@Component（一般用于bean）</li><li>@Service（一般用于Service层）</li><li>@Controller（一般用于web层）</li><li>@Repository（一般用于dao层）</li></ul><p>使用注解的方式：</p><p>​        对象的创建：</p><blockquote><p>1.首先需要引入aop的jar包 </p><p>2.然后需要在xml文件中添加：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">xmlns:context="http://www.springframework.org/schema/context"http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3.然后进行配置</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--基于注解的配置--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>service<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4.配置完之后，我们需要在相应的类上面添加@注解名称（在注解中，value值默认的是我们类名，首字母小写）</p><p>5.运行</p></blockquote><p>​        属性的注入：</p><ul><li>@Autowired：根据类型进行注入</li><li>@Qualifier：根据名称进行注入</li><li>@Resource：可以类型注入，可以属性注入</li><li>@Value：普通注入</li></ul><blockquote><p>1.首先需要在两个类上面都添加对象创建的注解</p><p>2.然后再service中创建dao对象，不需要set方法</p><p>3.然后在dao对象上面添加属性注入的注解（</p><ul><li><p>使用@Autowired直接在属性上写</p></li><li><p>使用Qualifier这个注解，需要和@Autowired一起使用</p></li><li><p>使用Resource，直接添加到属性上就是根据类型注入，如果加上name属性就是根据名称进行注入</p></li><li><p>使用Value这个注解，在普通属性上添加，并且设置value值就是它的值）</p></li></ul><p>4.（要注意我们的xml文件的配置中，一定要将我们需要自动装备的包都添加进去）</p></blockquote><h5 id="基于java类的自动装配"><a href="#基于java类的自动装配" class="headerlink" title="基于java类的自动装配"></a>基于java类的自动装配</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token comment">//作为配置类，替代xml配置文件</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token comment">//路径</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Config</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="普通bean和工厂bean的区别"><a href="#普通bean和工厂bean的区别" class="headerlink" title="普通bean和工厂bean的区别"></a>普通bean和工厂bean的区别</h5><ol><li><p>普通bean返回的类型只能是我们定义的类型</p></li><li><p>工厂bean返回的可以不是我们定义的类型</p></li></ol><h5 id="IOC的生命周期"><a href="#IOC的生命周期" class="headerlink" title="IOC的生命周期"></a>IOC的生命周期</h5><ol><li>执行无参构造，创建bean的实例</li><li>调用set方法设置属性值</li><li>在初始化之前执行的方法</li><li>执行初始化的方法</li><li>在初始化之后执行的方法</li><li>获取创建bean的实例对象</li><li>执行销毁方法</li></ol><h4 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h4><p>概念：不通过修改源码的方式，在主干功能里面添加新的功能</p><p>底层原理：使用动态代理</p><ol><li><p>有接口的情况下：创建接口实现类的代理对象，增强类的方法</p></li><li><p>没有接口的情况下：创建子类的代理对象，增强类的方法</p></li></ol><p>AOP术语：</p><ol><li><p>连接点：类里面那些方法被增强了</p></li><li><p>切入点：实际被增强的方法</p></li><li><p>通知（增强）：实际被增强的逻辑部分成为通知</p><pre><code>1. 前置通知2. 后置通知3. 环绕通知4. 异常通知5. 最终通知</code></pre><ol start="4"><li>切面：动作，把通知应用到切入点的过程</li></ol></li></ol><p>AOP准备操作：</p><pre><code> 1. Spring框架一般都是基于AspectJ实现AOP操作的       1. AspectJ不是spring的组成部分，是独立的框架</code></pre><ol start="2"><li>基于AspectJ实现AOP操作<ol><li>基于xml配置文件</li><li>基于注解方式</li></ol></li><li>在项目中引入相关jar包<ol><li>springsource.net.sf.cglib</li><li>springsource.org.aopalliance</li><li>springsource..org.aspectj.weaver</li><li>aspectj.release</li></ol></li><li>切入点表达式<ol><li>作用：知道对哪个类里面的哪个方法进行增强</li><li>语法结构：execution(权限修饰符、返回类型、类全路径、方法名称（参数列表）)<ol><li>例:execution(* com.dao.add.*)</li></ol></li></ol></li></ol><p>AOP操作：</p><ul><li><p>基于注解方式开发</p><ol><li><p>创建类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Userimpl</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"add..........."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建增强类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserProxy</span> <span class="token punctuation">{</span>    <span class="token comment">//增强类</span> <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(* dao.Userimpl.add())"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before/........"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before/........"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建配置文件</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd                            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd                            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--开启自动扫描    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dao<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--生成AspectJ对象    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置不同类型的通知</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token comment">//增强类</span><span class="token comment">//调用前</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(* AspeectJ.User1.add())"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before/........"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">//调用后</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"execution(* AspeectJ.User1.add())"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after/........"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">//返回值时</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span><span class="token string">"execution(* AspeectJ.User1.add())"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">AfterReturning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AfterReturning/........"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">//抛异常时</span>    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span><span class="token string">"execution(* AspeectJ.User1.add())"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">AfterThrowing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AfterThrowing/........"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">//环绕</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"execution(* AspeectJ.User1.add())"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Around</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕前/........"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕后/........"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>方法抽取</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token comment">//公共抽取</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* AspeectJ.User1.add())"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Pointdemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span> <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"Pointdemo()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before/........"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">//这里报错了，可能是因为jar包版本的错误，也可能是jdk版本的错误</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>设置优先级</p><p>在增强方法的类上面添加@Order（数字值越小，优先级越高）</p></li></ol></li><li><p>基于xml配置文件开发</p><ol><li><p>首先创建两个类，一个普通类，一个增强类</p></li><li><p>然后再写配置文件</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--    配置类--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>AspeectJ.User1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userproxy<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>AspeectJ.UserProxy<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--aop配置--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--        配置切入点--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>p<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(* AspeectJ.User1.add())<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!--        配置切面--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>proxy<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userproxy<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>before<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>p<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>before</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p>完全开发，没有配置文件的开发</p><ul><li><p>需要添加一个aop操作的类文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">AspeectJ</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token comment">//变成配置类文件</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"AspeectJ"</span><span class="token punctuation">)</span><span class="token comment">//组件扫描</span><span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span class="token punctuation">(</span>proxyTargetClass <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AspectJConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h4 id="JDBCTemplate"><a href="#JDBCTemplate" class="headerlink" title="JDBCTemplate"></a>JDBCTemplate</h4><p>​    概念：JDBCTemplate是spring对JDBC的封装，使用JDBCTemplate对数据库进行操作</p><p>​    准备工作：</p><ol><li><p>引入相关依赖</p><p>. druid-1.0.9.jar</p><pre><code>        2. mysql-connector-java-5.1.6.jar        3. spring-jdbc-5.2.9.RELEASE.jar        4. spring-tx-5.2.9.RELEASE.jar        5. spring-orm-5.2.9.RELEASE.jar2. 配置数据库连接池</code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>datasource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql:///user_db<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>3. 配置jdbc对象，注入DataSource</code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.core.JdbcTemplate<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--        注入DataSource--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>datasource<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>4. 装配实现的dao以及service层</code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--配置自动装配--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>service,dao<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>总结：这里因为我的MySQL版本和驱动版本问题，不能进行数据库连接，无法进行下面的课程学习代码，但是JDBCTemplate在javaweb中都用过，所以这些都是复习性的过一遍</p></li></ol><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><ol><li><p>什么是事务：事务是数据库操作的最基本单元，逻辑上一组操作，要么都成功，要么都失败</p></li><li><p>事务的四个特性（ACID）</p><ol><li>原子性：操作过程不可分割，要么都成功，要么都失败</li><li>一致性：操作前和操作后总量是不变的</li><li>隔离性：多事务操作之间不会产生影响</li><li>持久性：提交数据后，会进行保存</li></ol></li><li><p>事务操作</p><ol><li><p>配置事务管理器</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">//加入tx命名空间xmlns:tx="http://www.springframework.org/schema/tx"http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd//创建事务操作 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSourceTransactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--注入DataSource--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>datasource<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>//开启事务注解 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>annotation-driven</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在类上或者方法上加注解@Transaction</p></li></ol></li><li><p>事务管理参数配置</p><ol><li>事务传播行为：7种<ol><li>REQUIRED：如果一个方法本身有事务，在方法里调用另一个方法，那么就都使用这个事务</li><li>REQUIRED_NEW：一个方法调用另一个方法，不管有没有事务，都会创建一个新的事务</li><li>操作：@Transaction（propagation = propagation.REQUIRED</li></ol></li><li>事务隔离性：<ol><li>存在问题：脏读、不可重复读、虚读<ol><li>脏读：一个未提交的事务读取到另一个未提交的事务</li><li>不可重复读：一个未提交的事务读取到另一个提交的事务</li><li>虚读：一个未提交的事务读取到另一个提交的添加事务</li></ol></li><li>解决：通过隔离级别解决<ol><li>read uncommited:读未提交</li><li>read commited:读已提交</li><li>repeatable read:可重复读</li><li>serializable:串行化</li></ol></li><li>设置方式：@Transaction（isolation = isolation .serializable）</li></ol></li><li>超时时间：timeout<ol><li>事务需要在一定的时间内提交，如果不提交则回滚</li><li>默认值是-1，设置时间以秒为单位进行计算</li></ol></li><li>readOnly：是否只读<ol><li>默认设置为false</li><li>设置为只读，就不能进行增删改操作</li></ol></li><li>rollbackFor：回滚<ol><li>设置出现哪些异常进行事务回滚</li></ol></li><li>morollbackFor:不回滚<ol><li>设置哪些事务不回滚</li></ol></li></ol></li></ol><h4 id="spring5框架新功能"><a href="#spring5框架新功能" class="headerlink" title="spring5框架新功能"></a>spring5框架新功能</h4><ol><li><p>spring框架代码基于java8，运行时兼容jdk9，许多不建议使用的类和方法在代码库中删除</p></li><li><p>spring5框架自带了通用的日志封装</p><ol><li>移除了log4j</li><li>整合了log4j2</li><li>使用：<ol><li>引入jar包：<ol><li>log4j-api</li><li>log4j-core</li><li>log4j-slf4j</li><li>slf4j-api</li></ol></li><li>写xml配置文件</li></ol></li></ol></li><li><p>spring5框架核心容器支持@Nullable注解：</p><blockquote><p> @Nullable注解可以使用在方法、属性、参数上面，表示它们的返回值可以为空</p></blockquote></li><li><p>spring5支持整合JUnit5</p><ol><li><p>整合JUnit4</p><ol><li><p>第一步引入spring-test依赖</p></li><li><p>创建测试类，使用注解方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span>（<span class="token class-name">SpringJUnit4ClassRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span>）<span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span><span class="token string">"classpath:bean.xml"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol></li><li><p>整合JUnit5</p><ol><li><p>​    第一步引入JUnit5的jar包</p></li><li><p>第二步创建测试类，使用注解完成</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span>calss<span class="token punctuation">)</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span><span class="token string">"calsspath:bean.xml"</span><span class="token punctuation">)</span><span class="token comment">//改进之后</span><span class="token annotation punctuation">@SpringJUnitConfig</span><span class="token punctuation">(</span>locations<span class="token operator">=</span><span class="token string">"classpath:bean.xml"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol></li></ol><h4 id="Spring5框架新功能：WebFlux"><a href="#Spring5框架新功能：WebFlux" class="headerlink" title="Spring5框架新功能：WebFlux"></a>Spring5框架新功能：WebFlux</h4><ol><li>springwenflux介绍<ol><li>是spring5添加新的模块，用于web开发，功能和springMVC类似的，webflux适用当前一种比较流程响应式编程出现的框架</li><li>使用传统web框架，比如springMVC，这些基于servlet容器，webflux是一种一步非阻塞的框架，一步非阻塞的框架在servlet3.1以后才支持，核心是基于Reactor的相关API实现的</li><li>解释什么是异步非阻塞<ol><li>异步和同步针对调用者：调用者发送请求，如果等着对方回应之后才去做其他事情就是同步，如果发送请求之后不等着对方回应就去做其他事情就是异步</li><li>阻塞和非阻塞对被调用者：被调用者收到请求之后，做完请求任务之后才给出反馈就是阻塞，受到请求之后马上给出反馈然后再去做事情就是非阻塞</li></ol></li><li>Webflux特点：<ol><li>非阻塞式：在有限的资源下，提高系统吞吐量和伸缩性，以reactor为基础实现响应式编程</li><li>函数式编程：spring5框架基于java8，webflux使用java8函数式编程方式实现路由请求</li></ol></li><li>比较Springmvc<ol><li>两个框架都可以使用注解方式，都运行在Tomcat等容器中</li><li>SpringMVC采用命令式编程，Webflux采用异步响应式编程</li></ol></li></ol></li><li>响应式编程（Reactor实现）<ol><li>响应式编程操作中，Reactor是满足Reactive规范框架</li><li>Reactor有两个核心类，Mono和Flux，这两个类实现接口publiser，提供丰富操作符。flux对象实现发布者，返回N和元素；Mono实现发布者，返回0或者1个元素</li><li>flux和Mono都是数据流的发布者，使用Flux和Mono都可以发出三种数据信号：元素值、错误信号、成功信号，错误信号和完成信号都代表终止信号，终止信号用于告诉订阅者数据流结束了，错误信号终止数据流同时吧错误信息传递给订阅者</li><li>三种信号特点：<ol><li>错误信号和完成信号都是终止信号，不能共存</li><li>如果没有发送任何元素值，而是直接发送错误或者完成信号，表示空数据流</li><li>如果没有错误信号，没有完成信号，表示是无线数据流</li></ol></li><li>调用just或者其他方法只是声明了数据流，数据流并不会发出，只有订阅了才会发出，不订阅什么都不会发生</li><li>操作符<ol><li>map：将元素映射成新元素</li><li>flatMap：将元素映射成流<ol><li>将每个元素映射成流，然后将流都合并成一个大流</li></ol></li></ol></li></ol></li><li>springwebflux执行流程和核心api<ol><li>springwebflux基于reactor，默认使用容器是Netty，Netty是高性能NIO框架，异步非阻塞框架</li><li>阻塞和非阻塞<ol><li>BIO：阻塞</li><li>NIO：非阻塞</li></ol></li><li>springwebflux执行过程和springMVC相似的<ol><li>springwebflux核心控制器DispatchHandler，实现接口webHandler</li><li>接口WebHandler有一个方法</li><li>springwebflux里面DispatcherHandler，负责请求的处理：<ol><li>HandlerMapping：请求查询到处理的方法</li><li>HandlerAdapter：真正负责请求的处理</li><li>HandlerResultHandler：响应处理结果</li></ol></li><li>springwebflux实现函数式变成，两个接口：RouterFunction（路由处理）和HandlerFunction（处理函数）</li></ol></li></ol></li></ol><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud学习之路</title>
      <link href="/2021/11/16/springcloud-xue-xi-zhi-lu/"/>
      <url>/2021/11/16/springcloud-xue-xi-zhi-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h1><h2 id="1-了解SpringCloud"><a href="#1-了解SpringCloud" class="headerlink" title="1.了解SpringCloud"></a>1.了解SpringCloud</h2><h3 id="版本问题"><a href="#版本问题" class="headerlink" title="版本问题"></a>版本问题</h3><ol><li><p>首先Spring cloud的版本号是以英文来区分的，而Springboot是以数字来区分的</p></li><li><p>Spring Cloud的版本用英文来区分的原因是因为根据火车站名来定的</p></li><li><p>它们俩之间的版本约束</p><p><img src="D:\笔记\Typora\note\图片\image-20210306105531571.png" alt="image-20210306105531571"></p><ul><li><p>这里需要注意的是：并不是都用最新版的就是最好的，而是有一定的约束条件，根据上下图来选择<em><strong>最佳版本搭配使用</strong></em></p><p><img src="D:\笔记\Typora\note\图片\image-20210306105840939.png" alt="image-20210306105840939"></p></li><li><p><img src="D:\笔记\Typora\note\图片\image-20210306110441367.png" alt="image-20210306110441367"></p></li><li><p><img src="D:\笔记\Typora\note\图片\image-20210306110508237.png" alt="image-20210306110508237"></p></li><li><p>这里也有我们版本的最佳选择</p></li></ul></li><li><p>升级引发的惨案</p><p><img src="D:\笔记\Typora\note\图片\image-20210306113137764.png" alt="image-20210306113137764"></p></li></ol><h2 id="2-配置运行环境"><a href="#2-配置运行环境" class="headerlink" title="2.配置运行环境"></a>2.配置运行环境</h2><ol><li><p>首先搭建一个父工程的maven项目</p></li><li><p>然后只留一个pom.xml文件，并且引入以下信息</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>SpringCloudStudy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--统一管理jar包版本--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>junit.version</span><span class="token punctuation">&gt;</span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>junit.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lombok.version</span><span class="token punctuation">&gt;</span></span>1.18.18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lombok.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>log4j.version</span><span class="token punctuation">&gt;</span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>log4j.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mysql.version</span><span class="token punctuation">&gt;</span></span>8.0.18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mysql.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>druid.version</span><span class="token punctuation">&gt;</span></span>1.1.16<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>druid.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mybatis.spring.boot.version</span><span class="token punctuation">&gt;</span></span>2.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mybatis.spring.boot.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--子模块继承之后，提供作用：锁定版本+子module不用谢groupId和version--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--spring boot 2.2.2--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--spring cloud Hoxton.SR1--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>Hoxton.SR1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--spring cloud 阿里巴巴--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.1.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--mysql--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${mysql.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!-- druid--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${druid.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--mybatis--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${mybatis.spring.boot.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--junit--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${junit.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--log4j--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${log4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${lombok.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--bulid是这样的用springboot默认的build方式--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fork</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fork</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>addResources</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>addResources</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>然后创建子工程的maven项目</p><ol><li><p>子工程的pom.xml文件引入以下内容</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>SpringCloudStudy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>payment<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>子工程的resource目录下创建一个application.yml文件</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">server:  port: 8001spring:  application:    name: payment  datasource:    type: com.alibaba.druid.pool.DruidDataSource    driver-class-name: org.gjt.mm.mysql.Driver    url: jdbc:mysql://localhost:3306/user?serverTimezone=UTC    username: root    password: rootmybatis:  mapper-locations: classpath:mapper/*.xml  type-aliases-package: springcloud.hwm.entity<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>建立数据库表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>payment<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">NULL</span> <span class="token keyword">auto_increment</span> <span class="token keyword">COMMENT</span> <span class="token string">'ID'</span><span class="token punctuation">,</span><span class="token punctuation">`</span><span class="token keyword">serial</span><span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">auto_increment</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写service-dao-controller的一系列代码</p></li></ol></li></ol><h2 id="3-Eureka"><a href="#3-Eureka" class="headerlink" title="3.Eureka"></a>3.Eureka</h2><ol><li><p>基础知识</p><ol><li><p>什么是服务治理</p><p>​    在传统的RPC远程调用框架中，管理每个服务与服务之间依赖关系比较复杂，所以需要使用服务治理管理其依赖关系，并实现服务调用、负载均衡、容错等，实现服务注册与发现</p></li><li><p>什么是服务注册与发现</p><ol><li>Eureka Server作为服务注册功能的服务器，它是服务注册中心。而系统中的其他微服务使用Eureka客户端连接到Eureka Server并维持心跳连接。这样系统的维护人员就可以通过Eureka Server来监控系统中各个微服务是否正常运行。</li><li>在服务注册与发现中，有一个注册中心。当服务器启动的时候，会把自己服务器的信息注册到注册中心上，然后消费者、服务提供者就可以以别名的方式获取实际的服务通讯地址，然后再实现本地RPC调用远程RPC框架的思想：远程RPC框架中都会有一个注册中心存放服务地址相关信息</li></ol></li><li><p>Eureka包含两个组件</p><ol><li>Eureka Server：各个微服务节点通过配置启动后都再Eureka Server中进行注册</li><li>EurekaClient：是一个Java客户端，用于简化Eureka Server的交互。在应用启动后，会向Eureka Server发送心跳，Eureka Server通过心跳对其进行管理，如果在某个周期没有收到心跳，那么它就会将服务注册表中的这个服务节点移除</li></ol></li></ol></li><li><p>Eureka自我保护机制：</p><ol><li>在某一时刻微服务不可用的时候（微服务本身是健康的，但是可能由于网络延迟等其他原因导致没能及时发送心跳数据包），Eureka不会立刻清理该微服务，而是对这个微服务的信息进行保存。</li><li>属于CAP里面的AP分支</li></ol></li></ol><h3 id="Eureka的使用"><a href="#Eureka的使用" class="headerlink" title="Eureka的使用"></a>Eureka的使用</h3><h4 id="Eureka-Server端的创建"><a href="#Eureka-Server端的创建" class="headerlink" title="Eureka Server端的创建"></a>Eureka Server端的创建</h4><ol><li><p>首先得有得创建一个maven工程，这个工程作为我们的Eureka Server端</p></li><li><p>在pom.xml中添加下面的依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!-这里就是导入Eureka</span> <span class="token attr-name">Server的依赖</span> <span class="token attr-name">--</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>Common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写application.yml文件</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"># 设定端口号server:  port: 7001eureka:  instance:  #设定服务端的主机名    hostname: eureka7001.com  client:  #是否注册自己    register-with-eureka: false     fetch-registry: false    #服务的URL    service-url:      defaultZone: http://eureka7003.com:7003/eureka/  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写主启动类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token comment">//开启Eureka Server的注解</span><span class="token annotation punctuation">@EnableEurekaServer</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">EurekaMain</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果服务端创建多个，那么在yml文件中，最后的URL就是映射到其他服务端，有几个，就映射几个</p></li></ol><h4 id="Eureka-Client端创建"><a href="#Eureka-Client端创建" class="headerlink" title="Eureka Client端创建"></a>Eureka Client端创建</h4><ol><li><p>在pom文件中添加下面依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写yam文件</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">eureka:  client:    register-with-eureka: true    fetch-registry: true    service-url:      defaultZone: http://eureka7001.com:7001/eureka,http://eureka7003.com:7003/eureka  instance:  # 显示的是自定义的id地址    instance-id: payment8001    prefer-ip-address: true        # 这里因为服务端不是一个，所以url不是一个<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>主启动类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentMain8001</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">PaymentMain8001</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写业务代码</p></li><li><p>这里注意：如果编写的是消费者的客户端，那么我们可以在自定义配置类中加下面得Bean对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@LoadBalanced</span> <span class="token comment">//实现负载均衡</span>    <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">getRestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在Controller中使用RestTemplate进行转发请求。此时，我们不需要知道请求的路径，因为此时我们的路径映射为</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">spring:  application:    name: order<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>请求直接写成<a href="http://order/">http://order</a></p></li></ol><h2 id="4-Zookeeper的使用"><a href="#4-Zookeeper的使用" class="headerlink" title="4.Zookeeper的使用"></a>4.Zookeeper的使用</h2><ol><li><p>首先要在Linux系统中，启动Zookeeper注册中心</p></li><li><p>在项目的pom文件中多添加一个依赖<img src="D:\笔记\Typora\note\图片\image-20210310120300775.png" alt="image-20210310120300775"></p></li><li><p>然后编写yml文件<img src="D:\笔记\Typora\note\图片\image-20210310120437519.png" alt="image-20210310120437519"></p></li><li><p>主启动类</p><p><img src="D:\笔记\Typora\note\图片\image-20210310120523019.png" alt="image-20210310120523019"></p></li><li><p>在启动的时候，会报错，是因为Zookeeper依赖里面含有Zookeeper的旧版本，使之与我们在Linux系统安装的Zookeeper版本不匹配导致报错</p><p>解决办法：<img src="D:\笔记\Typora\note\图片\image-20210310120713683.png" alt="image-20210310120713683"></p></li><li><p>思考：Zookeeper的服务节点是临时节点还是持久节点</p><p>​        答：是临时节点，它相比较于eureka，没有保护机制，而是在某一段时间内，如果客户端没有发送心跳数据包就直接删除。</p></li></ol><h2 id="5-Consul"><a href="#5-Consul" class="headerlink" title="5.Consul"></a>5.Consul</h2><h3 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h3><p>​            Consul是一套开源的分布式服务发现和配置管理系统，又HashiCorp公司用Go语言开发</p><p>​            提供了微服务系统中的服务治理、配置中心、控制总线、等功能。功能可单独使用，也可以一起使用构建服务网络，总之Consul提供了一种完整的服务网络解决风格</p><p>​            优点：基于raft协议，简洁；支持健康检查，同时支持HTTP和DNS协议，支持跨数据中心的WAN集群 提供图形界面  跨平台支持Linux、Mac、Windows</p><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ol><li>服务发现：提供HTTP和DNS两种发现方式</li><li>健康检测：支持多种方式：HTTP、TCP、Docker、Shell脚本定制化</li><li>KV存储：KEY Value的存储方式</li><li>多数据中心： Consul支持多数据中心</li><li>可视化Web界面</li></ol><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><ol><li>先去Consul官网下载</li><li>完成之后打开压缩包，看到Consul.exe文件，在此打开cmd窗口</li><li>输入命令：consul agent -dev，运行成功</li><li>访问<a href="http://localhost:8500/">http://localhost:8500</a></li></ol><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li><p>pom文件中加入以下依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-consul-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写yml文件</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">server:  port: 80spring:  application:    name: consul-order  cloud:    consul:      host: localhost      port: 8500      discovery:        service-name: ${spring.application.name}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>主启动类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consul_order80</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Consul_order80</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写业务代码，验证注册是否成功，以及是否能访问数据。</p></li></ol><h2 id="6-三大注册中心的异同点"><a href="#6-三大注册中心的异同点" class="headerlink" title="6.三大注册中心的异同点"></a>6.三大注册中心的异同点</h2><p><img src="D:\笔记\Typora\note\图片\image-20210310133646113.png" alt="image-20210310133646113"></p><p><img src="D:\笔记\Typora\note\图片\image-20210310133708206.png" alt="image-20210310133708206"></p><p><img src="D:\笔记\Typora\note\图片\image-20210310133719084.png" alt="image-20210310133719084"></p><h2 id="7-Ribbon"><a href="#7-Ribbon" class="headerlink" title="7.Ribbon"></a>7.Ribbon</h2><h3 id="简介：-1"><a href="#简介：-1" class="headerlink" title="简介："></a>简介：</h3><p>​    ribbon是基于Netflix Ribbon实现的一套客户端负载<strong>均衡的工具</strong></p><p>​    Ribbon是Netflix发布的开源项目，主要功能是提供 <strong>客户端的软件负载均衡算法和服务调用</strong></p><p>​    我们可以很容易的使用Ribbon实现自定义的负载均衡算法</p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><ul><li><p>负载均衡是什么？</p><ul><li>简单的说就是将用户的请求平摊的分配到多个服务器上，从而达到系统HA（高可用）</li><li>常见的负载均衡又软件Nginx、LVS、硬件F5</li></ul></li><li><p>Ribbon本地负载均衡客户端 VS Nginx服务端负载均衡</p><ul><li>Nginx是服务器负载均衡，客户端所有的请求都会交给nginx，然后由nginx实现转发请求。即负载均衡是由服务器实现的。</li><li>Ribbon本地负载均衡，在调用微服务接口的时候，会在注册中心上获取注册信息服务列表后缓存到JVM本地，从而在本地实现RPC远程服务调用技术</li></ul></li><li><p>负载均衡分为两种：集中式LB、进程内LB</p><ul><li><p>集中式LB：在服务的消费方和提供方之间使用独立的LB设施，由该设施负责把访问请求通过某种策略转发至服务的提供方</p></li><li><p>进程内LB：将LB逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选择出一个合适的服务器</p></li></ul></li><li><p>Ribbon属于进程内LB，它只是一个类库，集成于消费方进程，消费方通过它来获取服务器提供方的地址。</p></li><li><p>Ribbon在工作时分为两步</p><ul><li>第一步：先选择EurekaServer，它优先选择在同一个区域内负载较少的server</li><li>第二步：根据用户指定的策略，从server取到的服务注册列表中选择一个地址</li><li>Ribbon提供多种策略：轮询、随机、根据响应时间加权等。</li></ul></li></ul><h3 id="Ribbon的使用"><a href="#Ribbon的使用" class="headerlink" title="Ribbon的使用"></a>Ribbon的使用</h3><ol><li><p>首先我们如果在项目中添加了</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>那么我们就不需要再添加Ribbon的依赖，因为新版的Eureka依赖包中包含了Ribbon依赖，所以我们可以直接使用</p></li><li><p>实现负载均衡肯定是在集群的环境下进行的，所以我们在80消费者端口的Configuration的Rest Template上面加上@LoadBalancer注解</p></li><li><p>访问的地址直接填写spring application name 即可</p></li></ol><h3 id="Ribbon的负载均衡详解"><a href="#Ribbon的负载均衡详解" class="headerlink" title="Ribbon的负载均衡详解"></a>Ribbon的负载均衡详解</h3><ul><li>负载均衡分为哪几种方式</li></ul><p><img src="D:\笔记\Typora\note\图片\image-20210310212521311.png" alt="image-20210310212521311"></p><ul><li>负载均衡的算法：</li></ul><p><img src="D:\笔记\Typora\note\图片\image-20210310212616061.png" alt="image-20210310212616061"></p><ul><li><p>负载均衡的接口与类实现</p><p><img src="D:\笔记\Typora\note\图片\image-20210310213007243.png" alt="image-20210310213007243"></p></li><li><p>查看源码，首先进入到IRul接口中，然后CTRL+Alt+b显示其所有的实现类</p></li></ul><p><img src="D:\笔记\Typora\note\图片\image-20210310213120384.png" alt="image-20210310213120384"></p><ul><li><p>RoundRobinRule就是轮询负载均衡的类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//这里是对服务地址的选择</span><span class="token keyword">public</span> <span class="token class-name">Server</span> <span class="token function">choose</span><span class="token punctuation">(</span><span class="token class-name">ILoadBalancer</span> lb<span class="token punctuation">,</span> <span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lb <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//如果lb是空，会提示没有负载均衡</span>        log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"no load balancer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token class-name">Server</span> server <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>server <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> count<span class="token operator">++</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Server</span><span class="token punctuation">&gt;</span></span> reachableServers <span class="token operator">=</span> lb<span class="token punctuation">.</span><span class="token function">getReachableServers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Server</span><span class="token punctuation">&gt;</span></span> allServers <span class="token operator">=</span> lb<span class="token punctuation">.</span><span class="token function">getAllServers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> upCount <span class="token operator">=</span> reachableServers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里是第几次请求数</span>                <span class="token keyword">int</span> serverCount <span class="token operator">=</span> allServers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里是服务总集群数</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>upCount <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> serverCount <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> nextServerIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">incrementAndGetModulo</span><span class="token punctuation">(</span>serverCount<span class="token punctuation">)</span><span class="token punctuation">;</span>                    server <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Server</span><span class="token punctuation">)</span>allServers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nextServerIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>server <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>server<span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> server<span class="token punctuation">.</span><span class="token function">isReadyToServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">return</span> server<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        server <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"No up servers available from load balancer: "</span> <span class="token operator">+</span> lb<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&gt;=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"No available alive servers after 10 tries from load balancer: "</span> <span class="token operator">+</span> lb<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> server<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">incrementAndGetModulo</span><span class="token punctuation">(</span><span class="token keyword">int</span> modulo<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> current<span class="token punctuation">;</span><span class="token comment">//当前的服务端口号</span>    <span class="token keyword">int</span> next<span class="token punctuation">;</span><span class="token comment">//下一个服务端口号</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nextServerCyclicCounter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        next <span class="token operator">=</span> <span class="token punctuation">(</span>current <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> modulo<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>nextServerCyclicCounter<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> next<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="手写Ribbon轮询负载均衡算法并使用"><a href="#手写Ribbon轮询负载均衡算法并使用" class="headerlink" title="手写Ribbon轮询负载均衡算法并使用"></a>手写Ribbon轮询负载均衡算法并使用</h3><p>过程图：</p><p><img src="D:\笔记\Typora\note\图片\image-20210310222003535.png" alt="image-20210310222003535"></p><ol><li><p>首先去掉在order工程，下面的Configuration类，里面自动注入RestTemplate的@LoadBalanced注解</p></li><li><p>编写LoadBalancer接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LoadBalancer</span> <span class="token punctuation">{</span>    <span class="token comment">//这里主要是获取所有的微服务端</span>    <span class="token class-name">ServiceInstance</span> <span class="token function">instances</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceInstance</span><span class="token punctuation">&gt;</span></span> serviceInstances<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写MyLB</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">springcloud<span class="token punctuation">.</span>hwm<span class="token punctuation">.</span></span>LB<span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLB</span> <span class="token keyword">implements</span> <span class="token class-name">LoadBalancer</span> <span class="token punctuation">{</span>    <span class="token comment">//必须有一个原子型整数,这里设置的初始值为0</span>    <span class="token keyword">private</span> <span class="token class-name">AtomicInteger</span> atomicInteger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndIncreament</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> current<span class="token punctuation">;</span><span class="token comment">//当前的访问次数</span>        <span class="token keyword">int</span> next<span class="token punctuation">;</span><span class="token comment">//下一次访问次数</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>atomicInteger<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当前的访问次数先从这个原子型整数这里获取；</span>            <span class="token comment">//2147483647这个数是整型的最大值，如果大于这个数就从0记起，如果不大于就等于当前访问次数+1</span>            next <span class="token operator">=</span> current <span class="token operator">&gt;=</span> <span class="token number">2147483647</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> current <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>atomicInteger<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//这里的compareAndSet，使用的是CAS原理，CAS相比Synchronized，避免了锁的使用，总体性能比Synchronized高很多.</span>        <span class="token comment">//这里我们分析一下CAS的方法是如何进行使用的：</span>        <span class="token comment">//在这个循环条件下，假设有多个线程在同时执行这段代码，即使有一个线程在产生了新值之后，</span>        <span class="token comment">// 它还需要让它自己产生的新值与旧值比较之后才能决定要不要这个新值。也就是说，如果oldValue是10，</span>        <span class="token comment">// 而产生的新值是20，然后程序还没到while的时候，有其他线程修改了newValue值，那当这个线程到while判断的时候，</span>        <span class="token comment">// 会出现comparAndSet方法的预期值不跟实际值一样，导致方法返回false，直到没有其他线程干扰。这时就确定了新产生的值。</span>        <span class="token comment">//那么根据以上的原理，只有当预期值和实际值相同的时候，方法返回的是True，那么这个时候while循环内是false，就会跳出循环 并且的到我们的预期值</span>        <span class="token keyword">return</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment">//这个就是获取服务端的所有信息,根据信息我们来返回我们想要的值</span>    <span class="token keyword">public</span> <span class="token class-name">ServiceInstance</span> <span class="token function">instances</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceInstance</span><span class="token punctuation">&gt;</span></span> serviceInstances<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//这里就是轮询算法的关键之处，也就是我们所说的   访问次数 % 服务集群数  = 实际调用服务的下标</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">getAndIncreament</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> serviceInstances<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通过下标选择返回哪一个微服务端</span>        <span class="token keyword">return</span> serviceInstances<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写OrderController类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/customer/payment/lb"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getLB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceInstance</span><span class="token punctuation">&gt;</span></span> instances <span class="token operator">=</span> discoveryClient<span class="token punctuation">.</span><span class="token function">getInstances</span><span class="token punctuation">(</span><span class="token string">"payment"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>instances<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>instances<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">ServiceInstance</span> serviceInstance <span class="token operator">=</span> loadBalancer<span class="token punctuation">.</span><span class="token function">instances</span><span class="token punctuation">(</span>instances<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">URI</span> uri <span class="token operator">=</span> serviceInstance<span class="token punctuation">.</span><span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前的URL为+"</span><span class="token operator">+</span>uri<span class="token operator">+</span><span class="token string">"/payment/lb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>uri<span class="token operator">+</span><span class="token string">"/payment/lb"</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="8-OpenFeign"><a href="#8-OpenFeign" class="headerlink" title="8.OpenFeign"></a>8.OpenFeign</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>​    Feign是一个声明式的web Service客户端。使用Feign能让编写WebService客户端更加简单，它的使用方法是 <strong>定义一个服务接口，然后在上面添加注解</strong>。Feign也支持可拔插式的编码器和解码器。spring cloud对Feign进行了封装，使其支持了SpringMVC标准注解和HttpMessageConverters。Feign可以与Eureka和Ribbon组合使用以支持负载均衡</p><h3 id="Feign能干什么"><a href="#Feign能干什么" class="headerlink" title="Feign能干什么"></a>Feign能干什么</h3><p>​    Feign旨在使编写javaHttp客户端变得更容易</p><p>​    前面在使用Ribbon+RestTemplate时，利用Rest Template对http请求的封装处理，形成了一套模板化的调用方法。但是在实际开发过程中，由于对服务依赖的调用可能不止一处，往往一个接口会被多处调用，所以通常都会针对每个微服务自行封装一些客户端类来包装这些依赖服务的调用。所以，Feign在此基础上做了进一步封装，由它来帮助我们定义和实现依赖服务接口的定义。在Feign的实现下，<strong>我们只需要创建一个接口并使用注解的方式来配置它（以前是Dao接口上面标注Mapper注解，现在时一个微服务接口上面标注一个Feign注解即可）</strong>，即可完成对服务提供方的接口绑定，简化了使用Spring cloud Ribbon时，自动封装服务调用客户端的开发量。</p><p>​    Feign集成了Ribbon</p><p>​        利用Ribbon维护了payment的服务列表信息，并且通过轮询实现了客户端的负载均衡。而与Ribbon不同的是，<strong>通过feign只需要定义服务绑定接口且以声明式的方法，</strong>优雅而简单的实现了服务调用</p><h3 id="Feign与OpenFeign的区别"><a href="#Feign与OpenFeign的区别" class="headerlink" title="Feign与OpenFeign的区别"></a>Feign与OpenFeign的区别</h3><p><img src="D:\笔记\Typora\note\图片\image-20210311101020998.png" alt="image-20210311101020998"></p><h3 id="Feign的使用"><a href="#Feign的使用" class="headerlink" title="Feign的使用"></a>Feign的使用</h3><ol><li><p>创建一个消费者项目</p></li><li><p>编写pom文件</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>Common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写yam文件</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">server:  port: 80eureka:  client:    register-with-eureka: false    service-url:      defaultZone: http://eureka7001.com:7001/eureka,http://eureka7003.com:7003/eureka<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>主启动类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableFeignClients</span>  <span class="token comment">//一定要添加这个注解</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderFeignMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">OrderFeignMain</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写service接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span><span class="token string">"payment"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FeignService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/payment/findById/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span>payment<span class="token punctuation">&gt;</span></span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写controller</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeignController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">FeignService</span> service<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/customer/findById/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span>payment<span class="token punctuation">&gt;</span></span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">long</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> service<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>注意：当报404错误的时候，一定要看好自己的地址是否正确的编写，细心检查（报错点）</p><h3 id="Feign的超时控制"><a href="#Feign的超时控制" class="headerlink" title="Feign的超时控制"></a>Feign的超时控制</h3><p>​    项目启动，Feign客户端默认只等待1s，但是服务端需要超过1s，导致Feign客户端不想等待了，直接返回报错。为了避免这样的情况，有时候我们需要设置Feign客户端的超时控制。</p><p>​    案例：</p><p>​    先假设超时：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/TimeOut"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paymentTimeOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//这里设置延迟的时间为3秒</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> serverPort<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    然后通过消费者去调用：会报错</p><p>​    这时候我需要通过yml进行配置</p><p>​    <strong>依然报错：</strong></p><p>​            原因：因为在消费者的pom文件中，导入了Eureka和Feign两个依赖包，他们下面都包含Ribbon依赖包，导致包冲突，并且不能直接通过Ribbon来设置成功</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"># 设置feign客户端超时时间ribbon:  #指的是建立连接所用的时间，适用于网络状况正常的情况下，两端连接所用的时间  ReadTimeOut: 5000  #指的是建立连接后从服务器读取到可用资源所用的时间  ConnectTimeOut: 5000    #这个是不成功的，即使启动也会报错<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        正确的修改方式：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">feign:  client:    config:      default:        #简历连接所用的时间，适用于网络状况正常的情况下，两端连接所需要的时间        ConnectTimeOut: 5000        #指建立连接后从服务端读取到可用资源所用的时间        ReadTimeOut: 10000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="日志增强"><a href="#日志增强" class="headerlink" title="日志增强"></a>日志增强</h3><p>​    Feign提供了日志打印功能，可以通过配置来调整日志级别，从而了解Feign中Http请求的细节。说白了就是<strong>对Feign接口的调用情况进行监控和输出</strong> </p><p>​    使用：</p><ol><li><p>开启日志增强功能：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Config</span> <span class="token punctuation">{</span>    <span class="token comment">//开启详细日志</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token class-name">Logger<span class="token punctuation">.</span>Level</span> <span class="token class-name">Log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Logger<span class="token punctuation">.</span>Level</span><span class="token punctuation">.</span>FULL<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置yml文件</p></li></ol><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">logging:  level:    #feign日志以什么级别监控哪个接口    springcloud.hwm.service.FeignService: debug<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>日志级别：</p><p><img src="D:\笔记\Typora\note\图片\image-20210311131546538.png" alt="image-20210311131546538"></p><h2 id="9-Hystrix"><a href="#9-Hystrix" class="headerlink" title="9.Hystrix"></a>9.Hystrix</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>Hystrix是一个用于处理分布式系统的延迟和容错的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时、异常等，Hystrix能够保证在一个依赖出问题的情况下，<strong>不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性</strong></li><li>“断路器”本身是一种开关装置，当某个服务单元发生故障后，通过断路器的故障监控（类似于熔断保险丝），<strong>向调用方法返回一个符合预期的、可处理的备选响应（FallBack）,而不是长时间的等待或者抛出调用方无法处理的异常</strong>，这样就保证了服务调用方法的线程不会被长时间、不必要的占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。</li></ul><ul><li>服务降级：<ul><li>服务器忙，请稍后再试，不让客户端等待并立刻返回一个友好提示，fallback</li><li>哪些情况会发出降级：<ul><li>程序运行异常</li><li>超时</li><li>服务熔断触发服务降级</li><li>线程池、信号量打满也会导致服务降级</li></ul></li></ul></li><li>服务熔断：<ul><li>类比保险丝，达到最大服务访问后直接拒绝访问，拉闸限电，然后调用服务降级方法并返回友好提示</li><li>服务的降级-&gt;进而熔断-&gt;恢复调用链路</li></ul></li><li>服务限流：<ul><li>秒杀高并发等操作，严禁一窝蜂的过来拥挤，排队有序进行</li></ul></li></ul><h3 id="Hystrix的服务降级使用"><a href="#Hystrix的服务降级使用" class="headerlink" title="Hystrix的服务降级使用"></a>Hystrix的<strong>服务降级</strong>使用</h3><ol><li><p>首先创建一个消费者客户端（一般都是使用在消费者客户端）</p></li><li><p>pom文件添加以下依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>yml文件的编写</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">server:  port: 80eureka:  client:    register-with-eureka: false    service-url:      defaultZone: http://eureka7001.com:7001/eureka,http://eureka7003.com:7003/eureka# 这里设置之后，后面的超时测试老是报错#原因：关键在于feign:hystrix:enabled: true的作用，官网解释“Feign将使用断路器包装所有方法”，也就是将@FeignClient标记的那个service接口下所有的方法进行了hystrix包装（类似于在这些方法上加了一个@HystrixCommand），这些方法会应用一个默认的超时时间为1s，所以你的service方法也有一个1s的超时时间，service1s就会报异常，controller立马进入备用方法，controller上那个3秒那超时时间就没有效果了。feign:  hystrix:    enabled: true#解决：hystrix:  command:    default:      execution:        isolation:          thread:            timeoutInMilliseconds: 3000#然后ribbon的超时时间也需加上ribbon:  ReadTimeout: 5000  ConnectTimeout: 5000    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>主启动类的编写</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableFeignClients</span><span class="token annotation punctuation">@EnableHystrix</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeignHystrixOrderMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">FeignHystrixOrderMain</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>service层的编写</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token comment">//这里的fallback就是利用一个实现类，完成所有方法的降级处理，这样可以程序耦合度降低，而不会把所有的降级方法都写在Servcie或者Controller类里面，造成代码膨胀且杂乱</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"PAYMENT-HYSTRIX"</span><span class="token punctuation">,</span>fallback <span class="token operator">=</span> <span class="token class-name">FeignHystrixServiceImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FeignHystrixService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/payment/hystrix/ok/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">payment_ok</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/payment/hystrix/TimeOut/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">payment_TimeOut</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Controller类的编写</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Slf4j</span><span class="token comment">//这个是定义全局的降级方法，前提是加了@HystrixCommand注解。</span><span class="token annotation punctuation">@DefaultProperties</span><span class="token punctuation">(</span>defaultFallback <span class="token operator">=</span> <span class="token string">"globolMethod"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeignHystrixOrder80Controller</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">FeignHystrixService</span> feignHystrixService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@HystrixCommand</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/customer/payment/hystrix/ok/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">payment_ok</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token operator">=</span> <span class="token number">10</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> feignHystrixService<span class="token punctuation">.</span><span class="token function">payment_ok</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/customer/payment/hystrix/TimeOut/{id}"</span><span class="token punctuation">)</span>    <span class="token comment">//这个是特定的降级方法</span>    <span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">"TimeOutHandler"</span><span class="token punctuation">,</span>commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"execution.isolation.thread.timeoutInMilliseconds"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"5000"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">payment_TimeOut</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> feignHystrixService<span class="token punctuation">.</span><span class="token function">payment_TimeOut</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">TimeOutHandler</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"系统繁忙，请稍后再试!!!!"</span><span class="token operator">+</span>id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">globolMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"系统出错"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h3><p>​    熔断机制概述：</p><p>​        熔断机制是应对雪崩效应的一种微服务链路的保护机制。当扇出链路的某个微服务出错不可用或者响应时间太长，会进行服务降级，进而熔断该节点微服务的调用，快速返回错误响应信息，<strong>当检测到该节点微服务调用响应正常后，恢复调用链路</strong></p><p>​        在Spring Cloud框架中，熔断机制通过Hystrix实现，Hystrix会监控微服务间调用的状况，当失败的调用到一定阈值，缺省是5s内20次调用失败，就会启动熔断机制。熔断机制的注解@HystrixCommand。</p><ul><li>熔断过程中的三大状态：</li></ul><p><img src="D:\笔记\Typora\note\图片\image-20210311205815632.png" alt="image-20210311205815632"></p><ul><li>熔断的三个重要参数：</li></ul><p><img src="D:\笔记\Typora\note\图片\image-20210311205852006.png" alt="image-20210311205852006"></p><ul><li>熔断过程：</li></ul><p><img src="D:\笔记\Typora\note\图片\image-20210311210022578.png" alt="image-20210311210022578"></p><ul><li>熔断最后的恢复机制：</li></ul><p><img src="D:\笔记\Typora\note\图片\image-20210311210119799.png" alt="image-20210311210119799"></p><h3 id="Hystrix图形化监控"><a href="#Hystrix图形化监控" class="headerlink" title="Hystrix图形化监控"></a>Hystrix图形化监控</h3><p>​    除了隔离依赖服务的调用以外，Hystrix还提供了准实时的调用监控，Hystrix会持续的继续所有通过Hystrix发起的请求的执行信息，并以统计报表和图形的形式展示给用户，包括每秒执行多少请求，多少失败。Netflix通过hystrix-metrics-event-steam项目实现了对以上指标的监控。Spring cloud也提供了HystrixDashboard的整合，对监控内容转化成可视化界面</p><p>​    如何使用：</p><ol><li><p>首先，添加依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--        导入图形监控的依赖--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-hystrix-dashboard<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 这两个依赖必须存在于客户端--&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>yml文件</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">server:  port: 9001<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>主启动类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableHystrixDashboard</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DashboardMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">DashboardMain</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>这里在客户端的启动类里面添加</p><p>如果不添加网页会报：Unable to connect to Command Metric Stream.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 此配置是为了服务监控而配置的，与服务容错本身无关，spring cloud升级后的坑 * Servlet RegistrationBean 因为springboot的默认路径不是/hystrix.stream， * 只要在自己的项目里配置下面得servlet就可以了 */</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">ServletRegistrationBean</span> <span class="token function">getServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">HystrixMetricsStreamServlet</span> streamServlet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HystrixMetricsStreamServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ServletRegistrationBean</span> registrationBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span>streamServlet<span class="token punctuation">)</span><span class="token punctuation">;</span>    registrationBean<span class="token punctuation">.</span><span class="token function">setLoadOnStartup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    registrationBean<span class="token punctuation">.</span><span class="token function">addUrlMappings</span><span class="token punctuation">(</span><span class="token string">"/hystrix.stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    registrationBean<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"HystrixMetricsStreamServlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> registrationBean<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="10-GateWay"><a href="#10-GateWay" class="headerlink" title="10.GateWay"></a>10.GateWay</h2><h3 id="简介：-2"><a href="#简介：-2" class="headerlink" title="简介："></a>简介：</h3><ol><li>SpringCloud GateWay是Spring Cloud的一个全新项目，基于Spring5.0+SpringBoot2.0和Project Reactor等技术开发的网关，它旨在为微服务架构提供一种简单有效的同意的API路由管理方式</li><li>SpringCloud GateWay作为SpringCloud生态系统中的网关，目标是替代Zuul，在SpringCloud2.0以上版本中，没有对新版本的Zuul2.0以上最新高性能版本进行集成，仍然还是使用Zuul1.x非Reactor模式的老版本。而为了提升网关的性能，SpringCloud Gateway是基于web Flux框架实现的，而web Flux框架底层则使用了高性能的Reactor模式通信框架Netty。</li><li>SpringCloud GateWay的目标提供统一的路由方式且基于Filter链的方式提供了网关基本的功能</li></ol><h3 id="为什么选择GateWay"><a href="#为什么选择GateWay" class="headerlink" title="为什么选择GateWay"></a>为什么选择GateWay</h3><ol><li>Netflix不太靠谱，zuul2.0一直跳票，迟迟不发布<ol><li>一方面因为Zuul1.0已经进入了维护阶段，而且Gateway是SpringCloud团队研发的，是亲儿子产品，值得信赖。而且很多功能比起Zuul是非常简单便捷的</li><li>GatWay是基于异步非阻塞模型上进行开发的，性能方面不需要担心，虽然Netflix早就发布了最新的Zuul2.x，但Spring cloud貌似没有整合计划。而且Netflix相关组件都宣布维护期，不知前景如何</li></ol></li><li>SpringCloud GateWay具有如下特性<ol><li>基于Spring5.0+SpringBoot2.0和Project Reactor进行构建</li><li>动态路由：能够匹配任何请求属性</li><li>可以对路由指定Predicate（断言）和Filter（过滤器）</li><li>集成Hystrix的断路器功能</li><li>集成Spring cloud服务发现功能</li><li>易于编写的Predicate和Filter</li><li>请求限流功能</li><li>支持路径重写</li></ol></li><li>SpringCloud GateWay于Zuul的区别<ol><li>Zuul1.x是一个基于阻塞IO的API Gateway</li><li>Zuul 1.x<strong>基于Servlet2.5使用阻塞架构</strong>它不支持任何长连接（如web Socket）Zuul的设计模式和Nginx较像，每次IO操作都是从工作线程中选择一个执行，请求线程被阻塞到工作线程完成，但是差别是Nginx用C++实现，Zuul用Java实现，而JVM本身会有第一次加载较慢的情况，使得Zuul的性能相对较差</li><li>Zuul2.x理念更先进，想基于Netty非阻塞和支持长连接，但Spring cloud目前还没有整合。Zuul2.x的性能较Zuul1.x有较大提升。在性能方面，根据官方提供的基准测试，SpringCloud GateWay的RPS（每秒请求数）是Zuul的1.6倍</li><li>SpringCloud GateWay建立在Spring5.0+SpringBoot2.0和Project Reactor之上，使用非阻塞API</li><li>SpringCloud GateWay还支持web Socket，并且与Spring紧密集成拥有更好的开发体验</li></ol></li></ol><h3 id="Zuul模型"><a href="#Zuul模型" class="headerlink" title="Zuul模型"></a>Zuul模型</h3><ul><li><p>Spring cloud中所集成的zuul版本，采用的是Tomcat容器，使用的是传统的Servlet IO处理模型</p></li><li><p>servlet由servlet container进行生命周期管理</p><ul><li>container启动时构建servlet对象并调用servlet init进行初始化</li><li>container运行时，接受请求，并为每个请求分配一个线程（一般从线程池中获取空闲线程）然后调用Service</li><li>container关闭时调用destory销毁</li></ul><p><img src="D:\笔记\Typora\note\图片\image-20210314144009513.png" alt="image-20210314144009513"></p><p><strong>上述模型的缺点</strong></p><p>​    servlet是一个简单的网络IO模型，当请求进入servlet container时，就会为其绑定一个线程，在<strong>并发不高的场景下</strong>这种模型是适用的，但是一旦高并发（比如抽风用jemeter压），线程数量就会上涨，而线程资源代价是昂贵的（上下文切换，内存消耗大）严重影响请求的处理时间。在一些简单业务场景下，不希望为每个request分配一个线程，只需要1个或者几个线程就能应对极大并发的请求，这种业务场景下servlet模型没有优势</p><p>​    所以zuul1.x是<strong>基于servlet之上的一个阻塞式处理模型</strong>，即spring实现了处理所有request请求的一个servlet并由该servlet阻塞式处理，所以Zuul无法摆脱servlet模型的弊端</p></li></ul><h3 id="Gateway的三个核心概念"><a href="#Gateway的三个核心概念" class="headerlink" title="Gateway的三个核心概念"></a>Gateway的三个核心概念</h3><ol><li>路由：路由时构建网关的基本模块，它由ID，目标URI，一系列的断言和过滤器组成，如果断言为true则匹配该路由</li><li>断言：开发人员可以匹配HTTP请求中的所有内容（请求头，请求参数），如果请求与断言相匹配则进行路由</li><li>过滤：指的是Spring框架中GatewayFilter的实例，使用过滤器，可以在请求被路由前或者之后对请求进行修改</li></ol><p><img src="D:\笔记\Typora\note\图片\image-20210314153602944.png" alt="image-20210314153602944"></p><p><img src="D:\笔记\Typora\note\图片\image-20210314153702611.png" alt="image-20210314153702611"></p><p>客户端向Spring cloudGateWay发出请求，然后再Mapping中找到与请求相匹配的路由，将其发送到GateWayWebHandler</p><p>Handler再通过指定的过滤器链将请求发送到实际的服务执行业务逻辑，然后返回</p><p>过滤器之间用虚线分开是因为过滤器可能会在发送代理请求之前或者之后执行业务逻辑</p><p>Filter在”pre”类型的过滤器可以做参数校验、权限校验、流量监控、日志输出、协议转换等，</p><p>在”post”类型的过滤器中可以做响应内容、响应头的修改、日志的输出，流量监控等有着非常重要的作用</p><h3 id="Gateway的使用"><a href="#Gateway的使用" class="headerlink" title="Gateway的使用"></a>Gateway的使用</h3><ol><li><p>创建一个项目</p></li><li><p>pom文件导入</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 首先得说明以下，必须把web和actuator这两个依赖除去---&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>Common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>yml文件</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">server:  port: 9527spring:  application:    name: gateway  cloud:    gateway:      discovery:        locator:          enabled: true  #开启从注册中心动态创建路由的功能，利用微服务名进行路由      routes:      # 这下面不仅可以配置断言，还可以配置filter        - id: payment_route #路由的id，没有固定规则但要求唯一，建议配合服务名#          uri: http://localhost:8001          uri: lb://PAYMENT          predicates:            - Path=/payment/findById/** #断言，路径相匹配的进行路由        - id: payment_route2          uri: lb://PAYMENT # 匹配后提供服务的路由          predicates:            - Path=/payment/lb/**eureka:  client:    register-with-eureka: true    fetch-registry: true    service-url:      defaultZone: http://eureka7001.com:7001/eureka,http://eureka7003.com:7003/eureka  instance:    hostname: gateway-service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>主启动类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GatwayMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">GatwayMain</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置gateway路由的第二种方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GatewayConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RouteLocator</span> <span class="token function">customerRouteLocator2</span><span class="token punctuation">(</span><span class="token class-name">RouteLocatorBuilder</span> builder<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">RouteLocatorBuilder<span class="token punctuation">.</span>Builder</span> routes <span class="token operator">=</span>builder<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        routes<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"route_payment3"</span><span class="token punctuation">,</span>r<span class="token operator">-&gt;</span>r<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">"/guoji"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"http://news.baidu.com/guoji"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> routes<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置全局Filter</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GlobalFilter</span><span class="token punctuation">,</span> <span class="token class-name">Ordered</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"我的过滤器"</span><span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> uname <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueryParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token string">"uname"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>uname<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"用户名为null，非法用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>NOT_ACCEPTABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="11-spring-cloud-Config-配置总控中心"><a href="#11-spring-cloud-Config-配置总控中心" class="headerlink" title="11.spring cloud Config 配置总控中心"></a>11.spring cloud Config 配置总控中心</h2><h3 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h3><p>​    spring cloud config 为微服务框架中的微服务提供集中化的外部配置支持，配置服务器为<strong>各个不同微服务应用</strong>的所有环境提供了一个 <strong>中心化的外部配置</strong></p><h3 id="怎么用？"><a href="#怎么用？" class="headerlink" title="怎么用？"></a>怎么用？</h3><p>​    spring cloud config分为 <strong>服务端和客户端两部分</strong></p><p>​    服务端也称为 <strong>分布式配置中心，它是一个独立的微服务应用</strong>，用来连接配置服务器并为客户端提供获取配置信息，加密/解密信息等访问接口</p><p>​    客户端则是通过指定的配置中心来管理应用资源，以及与业务相关的配置内容，并在启动的时候从配置中心获取和加载配置信息，配置服务器默认采用git来存储配置信息，这样就有助于对环境配置进行版本管理，并且可以通过git客户端工具来方便的管理和访问配置内容。</p><h3 id="能干嘛？"><a href="#能干嘛？" class="headerlink" title="能干嘛？"></a>能干嘛？</h3><pre><code>1. 集中管理配置文件2. 不同环境不同配置，动态化的配置更新，分环境部署。比如dev/test/prod/beta/release3. 运行期间动态调整配置，不再需要在每个服务部署的机器上编写配置文件，服务会向配置中心统一拉去配置自己的信息4. 当配置发生变动时，服务不需要重启即可感知到配置文件的变化，并应用新的配置5. 将配置信息以REST接口的形式暴露</code></pre><p><img src="D:\笔记\Typora\note\图片\image-20210315091817638.png" alt="image-20210315091817638"></p><h3 id="操作使用"><a href="#操作使用" class="headerlink" title="操作使用"></a>操作使用</h3><ol><li><p>新建两个工程，一个是config服务端，一个是config客户端</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!-这里是服务端导入的依赖</span> <span class="token attr-name">--</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-config-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!-这里是客户端导入的依赖</span> <span class="token attr-name">--</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>yml文件编写</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">#这里是服务端需要编写的yml文件server:  port: 3344spring:  application:    name: config-center  cloud:    config:      server:        git:          uri: https://gitee.com/hou-wenming/springcloud-config.git #上面的git仓库名字          search-paths:            - springcloud-config#          skip-ssl-validation: true#          username: 156542114@qq.com#          password: hwm2000916..          default-label: mastereureka:  client:    register-with-eureka: true    fetch-registry: true    service-url:      defaultZone: http://eureka7001.com:7001/eureka,http://eureka7003.com:7003/eureka  instance:    hostname: config-center<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">#这里是客户端编写的yml文件#命名必须是bootstrap.yml 否则无法获取中心仓库的内容server:  port: 3355spring:  application:    name: config-client    #config客户端配置  cloud:    config:      label: master # 分支名称      name: config # 配置文件名称      profile: dev # 读取后缀名称      uri: http://localhost:3344 # 配置中心地址      # discovery:        # enabled: trueeureka:  client:    register-with-eureka: true    fetch-registry: true    service-url:      defaultZone: http://eureka7001.com:7001/eureka,http://eureka7003.com:7003/eureka  instance:    hostname: config-client# 暴漏监控端点management:  endpoints:    web:      exposure:        include: "*"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>主启动类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//服务端</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableConfigServer</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigCenterMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ConfigCenterMain</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//客户端</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigClientMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ConfigClientMain</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>controller类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RefreshScope</span><span class="token comment">//这个是解决配置中心内容修改，不需要重启的问题</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigClientController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${server.info}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> configInfo<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/configInfo"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> configInfo<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>当我们在配置中心修改了文件的时候，这时候服务端的数据可以实时更新，但是客户端不行，只能重启获取数据（如果服务端庞大，重启将会崩毁）</p><p>解决办法：暴漏监控端点</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"># 暴漏监控端点management:  endpoints:    web:      exposure:        include: "*"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//在Controller类上面加上这个注解</span><span class="token annotation punctuation">@RefreshScope</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最后在cmd命令行中发送一个POST请求</p><p>curl -X POST “<a href="http://localhost:3355/actuator/refresh&quot;">http://localhost:3355/actuator/refresh"</a></p></li></ol><h2 id="12-bus总线"><a href="#12-bus总线" class="headerlink" title="12.bus总线"></a>12.bus总线</h2><h3 id="前提："><a href="#前提：" class="headerlink" title="前提："></a>前提：</h3><p>​    bug总线解决了上面我们的spring cloud config最后因为在远程配置中心修改文件的时候，我们的客户端不能实时的更新配置，而是需要重启才行，然后解决方法是发送一个post请求解决问题，但是我们每次更新都需要发送一个请求未免太麻烦了，这时候bus总线就体现了它的使用价值</p><h3 id="简介：-3"><a href="#简介：-3" class="headerlink" title="简介："></a>简介：</h3><p>​    spring cloud bus 配合 spring cloud config 使用可以实现配置的动态刷新</p><p>​    spring cloud bus是用来将分布式系统的节点与轻量级消息系统连接起来的框架，<strong>它整合了Java的事件处理机制和消息中间件的功能。</strong>spring cloud bus目前支持RabbitMQ和Kafka</p><p><img src="D:\笔记\Typora\note\图片\image-20210316170332385.png" alt="image-20210316170332385"></p><p>这个图是bus通过向一个客户端进行发送，然后这个客户端再向其他客户端进行转发</p><p>​        spring cloud bus能管理和传播分布式系统间的消息，就像一个分布式执行器，可用于广播状态更改、时间推送等，也可以当作微服务间的通信通道</p><p><img src="D:\笔记\Typora\note\图片\image-20210316170855107.png" alt="image-20210316170855107"></p><h3 id="为什么被称为操作总线"><a href="#为什么被称为操作总线" class="headerlink" title="为什么被称为操作总线"></a>为什么被称为操作总线</h3><h4 id="什么是总线"><a href="#什么是总线" class="headerlink" title="什么是总线"></a>什么是总线</h4><p>​    在微服务架构的系统中，<strong>通常会使用轻量级的消息代理</strong>来构建一个<strong>共用的消息主题</strong>，并让系统中所有微服务实例都连接上来，由于 <strong>该主题中产生的消息会被所有实例监听和消费，所以称它为消息总线。</strong>在总线上的各个实例，都可以方便的广播一些需要让其他连接在该主题上的实例都知道的消息</p><h4 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h4><p>​    configClient实例都监听MQ中同一个topic（默认是springcloudbus）。当一个服务刷新数据的时候，它会把这个信息放入到topic中，这样其他监听同一topic的服务就能得到通知，然后去更新自身的配置</p><h3 id="实际操作使用"><a href="#实际操作使用" class="headerlink" title="实际操作使用"></a>实际操作使用</h3><ol><li><p>配置pom文件</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">//使用总线，必须在客户端和服务端添加这个依赖<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-bus-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置yam文件</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">#这个是配置中心，需要用mq的支持# rabbitmq的相关配置rabbitmq:  host: localhost  port: 5672  username: guest  password: guest    management:  endpoints:    web:      exposure:        include: 'bus-refresh'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>后面的配置和前面的配置中心一样</p></li><li><p>如何去操作：</p><ol><li>首先我们得启动我们的eureka注册中心，以及配置中心，和配置客户端</li><li>然后修改一下我们的中心配置文件</li><li>在cmd中发送这个请求：curl -X POST “<a href="http://localhost:3344/actuator/bus-refresh&quot;">http://localhost:3344/actuator/bus-refresh"</a></li><li>登陆rabbit MQ进行广播</li><li>成功！</li><li>也可以针对性的进行广播  在cmd中发送这个请求：curl -X POST “<a href="http://localhost:3344/actuator/bus-refresh%EF%BC%9Aconfig-client:3355&quot;">http://localhost:3344/actuator/bus-refresh：config-client:3355"</a></li></ol></li></ol><h2 id="13-springcloud-stream消息中间件"><a href="#13-springcloud-stream消息中间件" class="headerlink" title="13.springcloud stream消息中间件"></a>13.springcloud stream消息中间件</h2><h3 id="简介：-4"><a href="#简介：-4" class="headerlink" title="简介："></a>简介：</h3><p>​    一句话：屏蔽底层消息中间件的差异，降低切换成本，统一消息的编程模型</p><p>​    官方定义springcloud stream是一个构建消息驱动微服务的框架</p><p>​    应用程序通过inputs或者outputs来与springcloud stream对象交互，通过配置来bingding（绑定），而springcloud stream的binder对象负责与消息中间件交互，所以我们只需要弄清楚如何与springcloud stream交互就可以方便使用消息驱动的方式</p><p>​    通过spring integration来连接消息代理中间件以实现消息事件驱动，springcloud stream为一些供应商的消息中间件产品提供了个性化的自动化配置实现，引用了发布订阅、消费组、分区的三个核心概念</p><h3 id="Stream凭什么可以统一底层差异"><a href="#Stream凭什么可以统一底层差异" class="headerlink" title="Stream凭什么可以统一底层差异"></a>Stream凭什么可以统一底层差异</h3><p>​    通过向应用程序暴露统一的Channel通道，使得应用程序不需要再考虑各个不同的消息中间件实现</p><p>​    <strong>通过定义绑定器Binder作为中间层，实现了应用程序与消息中间件细节之间的隔离</strong></p><h3 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h3><ul><li>标准MQ<ul><li>生产者/消费者之间靠<strong>消息</strong>媒介传递信息内容  Message</li><li>消息必须走特定的<strong>通道</strong>    消息通道Message Channel</li><li>消息通道里的消息如何被消费呢，谁负责收发<strong>处理</strong>     消息通道MessageChannel的子接口SubscribleChannel，由MessageHandler消息处理器所订阅</li></ul></li></ul><p><img src="D:\笔记\Typora\note\图片\image-20210317095910865.png" alt="image-20210317095910865"></p><ul><li>为什么用cloudStream？<ul><li>这些中间件的差异性导致我们实际项目开发给我们造成了一定的困扰，我们如果用了两个消息队列的其中一种，后面的业务需求，我想往另外一种消息队列进行迁移，这时候无疑就是一个灾难性的，<strong>一大堆东西都要重新推倒重新做</strong>，因为它跟我们的系统耦合了，这时候spring cloud stream 给我们提供了一种解耦合的方式</li></ul></li><li>Stream中的消息通信方式遵循了发布-订阅模式<ul><li>Binder：很方便的连接中间件，屏蔽差异</li><li>Channel：通道，是队列的一种抽象，在消息通讯系统中就是实现存储和转发的媒介，通过channel对队列进行配置</li><li>Source和SInk：简单的可理解为参照对象是SpringCloudStream自身，从Stream发布消息就是输出，接收消息就是输入</li></ul></li></ul><h3 id="SpringCloudStream标准流程套路"><a href="#SpringCloudStream标准流程套路" class="headerlink" title="SpringCloudStream标准流程套路"></a>SpringCloudStream标准流程套路</h3><p><img src="D:\笔记\Typora\note\图片\image-20210317101033342.png" alt="image-20210317101033342"></p><p><img src="D:\笔记\Typora\note\图片\image-20210317101042001.png" alt="image-20210317101042001"></p><h3 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h3><ol><li><p>创建stream流的服务端和客户端</p></li><li><p>导入pom文件</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>Common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--导入stream rabbit依赖--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-stream-rabbit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写yml文件</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">server:  port: 9902spring:  application:    name: stream-customer  cloud:    stream:      binders: # 在此处配置要绑定的rabbitmq的服务信息        defaultRabbit: # 表示定义的名称，用于bingding整合          type: rabbit #消息组件类型          environment: #设置rabbitmq的相关的环境配置            spring:              rabbitmq:                host: localhost                port: 5672                username: guest                password: guest      bindings: #服务的整合处理        input: #这个名字是一个通道的名称          destination: studyExchange #表示要使用的Exchange名称定义          content-type: application/json #设置消息类型，本次为json，文本则设置text/plain          defaultbinder: defaultRabbit #设置要绑定的消息服务的具体设置          group: Aeureka:  client:    register-with-eureka: true    fetch-registry: true    service-url:      defaultZone: http://eureka7001.com:7001/eureka,http://eureka7003.com:7003/eureka  instance:    lease-renewal-interval-in-seconds: 2 #设置心跳的时间间隔（默认是30s）    lease-expiration-duration-in-seconds: 5 #如果现在超过了5秒的间隔（默认是90s）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>主启动类</p></li><li><p>提供方的业务类代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> streamrabbitmqService <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//实现类</span><span class="token annotation punctuation">@EnableBinding</span><span class="token punctuation">(</span><span class="token class-name">Source</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamrabbitmqServiceImpl</span> <span class="token keyword">implements</span> streamrabbitmqService <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">MessageChannel</span> output<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> serial <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        output<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">MessageBuilder</span><span class="token punctuation">.</span><span class="token function">withPayload</span><span class="token punctuation">(</span>serial<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*********"</span><span class="token operator">+</span>serial<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//controller</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> streamrabbitmqController <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> streamrabbitmqService service<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/sendMessage"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> service<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>消费方的业务代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@EnableBinding</span><span class="token punctuation">(</span><span class="token class-name">Sink</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamMQCustomerController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${server.port}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> serverPort<span class="token punctuation">;</span>    <span class="token annotation punctuation">@StreamListener</span><span class="token punctuation">(</span><span class="token class-name">Sink</span><span class="token punctuation">.</span>INPUT<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token class-name">Message</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> message<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者9902-----&gt;接受到的消息："</span><span class="token operator">+</span>message<span class="token punctuation">.</span><span class="token function">getPayload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t   +port:"</span><span class="token operator">+</span>serverPort<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>以上的全部完成之后，启动Eureka注册中心，以及消费者和提供者，还有RabbitMQ消息转发中心</p></li><li><p>然后进行测试，测试地址:<a href="http://localhost:9901/sendMessage">http://localhost:9901/sendMessage</a></p></li><li><p>当我们访问的时候，提供方会进行消息的发送，然后消费方会收到信息，并在控制台显示，这时候我们的RabbitMQ显示台就会显示我们的信息发送的频率</p></li><li><p>最后如果我们的消费方有多个，那么就会发生<strong>重复消费</strong>的问题，如何解决?</p><ol><li>我们可以在配置文件中加入 grop（组）的概念</li><li>这样如果不同的组会继续重复消费，而相同的组则会竞争轮询的进行消费</li><li>但是如果我们消费方这时候断线了，并且其中一个消费者移除了grop这个概念，那么再上线的时候，移除了grop的会收不到未接受的信息，而没有移除的则会收到未接受的信息</li></ol><p><img src="D:\笔记\Typora\note\图片\image-20210317144749751.png" alt="image-20210317144749751"></p></li></ol><h2 id="14-sleuth-Zipkin"><a href="#14-sleuth-Zipkin" class="headerlink" title="14.sleuth +Zipkin"></a>14.sleuth +Zipkin</h2><p><img src="D:\笔记\Typora\note\图片\image-20210317182456061.png" alt="image-20210317182456061"></p><p><img src="D:\笔记\Typora\note\图片\image-20210317182502828.png" alt="image-20210317182502828"></p><h2 id="15-Cloud-Alibaba"><a href="#15-Cloud-Alibaba" class="headerlink" title="15.Cloud Alibaba"></a>15.Cloud Alibaba</h2><h3 id="有哪些功能："><a href="#有哪些功能：" class="headerlink" title="有哪些功能："></a>有哪些功能：</h3><ol><li>服务限流降级：默认支持Servlet、Feign、Rest Template、Dubbo和Rocket MQ限流降级功能的接入，可以在运行时通过控制台实时修改限流降级规则，还支持查看限流降级Metrics监控</li><li>服务注册与发现：适配SpringCloud服务注册与发现标准，默认集成了Ribbon的支持</li><li>分布式配置管理：支持分布式系统中的外部化配置，配置更改时自动刷新</li><li>消息驱动能力：基于SpringCloud Stream为微服务应用构建消息驱动能力</li><li>阿里云对象存储：阿里云提供的海量、安全、低成本、高可靠的云存储服务、支持在任何应用、任何时间、任何地点存储和访问任意类型的数据。</li><li>分布式任务调度：提供秒级、精准、高可靠、高可用的定时（基于Cron表达式）任务调度服务。同时提供分布式的任务执行模型。如网格任务、网格任务支持海量子任务均匀分配到所有Worker上执行。</li></ol><h3 id="1-Nacos"><a href="#1-Nacos" class="headerlink" title="1. Nacos"></a>1. Nacos</h3><h4 id="简介：-5"><a href="#简介：-5" class="headerlink" title="简介："></a>简介：</h4><p>​    一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台</p><p>​    就是注册中心+配置中心的组合（相当于前面所讲的Eureka+ribbon+bus所继承为一体的管理平台）</p><h4 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h4><h5 id="1-首先启动nacos"><a href="#1-首先启动nacos" class="headerlink" title="1. 首先启动nacos"></a>1. 首先启动nacos</h5><h5 id="2-编写服务提供项目"><a href="#2-编写服务提供项目" class="headerlink" title="2.编写服务提供项目"></a>2.编写服务提供项目</h5><ol><li><p>pom</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>yaml</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">#服务端口server:  port: 9001#服务名spring:  application:    name: nacos-payment# 注册进nacos的服务地址  cloud:    nacos:      discovery:        server-addr: localhost:8848 #配置nacos地址#暴露端口management:  endpoints:    web:      exposure:        include: "*"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>主启动类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AlibabaPaymentMain9001</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">AlibabaPaymentMain9001</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>业务逻辑</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${server.port}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> serverport<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/nacos/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPayment</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"hello nacos,serverport:"</span><span class="token operator">+</span>serverport<span class="token operator">+</span><span class="token string">"    id:"</span><span class="token operator">+</span>id<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>运行</p></li></ol><h5 id="3-编写配置中心"><a href="#3-编写配置中心" class="headerlink" title="3. 编写配置中心"></a>3. 编写配置中心</h5><ol><li><p>pom</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>yam</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">server:  port: 3377spring:  application:    name: nacos-config-client  cloud:    nacos:      discovery:        server-addr: localhost:8848      config:        server-addr: localhost:8848        file-extension: yaml#        group: test   这里是分组的名字#        namespace: 123456  这里是命名空间的名字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">spring:  profiles:    active: dev   #这里是测试开发环境#    active: test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><p>主启动类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> configAlibabaMain <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>configAlibabaMain<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p>服务类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RefreshScope</span> <span class="token comment">//动态刷新功能</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${config.info}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token class-name">Info</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/config/Info"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Info</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>启动运行</p></li></ol><h5 id="4-编写客户端"><a href="#4-编写客户端" class="headerlink" title="4. 编写客户端"></a>4. 编写客户端</h5><ol><li><p>pom文件</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>yml文件</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">server:  port: 83spring:  application:    name: nacos-order  cloud:    nacos:      discovery:        server-addr: localhost:8848server-url:  nacos-user-service: http://nacos-payment<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>主启动类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderMian83</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">OrderMian83</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Config</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@LoadBalanced</span>    <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">getRestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>服务类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${server-url.nacos-user-service}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> serviceURL<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/customer/nacos/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">AlibabaNacos</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>serviceURL<span class="token operator">+</span><span class="token string">"/nacos/"</span><span class="token operator">+</span>id<span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h5 id="5-实现集群配置以及持久化（重点）"><a href="#5-实现集群配置以及持久化（重点）" class="headerlink" title="5. 实现集群配置以及持久化（重点）"></a>5. 实现集群配置以及持久化（重点）</h5><ol><li>总体架构实现 1 nginx+3 nacos + 1 mysql</li><li>首先在虚拟机上部署我们的nginx服务器，然后配置nacos服务，最后将nacos自带的嵌入式数据库换成mysql</li><li>在本机运行，实现多个注册中心同时运行</li></ol><h3 id="2-Sentinel"><a href="#2-Sentinel" class="headerlink" title="2.Sentinel"></a>2.Sentinel</h3><p><img src="D:\笔记\Typora\note\图片\image-20210324214058584.png" alt="image-20210324214058584"></p><h5 id="Sentinel持久化"><a href="#Sentinel持久化" class="headerlink" title="Sentinel持久化"></a>Sentinel持久化</h5><ol><li>首先在客户端添加以下的配置文件</li></ol><p><img src="D:\笔记\Typora\note\图片\image-20210326203526258.png" alt="image-20210326203526258"></p><ol start="2"><li><p>然后在nacos中配置中心配置以下信息</p><p><img src="D:\笔记\Typora\note\图片\image-20210326203602222.png" alt="image-20210326203602222"></p></li></ol><p><img src="D:\笔记\Typora\note\图片\image-20210326203613771.png" alt="image-20210326203613771"></p><h3 id="3-Seata"><a href="#3-Seata" class="headerlink" title="3. Seata"></a>3. Seata</h3><h4 id="简介：-6"><a href="#简介：-6" class="headerlink" title="简介："></a>简介：</h4><ol><li><p>什么是Seata：</p><p>Seata是一款开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。Seata将为用户提供了AT、TCC、SAG和XA事务模式，为用户打造一站式的分布式解决方案。</p></li><li><p>Seata术语</p><ol><li><p>XID</p></li><li><p>TC-事务协调者：</p><p>维护全局和分支事务的状态，驱动全局事务提交或者回滚</p></li><li><p>TM-事务管理器、</p><p>定义全局事务的范围：开始全局事务、提交或回滚全局事务</p></li><li><p>RM-资源管理器</p><p>管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚</p></li></ol><p><img src="D:\笔记\Typora\note\图片\image-20210326210229190.png" alt="image-20210326210229190"></p><ol><li>TM向TC申请开启一个全局事务，全部事务创建成功并生成一个全局唯一的XID</li><li>XID在微服务调用链路的上下文中传播</li><li>RM向TC注册分支事务，将其纳入XID对应全局事务的管辖</li><li>TM向TC发起针对XID的全局提交或者回滚决议</li><li>TC调度XID下管辖的全部分支事务完成提交或回滚请求</li></ol></li></ol><h4 id="详细过程："><a href="#详细过程：" class="headerlink" title="详细过程："></a>详细过程：</h4><ol><li>TM开启分布式事务（TM向TC注册全局事务记录）</li><li>按业务场景、编排数据库、服务等事务内资源（RM向TC汇报资源准备状态）</li><li>TM结束分布式事务，事务一阶段能结束（TM通知TC提交／回滚分布式事务）</li><li>TC汇总事务信息，决定分布式事务是提交还是回滚</li><li>TC通知所有RM提交／回滚资源，事务二阶段结束</li></ol><h5 id="其中的事务阶段细节"><a href="#其中的事务阶段细节" class="headerlink" title="其中的事务阶段细节"></a>其中的事务阶段细节</h5><ol><li>在一阶段，Seata会拦截业务SQL<ol><li>解析SQL语义，找到业务SQL要更新的业务数据，在业务数据被更新前，将其保存成before　image</li><li>执行业务SQL更新业务数据，在业务数据更新之后</li><li>将其保存成after　image，最后生成行锁</li><li>以上操作全部在一个数据库事务内完成，这样保证了一阶段操作的原子性</li></ol></li></ol><p><img src="D:\笔记\Typora\note\图片\image-20210330114218900.png" alt="image-20210330114218900"></p><ol start="2"><li>二阶段回滚：<ol><li>二阶段如果是回滚的话，Seata就需要回滚一阶段已经执行的业务SQL，还原业务数据</li><li>回滚方式就是用before image还原业务数据；但是还原之前要首先校验脏写，对比数据库当前业务数据和after image</li><li>如果两份数据完全一致就说明没有脏写，可以还原业务数据，如果不一致就说明有脏写，出现脏写就需要转人工处理</li></ol></li></ol><p><img src="D:\笔记\Typora\note\图片\image-20210330114702918.png" alt="image-20210330114702918"></p><p><img src="D:\笔记\Typora\note\图片\image-20210330121819368.png" alt="image-20210330121819368"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springcloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArrayList源码分析</title>
      <link href="/2021/11/16/arraylist-yuan-ma-fen-xi/"/>
      <url>/2021/11/16/arraylist-yuan-ma-fen-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="ArrayList源码分析"><a href="#ArrayList源码分析" class="headerlink" title="ArrayList源码分析"></a>ArrayList源码分析</h1><h2 id="ArrayList类的继承和接口"><a href="#ArrayList类的继承和接口" class="headerlink" title="ArrayList类的继承和接口"></a>ArrayList类的继承和接口</h2><blockquote><p>首先看一下ArrayList这个类的继承和实现关系</p></blockquote><p><img src="D:\笔记\Typora\note\图片\image-20211007112209844.png" alt="image-20211007112209844"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span>        <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">RandomAccess</span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>从上面可以看出它继承了AbstractList，实现了RandomAccess, Cloneable, java.io.Serializable这几个接口</p><p>那么来分析一下这几个的作用吧</p><ol><li><p>AbstractList<e></e></p><p>通过看这个抽象类的源码可以知道，这个就是ArrayList的骨架，所以ArrayList会通过AbstractList来构建自己的骨架和方法</p></li><li><p>RandomAccess</p><p>这个接口提供了随机访问功能。RandmoAccess是java中用来被List实现，为List提供快速访问功能的。在ArrayList中，我们即可以通过元素的序号快速获取元素对象；这就是快速随机访问。<strong>在实践中，如果集合实现了这个接口，那么就建议采取随机访问，这样速度会更快，如果没有实现这个接口，建议采取顺序访问；因为有无这个接口然后选择访问的方式会对访问速度有很大的影响。</strong></p></li><li><p>Cloneable<br>这个接口主要是提供了ArrayList可以被拷贝的功能</p></li><li><p>java.io.Serializable</p><p>这个接口主要提供了ArrayList的序列化功能，因为实现了序列化，所以在实践中，如果有大量数据需要进行存储或者取出，那么就可以考虑使用ArrayList集合进行操作。</p></li></ol><h2 id="ArrayList是如何初始化的？"><a href="#ArrayList是如何初始化的？" class="headerlink" title="ArrayList是如何初始化的？"></a>ArrayList是如何初始化的？</h2><blockquote><p>先声明接下来会出现的参数</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//初始化容量为10</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_CAPACITY <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//定义一个空数组</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> EMPTY_ELEMENTDATA <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//定义一个默认容量为空的空数组</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//定义一个数组（这个也就是ArrayList底层使用的数组）</span><span class="token keyword">transient</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">;</span> <span class="token comment">// non-private to simplify nested class access</span><span class="token comment">//ArrayList中元素所占数组的大小</span><span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>然后从它的三个构造方法说起：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ArrayList</span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ArrayList</span> list3<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li><p>第一个无参构造</p><p>进行debug来看看怎么初始化的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//可以看到，无参构造初始化，进入的就是他自身的无参构造器</span><span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//这是将本身的数组设置为空数组</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>第二个有参构造</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//有参构造就会进入到这个构造方法中</span><span class="token comment">//initialCapacity这个就是传过来的初始化容量参数</span><span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//判断如果初始化容量的参数大于0，那么就将新创建的数组（这个数组的容量就是前面传过来的初始化容量大小）赋给本地的数组</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>initialCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//如果初始化容量大小等于零，那么就将本地数组置为空数组</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> EMPTY_ELEMENTDATA<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment">//如果上面两种条件都不满足，那么就会报出非法容量异常</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal Capacity: "</span><span class="token operator">+</span>                                           initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>第三个有参构造</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//进入到这个构造方法中，参数传递是集合</span><span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//首先将传过来的集合变成数组，然后将这个数组赋给本地数组</span>    elementData <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//有关这个方法的调用在下面代码中指出</span>    <span class="token comment">//这里将size赋值，然后判断本地数组的长度是否等于0</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>size <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 如果不等于0，再进行判断本地数组的类和对象数组的类是否相同</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>            <span class="token comment">//如果不相同，那么就会将本地数组的类型转换成对象数组类型</span>            elementData <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment">// 如果上述条件都不符合，那么就会将本地数组置为空</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> EMPTY_ELEMENTDATA<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//这是上面的toArray方法</span><span class="token keyword">public</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//而这个方法的底层实现是将数据拷贝到一个新数组，然后将这个新数组进行返回</span>    <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//original就是传过来的数据，newLength就是传过来的集合长度</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">copyOf</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> original<span class="token punctuation">,</span> <span class="token keyword">int</span> newLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">copyOf</span><span class="token punctuation">(</span>original<span class="token punctuation">,</span> newLength<span class="token punctuation">,</span> original<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">//实际上调用的就是这个方法！！！！！</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">copyOf</span><span class="token punctuation">(</span><span class="token class-name">U</span><span class="token punctuation">[</span><span class="token punctuation">]</span> original<span class="token punctuation">,</span> <span class="token keyword">int</span> newLength<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> newType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token comment">//这里进行三元运算判断，判断新类型是否和对象数组类型相同，这里不管判断是正确还是不正确，都会创建一个新数组，然后把数据放到这个新数组里面，进行返回</span>        <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> copy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span>newType <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>            <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>newLength<span class="token punctuation">]</span>            <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>newType<span class="token punctuation">.</span><span class="token function">getComponentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newLength<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//这里是进行数据拷贝，Math.min(original.length, newLength)这个是比较传过来的数据长度和传过来的长度大小。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>original<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> copy<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>                         <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>original<span class="token punctuation">.</span>length<span class="token punctuation">,</span> newLength<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> copy<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>通过上面的构造方法，可以知道ArrayList是如何初始化的</strong></p></li></ol><h2 id="ArrayList是怎么实现增删改查的？"><a href="#ArrayList是怎么实现增删改查的？" class="headerlink" title="ArrayList是怎么实现增删改查的？"></a>ArrayList是怎么实现增删改查的？</h2><blockquote><p>下面再通过它的增删改查来进一步探索</p></blockquote><h3 id="从增加开始说起，直接上代码"><a href="#从增加开始说起，直接上代码" class="headerlink" title="从增加开始说起，直接上代码"></a><strong>从增加开始说起，直接上代码</strong></h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//就从这个代码开始debug吧</span><span class="token class-name">ArrayList</span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//首先进入的是这个添加方法中，这是boolean类型的方法，但是它返回的永远是ture</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//这个方法主要是判断是否是第一次添加，然后数组是否初始化过，然后再进行后面的扩容判断。</span>    <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Increments modCount!!</span>        <span class="token comment">//在将元素添加进数组之前，需要判断这个数组的容量是否能够让这个元素添加进去</span>        <span class="token comment">//将size作为下标，存储传进来的元素</span>    elementData<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">//因为是第一次添加操作，所以传过来的minCapacity最小值是1，也就是前面的size + 1</span>     <span class="token comment">//这里进行判断，本地数组是否为空数组</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData <span class="token operator">==</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//如果是空数组，那么就将这个最小容量设置为默认容量，也就是10</span>            minCapacity <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>DEFAULT_CAPACITY<span class="token punctuation">,</span> minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token comment">//进行扩容判断</span>        <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">//计数用的</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>             <span class="token comment">//判断预扩展的值与当前数组的容量大小</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">-</span> elementData<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token comment">//如果大于，说明数组容量不够，会进行扩容操作</span>            <span class="token function">grow</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// oldCapacity将本地数组长度记录下来</span>        <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment">//&gt;&gt;是右移，也就是除以2的几次幂</span>    <span class="token comment">//&lt;&lt;是左移，也就是乘以2的几次幂</span>        <span class="token comment">//newCapacity=旧的容量+将旧的容量右移后的结果     </span>    <span class="token comment">//得到的结果就是newCapacity是原来旧容量的1.5倍</span>        <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//判断如果新的容量减去最小容量小于0</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token comment">//那么新容量就还是等于最小容量（意味着没有扩容）</span>            newCapacity <span class="token operator">=</span> minCapacity<span class="token punctuation">;</span>    <span class="token comment">//如果新的容量大于最大数组容量</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> MAX_ARRAY_SIZE <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token comment">//那么就会</span>            newCapacity <span class="token operator">=</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// minCapacity is usually close to size, so this is a win:</span>        elementData <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">//如果最小容量小于0，内存溢出异常</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// overflow</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OutOfMemoryError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//如果上述条件不满足，进行三元运算，如果最小容量大于最大数组容量，那么就会将这个更大的值返回，否则就返回最大数组容量</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">&gt;</span> MAX_ARRAY_SIZE<span class="token punctuation">)</span> <span class="token operator">?</span>            <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE <span class="token operator">:</span>            MAX_ARRAY_SIZE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>将思路捋清</strong>：这个代码主要是在添加元素之前将确保一下数组容量的大小，以便后面可以正常的元素插入。在这个确保容量的时候，首先如果是第一次添加进来的，那么因为我们初始化集合是用的无参构造方法，所以先将这个数组的大小设置为默认大小。设置完之后，再判断添加的元素之后的长度是否大于当前数组的容量，如果大于那么就会进入到扩容中，然后将旧的容量扩充为原来的1.5倍（<strong>这里主要是针对第一次进来时的情况：</strong>如果扩充的容量比最小容量还小，那么就标志这扩容失败，容量还是采用最小容量，如果容量大于最大数组容量那么就会再进行相关的判断….）</p><p><strong>思考思考思考！！！！！</strong></p><p>到了这里，其实我还是有很多的疑问，虽然源码看明白了，但是为什么是这么个流程呢？</p><p>带着问题，将源码更通透的理解一下：</p><p>为什么是否扩容的判断条件如此难懂？<br>minCapacity - elementData.length &gt; 0   ？？？？</p><p>为什么最小容量大于元素存储的容量还要进行扩容，这里最小容量大于存储容量，那就证明有空间存储啊，为啥还要进行扩容，反而最小容量如果小于那就什么操作也不做？？？？<br><strong>下面纯属个人理解</strong>：</p><p>首先这里有一个<strong>错误的理解</strong>：<strong>受第一次添加数据的影响</strong>，我把minCapacity当成了一个定值，我一直把这个值当做是10来处理，其实这个最小容量是根据每次添加数据动态更新的值；elementData.length我把它理解成当前数组中存储元素的长度，其实是初始化数组长度的值!!!因此，我无法理解这个扩容的判断条件。</p><p><strong>正确思路</strong>：将上述的错误思想改正之后，豁然开朗，解决思路就是我来了一个一万次循环将元素添加进集合当中，那么这个时候，你会发现这个minCapacity是个什么东西呢，它其实就是在我们添加元素之前，将数组容量预扩展一个存放元素的空间，然后用这个预扩展的值减去当前数组的长度，如果这个长度大于数组长度，那么就说明数组长度不够，这时候就会调用grow方法，将数组扩容为原来的1.5倍。</p><p>如果上面的描述还是不懂，那么现在假设现在循环到了第十一次，到调用这个添加方法的时候，首先判断容量是否够，传过去的参数就是minCapacity=11，而这个时候elementData.length就是当时初始化的长度，也就是10，所以说现在是不是就必须得将数组扩容呢？那么就进入到grow方法当中，一顿操作下来，那容量不就变成了15嘛，然后不就可以继续存元素了吗？？？</p><p>经过上面的一顿分析之后，下面再看看另外的几个添加方法：</p><p><strong>public void add(int index, E element)  在指定位置添加元素</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ccc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//添加到指定位置</span>list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//进入到这个方法当中</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//校验传过来的下标是否合格</span>    <span class="token function">rangeCheckForAdd</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//校验数组容量是否设置过，然后判断是否需要扩容</span>    <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Increments modCount!!</span>    <span class="token comment">//arraycopy(Object src,  int  srcPos,Object dest, int destPos,int length);</span>    <span class="token comment">//src表示源数组，srcPos表示源数组要复制的起始位置，desc表示目标数组,destPos在目标数组中开始赋值的位置,length表示要复制的长度。</span>        <span class="token comment">//主要就是这段copy代码，这段代码是怎么实现的呢？？？</span>    <span class="token comment">//首先数据源是elementData{aaa,bbb,ccc}，也就是原数组，要复制的起始位置就是index=1(bbb)，目标数组还是elementData{aaa,bbb,ccc}，开始赋值的位置就是2(ccc)开始，要复制的长度为3-1=2；那么根据上述条件，我们知道复制完之后数组的数据变成了elementData{aaa,bbb,bbb,ccc}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>                     size <span class="token operator">-</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//然后将索引的位置变成要添加的元素值（在指定的地方添加元素）</span>    elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>    size<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">rangeCheckForAdd</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//是否大于数组长度，是否小于0，如果是就会抛出索引越界异常</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;</span> size <span class="token operator">||</span> index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token function">outOfBoundsMsg</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>public boolean addAll(Collection&lt;? extends E&gt; c)  添加集合元素</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ccc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ArrayList</span> list3<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">;</span>list3<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//进入到这个方法中来</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//首先将集合变成一个对象数组</span>    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//记录数组的长度</span>    <span class="token keyword">int</span> numNew <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment">//校验数组的容量，判断是否扩容</span>    <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> numNew<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Increments modCount</span>    <span class="token comment">//又来到的熟悉的地方，同样的，我们根据上一个方法来进行分析</span>    <span class="token comment">//数据源：a{aaa,bbb,ccc}  复制起始位置0  目标数组elementData{}  目标数组的位置0  复制的长度3</span>    <span class="token comment">//那么最终得到的结果就是复制过来的数组elementData{aaa,bbb,ccc}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> size<span class="token punctuation">,</span> numNew<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//数组的长度变成原本的长度加上新添加数据的长度</span>    size <span class="token operator">+=</span> numNew<span class="token punctuation">;</span>    <span class="token keyword">return</span> numNew <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>public boolean addAll(int index, Collection&lt;? extends E&gt; c)   将集合添加到指定位置上</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ccc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ArrayList</span> list3<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ddd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"eee"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list3<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>list1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//进入到这个方法中</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//判断下标是否越界</span>    <span class="token function">rangeCheckForAdd</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将集合先变成对象数组</span>    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将数组的长度取出</span>    <span class="token keyword">int</span> numNew <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment">//校验是否有初始容量，以及是否需要扩容</span>    <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> numNew<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Increments modCount</span>    <span class="token comment">//记录要移动的步数</span>    <span class="token keyword">int</span> numMoved <span class="token operator">=</span> size <span class="token operator">-</span> index<span class="token punctuation">;</span>    <span class="token comment">//如果大于0</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>numMoved <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment">//首先是进行第一次拷贝，这次拷贝主要是将目标数组扩充为可以容纳新数组的数组</span>        <span class="token comment">//数据源elementData{ddd,eee}  复制的起始位置1  目标数组elementData  在目标数组赋值的位置1+3  复制的长度1    复制完成之后的数组变成elementData{ddd,eee,null,null,eee}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index <span class="token operator">+</span> numNew<span class="token punctuation">,</span>                         numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第二次拷贝才是将真正的数据添加进数组中</span>    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> numNew<span class="token punctuation">)</span><span class="token punctuation">;</span>    size <span class="token operator">+=</span> numNew<span class="token punctuation">;</span>    <span class="token keyword">return</span> numNew <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改方法set"><a href="#修改方法set" class="headerlink" title="修改方法set"></a>修改方法set</h3><p><strong>上代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ccc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"ddd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//判断索引下标是否越界</span>    <span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将旧的值取出</span>    <span class="token class-name">E</span> oldValue <span class="token operator">=</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将新的值修改</span>    elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>    <span class="token comment">//返回旧的值</span>    <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取方法get"><a href="#获取方法get" class="headerlink" title="获取方法get"></a>获取方法get</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ccc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//判断索引下标是否越界</span>    <span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回当前索引的值</span>    <span class="token keyword">return</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="toString方法源码解析"><a href="#toString方法源码解析" class="headerlink" title="toString方法源码解析"></a>toString方法源码解析</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ccc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//首先得明确一点，这个方法不是ArrayList的而是AbstractList中的方法</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//主要使用的迭代器</span>    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//判断如果为空，就直接返回空串</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"[]"</span><span class="token punctuation">;</span>    <span class="token comment">//如果不为空，那么用StringBuilder进行字符串拼接</span>    <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//先将结构搭建好</span>    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'['</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//然后用循环将里面的数据一一拼接到字符串上</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">E</span> e <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//这里通过三元运算，判断y</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>e <span class="token operator">==</span> <span class="token keyword">this</span> <span class="token operator">?</span> <span class="token string">"(this Collection)"</span> <span class="token operator">:</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment">//如果没有数据了，就进行结尾</span>            <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">']'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="迭代器的源码"><a href="#迭代器的源码" class="headerlink" title="迭代器的源码"></a>迭代器的源码</h2><blockquote><p>这里我会通过三个不同的案例，来分析一下迭代器具体的源码，然后引申出相关的问题</p></blockquote><h3 id="第一个例子：通过迭代器遍历，使用集合自带的方法删除目标元素"><a href="#第一个例子：通过迭代器遍历，使用集合自带的方法删除目标元素" class="headerlink" title="第一个例子：通过迭代器遍历，使用集合自带的方法删除目标元素"></a>第一个例子：通过迭代器遍历，使用<strong>集合</strong>自带的方法删除目标元素</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ccc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Iterator</span> it <span class="token operator">=</span> list1<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        list1<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将这个代码运行之后，你会发现代码报错</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Exception</span> in thread <span class="token string">"main"</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>ConcurrentModificationException</span>at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>ArrayList</span>$<span class="token class-name">Itr</span><span class="token punctuation">.</span><span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">901</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>ArrayList</span>$<span class="token class-name">Itr</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">851</span><span class="token punctuation">)</span>at jihe<span class="token punctuation">.</span>test<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">17</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>为什么会报错呢？？？带着问题，查看源码！！！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//先进入这个迭代器的方法中，而后会发现，一个内部类继承iterator重写了迭代器方法</span><span class="token keyword">public</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Itr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//主要来看一下这个类的具体实现</span><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Itr</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> cursor<span class="token punctuation">;</span>       <span class="token comment">// 这里是光标位置</span>    <span class="token keyword">int</span> lastRet <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 返回最后一个元素的索引</span>    <span class="token comment">//将实际修改次数赋值给预期修改次数（报错的关键语句）</span>    <span class="token keyword">int</span> expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>    <span class="token comment">//判断光标位置是否到达末尾</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cursor <span class="token operator">!=</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//检查实际修改次数和预期修改次数是否一样，如果不一样那么就会报出刚刚的错误ConcurrentModificationException（报错的关键方法）</span>        <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将光标的值赋值给i</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> cursor<span class="token punctuation">;</span>        <span class="token comment">//size：就是数组的长度</span>        <span class="token comment">//然后用i和size进行比较，如果光标的值大于size的值，那么就会抛出异常NoSuchElementException</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> size<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将集合数组赋值给elementData</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elementData <span class="token operator">=</span> <span class="token class-name">ArrayList</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>elementData<span class="token punctuation">;</span>        <span class="token comment">//如果光标的值大于数组的长度抛出异常ConcurrentModificationException</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//光标自增</span>        cursor <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">//将i的值赋值给lastRet，并且将当前遍历到的数据进行返回</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> elementData<span class="token punctuation">[</span>lastRet <span class="token operator">=</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//判断实际修改次数和语气修改次数是否相等</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span>            <span class="token comment">//不想等就直接报出ConcurrentModificationException异常</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>            <span class="token comment">//上面的遍历大致就是那么个思路，然后根据程序的执行，我们会进行比较判断，如果当前遍历的值与要删除的值相同，那么就调用ArrayList自带的移除方法</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//首先判断传过来的这个值是否为空</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//如果为空，那么就会依次遍历，将数组中的空值移除</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">fastRemove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment">//如果不为空，那么就会进行遍历</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token comment">//找到与传过来的值相匹配的元素地址，然后进行移除操作</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//移除</span>                <span class="token function">fastRemove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token comment">//在这个移除操作中</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">fastRemove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//首先会把实际修改次数加1</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment">//然后计算移除的位置</span>        <span class="token keyword">int</span> numMoved <span class="token operator">=</span> size <span class="token operator">-</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numMoved <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token comment">//将移除元素后面的元素进行拷贝</span>            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span>                             numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将元素置为空</span>        elementData<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// clear to let GC do its work</span>    <span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么通过上面的案例，可能还是没有明白为什么会报错呢，程序都执行到了结尾了，数据也移除了，那么为什么还会报错呢？？</p><p>请继续往下看，程序确实已经完成了移除操作，但是，程序还没有执行完，继续往下走，会<strong>再次进入迭代器的遍历当中</strong>，当遍历了一个元素之后，<strong>再次调用next方法</strong>，就可以看到<strong>next</strong>方法中首先出现的<strong>checkForComodification();<strong>，那么核心就在这个方法当中了，还记得之前在添加数据的时候，modCount会记录修改的次数，之前添加了三个元素，也就是modCount=3，然后将modCount的值赋给了expectedModCount，那么expectedModCount的值是不是也等于3，但是在刚刚移除元素的过程中，是不是有</strong>modCount++<strong>出现，那么这时候modCount是不是等于4，这样是不是一切都明了了，此时</strong>modCount != expectedModCount</strong>成立，就会报出刚刚的错误了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="第二个例子：和第一次是一样的代码，注意不同的是这次移除的是倒数第二个元素"><a href="#第二个例子：和第一次是一样的代码，注意不同的是这次移除的是倒数第二个元素" class="headerlink" title="第二个例子：和第一次是一样的代码，注意不同的是这次移除的是倒数第二个元素"></a>第二个例子：和第一次是一样的代码，注意不同的是这次移除的是倒数第二个元素</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ccc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Iterator</span> it <span class="token operator">=</span> list1<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        list1<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前面的操作流程都是一样的，但是这次运行结果竟然不报错！！！！？？</p><p>为什么不报错呢？？？</p><p><strong>这属于是特殊情况</strong>，为什么这么说呢，根据刚刚的代码，再来分析一下思路，如果删除的是倒数第二个元素，那么在下一次迭代器遍历中，首先看到的判断条件是不是<code>public boolean hasNext(){return cursor != size;}</code>，实际上就是这里出了问题，现在想一下，集合中一共有三个元素，在进行了移除操作，就剩下两个元素，而且在移除操作最后一步<strong>elementData[–size] = null</strong>，首先是将size进行–操作，这样就说明此时的size大小为2，而光标在上一次的遍历中是不是<strong>cursor = i + 1</strong>有这个操作，这时候cursor是不是也变成了2，那么<strong>hasNext</strong>这个判断条件就变成了false，既然变成了false，就会直接跳出遍历，程序并没有报错！！</p><h3 id="第三个例子：和第一次一样的代码，不同的是这一次使用的是迭代器自带的移除方法"><a href="#第三个例子：和第一次一样的代码，不同的是这一次使用的是迭代器自带的移除方法" class="headerlink" title="第三个例子：和第一次一样的代码，不同的是这一次使用的是迭代器自带的移除方法"></a>第三个例子：和第一次一样的代码，不同的是这一次使用的是<strong>迭代器</strong>自带的移除方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ccc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Iterator</span> it <span class="token operator">=</span> list1<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"ccc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//注意，这里是迭代器自带的方法进行元素的删除</span>        it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前面遍历操作的流程大致都是一样的，主要看一下这个<strong>迭代器自带的删除方法</strong>有什么异同</p><p>下面进行源码分析</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//来看一下lastRet是什么？</span>    <span class="token comment">//之前在前面的代码中，是不是在遍历的next方法中出现，这个lastRet指向的就是，当前遍历的元素，也可以说是遍历到的最后一个元素（不是遍历完，而是遍历到当前的元素，当前元素的下表作为lastRet的值）。这个lastRet的值就是需要remove的那个元素的下标</span>    <span class="token comment">//首先判断这个下标是否小于0，如果是就会抛出IllegalStateException</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastRet <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//检查预期修改次数和实际修改次数是否相同</span>    <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment">//调用集合本地的remove方法，将lastRet这个下标指向的值删除</span>        <span class="token class-name">ArrayList</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>lastRet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将当前遍历的最后一个值得下标赋值给光标</span>        cursor <span class="token operator">=</span> lastRet<span class="token punctuation">;</span>        <span class="token comment">//将lastRet置为-1</span>        lastRet <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">//将实际修改的次数赋值给预期修改次数</span>        expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IndexOutOfBoundsException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//校验下表是否越界</span>    <span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//实际修改次数加1</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment">//记录旧值</span>    <span class="token class-name">E</span> oldValue <span class="token operator">=</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//要移动的步数</span>    <span class="token keyword">int</span> numMoved <span class="token operator">=</span> size <span class="token operator">-</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>numMoved <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment">//进行数组拷贝</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span>                         numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将指定的值移除</span>    elementData<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// clear to let GC do its work</span>    <span class="token comment">//将旧值返回</span>    <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">rangeCheck</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> size<span class="token punctuation">)</span>        <span class="token comment">//如果索引下标大于集合大小，就会报错</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token function">outOfBoundsMsg</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：可以看到，通过迭代器的方法进行删除的时候，大致思路是一样的，而且底层的删除还是用的ArrayList自带的集合进行删除的，不过不同的是，迭代器的删除方法中**expectedModCount = modCount;**多出了这样的一个步骤，所以迭代器删除是不会报错的。</p><h2 id="clear、contains、isEmpty源码"><a href="#clear、contains、isEmpty源码" class="headerlink" title="clear、contains、isEmpty源码"></a>clear、contains、isEmpty源码</h2><ol><li><p>clear方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//简单明了</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//实际修改次数自增</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment">// 通过遍历，将所有的值置为空，以便垃圾回收机制将它们进行回收</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">//将数组的大小也置为0</span>    size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>IsEmpty方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//判断数组大小是否为0</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>contains方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ccc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//首先进入这个方法中，返回indexOf(o) &gt;= 0比值是否大于0，如果大于就是包含相应的值，如果小于0就是不包含</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//核心方法</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//判断传过来的对象是否为空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//遍历数组，返回为空的对象下标</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">//遍历数组，返回与传过来对象匹配的下标</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token comment">//如果都没有找到，就返回-1</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>最终可以通过判断**list1.contains(“abc”);**的返回值是ture还是false来判断是否包含所传入的值。</p><h2 id="考虑以下几个问题"><a href="#考虑以下几个问题" class="headerlink" title="考虑以下几个问题"></a>考虑以下几个问题</h2><ol><li><p>ArrayList是如何扩容的?</p></li><li><p>ArrayList频繁扩容导致添加性能几句下降，如何处理？<br>只想到了使用初始容量的构造方法，不过浪费空间</p></li><li><p>ArrayList插入或者删除元素一定比LinkedList慢吗？<br>不一定，这个就要看是否针对某个位置进行相应的插入和删除操作，如果不针对位置进行插入和删除，那么肯定是LinkedList比较快的，如果针对位置，那么它们俩的性能是差不多的。</p></li><li><p>ArrayList是线程安全的吗？</p><p>不是线程安全的，那么又如果解决这个不安全，或者手写一个不安全的案例看看？</p><p><strong>如何解决线程不安全？</strong></p><p>使用Vector、使用synchronize、以及Collections.synchronizedList()、lock（）</p></li><li><p>如何将某个ArrayList复制到另一个ArrayList中<br>构造方法、clone、添加</p></li><li><p>多线程下保证正常读写？<br>copyOnWriteArrayList</p></li><li><p>ArrayList和LinkedList的区别？</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ArrayList </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring源码分析</title>
      <link href="/2021/11/16/spring-yuan-ma-fen-xi/"/>
      <url>/2021/11/16/spring-yuan-ma-fen-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="加载Bean"><a href="#加载Bean" class="headerlink" title="加载Bean"></a>加载Bean</h1><ol><li><p>封装资源文件 对Resource使用EncodedResource进行封装</p></li><li><p>获取输入流，在Resource中获取对应的输入流</p></li><li><p>进入核心部分：数据准备阶段</p><ol><li><p>获取对XML文件的验证模式</p><ul><li><p>DTD：文本类型定义–&gt;验证XML文档格式是否正确</p></li><li><p>XSD：XML schemas Defination –&gt;验证XML文档格式是否正确</p></li></ul><p>有了上面的两种xml文档的校验模式，spring会在进行校验模式的时候判断如果手动指定了验证模式（自定义的），那么就使用自定义的模式进行校验，如果没有指定则按照默认的验证校验模式。如果使用默认的校验模式，那么就会根据xml文件判断使用的是DTD还是XSD验证模式</p></li><li><p>加载XML文件，并得到对应的Document对象</p><p>EntityResolver：因为每次验证都会根据xml文件里面的声明去网上找相应的校验文件，这样会很费时间，因此使用这个方法将需要校验的文件直接保存在本地，在需要使用的时候直接从本地进行加载校验，而不需要从网上下载。</p><p>DTDResolver和SchemasResolver负责xml文件的解析</p></li><li><p>根据返回的Document注册Bean信息</p><p>doRegisterBeanDefinations这个方法就是解析的核心部分，这里在做解析的时候，前后使用了<strong>模板方法</strong>设计模式针对对Bean解析前后的相应处理</p><ul><li>profile属性：这个属性主要是指定了开发、部署环境，用这个属性可以指定想要的开发环境</li><li>解析注册BeanDefination，首先通过node.getnamespaceURI获取命名空间，然后通过对比spring中固定的命名空间，如果相同则使用<strong>默认的方法进行解析</strong>，如果不同则使用用户自定义的方法进行解析</li></ul></li></ol></li></ol><h1 id="默认标签的解析"><a href="#默认标签的解析" class="headerlink" title="默认标签的解析"></a>默认标签的解析</h1><p>这里会分四种情况，分别对import、alias、bean和beans做出不同的处理</p><h2 id="Bean标签的解析及注册"><a href="#Bean标签的解析及注册" class="headerlink" title="Bean标签的解析及注册"></a>Bean标签的解析及注册</h2><ol><li><p>首先委派BeanDefinationDelegate类的parseBeanDefinationElement方法进行元素解析，返回BeanDefinationHolder类型的实例，经过这个方法，bdHolder已经包含配置文件中配置的各种属性，例如：class、name、id、alias之类的属性</p><p><strong>进入到parseBeanDefinationElement方法</strong></p><ol><li>提取元素中的id和name属性</li><li>进一步解析其他所有属性，并统一封装成GenericBeanDefination类型实例中<ol><li>创建用于属性承载的BeanDefination：BeanDefination是一个接口，spring中有三种实现（RootBeanDefination、ChildBeanDefination、GenericBeanDefination）</li><li>解析各种属性（parseBeanDefinationAttributes），存到BeanDefination中</li><li>解析子元素（construct-args、property…）</li></ol></li><li>如果检测到bean没有指定的beanName，那么使用默认规则为此Bean生成BeanName（通过beanClassName生成名字）</li><li>将获取到的信息封装到BeanDefinationHolder中</li></ol></li><li><p>当返回的bdHolder不为空的时候，如存在默认标签的子节点下还有自定义的属性，还需要再次对自定义标签进行解析</p><p>寻找自定义标签并根据自定义标签寻找命名空间处理器，进行解析</p></li><li><p>解析完成之后，需要对解析后的bdHolder进行注册，注册操作委派给BeanDefinationReaderUtils的registerBeanDefination方法</p><ol><li>通过BeanName注册<ol><li>对AbstractBeanDefination校验methodOverrides属性</li><li>对BeanName已经注册过的情况，如果不允许Bean覆盖，那么就会抛出异常，否则覆盖</li><li>加入map缓存</li><li>清除解析之前留下的beanName缓存</li></ol></li><li>通过别名注册<ol><li>alias与beanName相同不需要处理，删除原有的alias</li><li>若aliasName已经使用，那么进行覆盖操作</li><li>循环检查</li><li>注册alias</li></ol></li></ol></li><li><p>最后发出响应事件，通知相关监视器，bean加载完成</p></li></ol><h2 id="alias标签解析"><a href="#alias标签解析" class="headerlink" title="alias标签解析"></a>alias标签解析</h2><p>别名注册，就是将当前的Bean起多个别名，以适用于各种不同的场景</p><p>解析过程与Bean类似。。</p><h2 id="impor标签解析"><a href="#impor标签解析" class="headerlink" title="impor标签解析"></a>impor标签解析</h2><ol><li>获取resource属性所表示的路径</li><li>解析路径中的系统属性</li><li>判断location是绝对路径还是相对路径</li><li>如果是绝对路径则递归调用bean的解析过程，执行另一次的解析</li><li>如果是相对路径，则计算出绝对路径进行解析</li><li>通知监视器完成</li></ol><h2 id="嵌入式Beans标签的解析"><a href="#嵌入式Beans标签的解析" class="headerlink" title="嵌入式Beans标签的解析"></a>嵌入式Beans标签的解析</h2><p>。。。</p><h1 id="自定义标签的解析"><a href="#自定义标签的解析" class="headerlink" title="自定义标签的解析"></a>自定义标签的解析</h1><h2 id="获取标签的命名空间"><a href="#获取标签的命名空间" class="headerlink" title="获取标签的命名空间"></a>获取标签的命名空间</h2><p>getNamespaceURI</p><h2 id="提取自定义标签处理器"><a href="#提取自定义标签处理器" class="headerlink" title="提取自定义标签处理器"></a>提取自定义标签处理器</h2><p>通过Namespacehandler进行提取，这里就提到了之前自定义的处理器，如果命名空间与命名空间处理器有映射关系，那么就会从缓存中获取映射关系，如果不存在于缓存中，那么就使用自定义的处理器进行初始化后，存到缓存中</p><ol><li>获取已经配置的handler映射</li><li>根据命名空间找到对应的信息</li><li>已经做过解析的情况直接从缓存中读取</li><li>没有做过解析，则返回类路径，使用反射将类路径转化为类</li><li>初始化类，调用自定义的NamespaceHandler的初始化方法</li><li>记录在缓存中</li></ol><h2 id="标签解析"><a href="#标签解析" class="headerlink" title="标签解析"></a>标签解析</h2><p>得到解析器后，就会将工作委派给解析器去进行解析</p><h1 id="Bean的加载"><a href="#Bean的加载" class="headerlink" title="Bean的加载"></a>Bean的加载</h1><ol><li><p>转换对应的BeanName</p><ul><li>去除FactoryBean的修饰符</li><li>取指定的alias所表示的最终BeanName</li></ul></li><li><p>尝试从缓存中加载单例<br>单例在spring的同一个容器中只会被创建一次，后续再获取bean直接从单例缓存中获取。这里只是尝试获取，首先尝试从缓存中加载，如果加载不成功再尝试去singeletonFactory中加载。因为在创建单例bean的时候，会存在依赖注入问题，因此为了<strong>避免依赖注入</strong>，在spring中创建bean的原则是不等bean创建完成就会将创建bean的ObjectFactory提早曝光加入到缓存中，一旦下一个bean创建时候需要依赖上一个bean，直接使用Objectfactory</p></li><li><p>bean的实例化<br>如果缓存中得到了bean的原始状态，那么就需要对bean进行实例化，从而得到需要的bean</p></li><li><p>原型模型的依赖检查<br>只有在单例模式下才会进行循环依赖检查</p></li><li><p>检查parentBeanFactory<br>如果缓存没有数据的话，就转到父类工厂去加载</p></li><li><p>将存储XML文件的GenericBeanDefination转换为RootBeanDefination<br>后续操作都是针对RootBeanDefination，因此需要转换，如果BeanName是子bean的话，那么就会同时合并父类相关的属性</p></li><li><p>寻找依赖</p><p>如果某些属性用到了其他属性，其他属性依赖其他的Bean，那么此时就需要递归查找加载依赖的bean</p></li><li><p>针对不同的scope进行bean的创建<br>针对不同的scope进行不同类型的初始化</p></li><li><p>类型转换</p></li></ol><h2 id="循环依赖"><a href="#循环依赖" class="headerlink" title="循环依赖"></a>循环依赖</h2><ol><li><p>什么是循环依赖？</p><p>就是两个或两个以上的bean，在方法中互相调用对方，然后他们之间的调用关系形成了一个环，这样的情况叫做循环依赖。</p></li><li><p>spring如何解决循环依赖的？</p><p>spring中循环以来包含<strong>构造器循环依赖</strong>和<strong>setter方法循环依赖</strong></p><ul><li><p>构造器循环依赖</p><p>通过构造器产生的循环依赖是无法解决的，只能抛出异常</p><p>因为在创建的过程中，比如有A、B、C三个bean对象，这三个对象互相调用对方，在创建A的时候，会在创建池中有标识A创建，但是创建过程中发现里面还有B创建，这时候就会先去创建B这个对象，然后在创建池中标识B的创建，但是B中又包含C的调用，这时候就需要创建C，然后在创建池中标识C的创建，但是这个时候C里面调用了A，这时候又会去创建A，但是在创建池中已经有A创建的标识，因此会直接抛出错误。（如果对象创建完成，则会将创建池中的标识清除掉）</p></li><li><p>setter循环依赖（只能解决单例模式下的循环依赖）</p><p>首先在创建A的时候，会先根据无参构造器，先创建一个bean，并且暴露一个ObjectFactory，用于返回一个提前曝光的一个创建中的bean，这样即使有循环依赖，但是因为创建的无参构造bean，即使在创建池中遇到这个依赖的bean，可以通过无参构造的bean进行返回，从而完成创建，并且不造成循环依赖</p></li></ul></li></ol><h2 id="创建Bean"><a href="#创建Bean" class="headerlink" title="创建Bean"></a>创建Bean</h2><h3 id="创建bean的实例"><a href="#创建bean的实例" class="headerlink" title="创建bean的实例"></a>创建bean的实例</h3><ol><li>如果工厂方法不为空，那么使用工厂方法初始化策略</li><li>因为构造方法有很多参数，不同的参数需要不同的构造函数或对应的工厂方法<ol><li>第2步如果进行了解析，那么就直接使用解析好的构造方法，不需要再次锁定<ol><li>构造函数注入</li><li>默认构造函数构造</li></ol></li><li>如果没有解析则需要根据参数解析构造器<ol><li>构造函数注入</li><li>默认构造函数构造</li></ol></li><li>构造函数注入<ol><li>构造函数参数的确定<ul><li>根据explicArgs参数判断</li><li>缓存中获取</li><li>配置文件获取</li></ul></li><li>构造函数确定</li><li>根据确定的构造函数转换对应的参数类型</li><li>构造函数不确定性的验证</li><li>根据实例化策略以及得到的构造函数和构造函数的参数来实例化bean</li></ol></li><li>不带参数的构造方法</li></ol></li><li>实例化策略</li></ol><h1 id="使用过的设计模式"><a href="#使用过的设计模式" class="headerlink" title="使用过的设计模式"></a>使用过的设计模式</h1><ol><li>模板设计模式：在解析Bean的时候用过这个方法，主要是如果对解析Bean前后有相应的操作就会继承那两个方法进行操作。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/2021/11/16/dan-li-mo-shi/"/>
      <url>/2021/11/16/dan-li-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>特点：</p><ol><li>在JVM中，单例模式能保证对象实例只有一个</li><li>构造器必须是私有的，外部无法通过构造器创建对象实例</li><li>没有公开的set方法，外部不能通过set方法进行对象的创建</li><li>对外公开提供一个get方法，通过get方法可以获取对象实例</li></ol><p>优点：</p><ol><li>某些类创建非常繁琐，使用单例模式避免对象的频繁创建，而造成性能损耗</li><li>省去了new操作符，减轻系统内存使用频率，减轻GC的压力</li><li>避免对资源的重复占用</li></ol><h2 id="饿汉式单例模式"><a href="#饿汉式单例模式" class="headerlink" title="饿汉式单例模式"></a>饿汉式单例模式</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么说是饿汉式呢？</p><p>​    因为它在类加载的时候就直接把实例创建了出来，后面的方法直接进行返回即可</p><p>应用场景：</p><p>​    适用于热点数据，在启动JVM的时候，就将热点数据创建好，这样也可以避免预热阶段，直接就可以使用了。</p><p>为什么是线程安全的？</p><p>​    因为类加载的方式是按需加载，且只加载一次，因此在访问单例对象的时候，其实单例对象的实例已经创建好了。因此饿汉式天生就是线程安全的。</p><h2 id="懒汉式单例模式"><a href="#懒汉式单例模式" class="headerlink" title="懒汉式单例模式"></a>懒汉式单例模式</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>懒汉式单例模式是<strong>非线程安全的</strong></p><p>为什么叫懒汉式呢？</p><p>​    因为类加载的时候，并不会直接将这个实例创建出来，而是在需要使用的时候进行创建</p><p>使用场景</p><p>​    适用于那些不热门的数据，因为只有在需要使用的时候进行调用并创建，这样就不会造成不必要的空间浪费</p><p>为什么是非线程安全的呢？</p><p>​    这里假设有两个线程，第一个线程和第二个线程现在都进行了if的判断，进入到了对象的创建，那么这两个线程就会创建两个对象。</p><p>那么针对这个懒汉式的非线程安全使用下面加锁的方式进行解决</p><h2 id="懒汉式加锁"><a href="#懒汉式加锁" class="headerlink" title="懒汉式加锁"></a>懒汉式加锁</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样直接在获取对象实例的方法上加锁，虽然保证了线程的安全，但是这样加锁性能太低了，那么如何解决呢？？？</p><h2 id="懒汉式加锁进阶"><a href="#懒汉式加锁进阶" class="headerlink" title="懒汉式加锁进阶"></a>懒汉式加锁进阶</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance <span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样把锁加在方法内，而且进行了一次判断，这样性能比上一个性能有提高，但是JVM对代码的运行会有运行优化，也就是在运行期间会进行指令重排操作，意思就是比如现在一个线程已经创建好了实例，而且JVM内存中也开辟了空间给这个实例，但是还没有初始化完成，而这个时候另一个线程判断instance不为空，那么直接返回进行调用，发现还没有实例化而出现错误，那么又如何解决这个问题呢？？？</p><h2 id="懒汉式加锁进阶加强-volatile"><a href="#懒汉式加锁进阶加强-volatile" class="headerlink" title="懒汉式加锁进阶加强(volatile)"></a>懒汉式加锁进阶加强(volatile)</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">Singleton</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>instance<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>volatile主要是防止代码运行时的指令重排，可以保证，在创建实例完成，并且初始化之后，另外的线程才能对实例进行使用，那么这个已经很完美了，但是还有比这个更好的方式进行实现吗？？</p><h2 id="基于静态内部类实现的单例模式"><a href="#基于静态内部类实现的单例模式" class="headerlink" title="基于静态内部类实现的单例模式"></a>基于静态内部类实现的单例模式</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonFactory</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">SingletonFactory</span><span class="token punctuation">.</span>instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基于枚举的单例模式"><a href="#基于枚举的单例模式" class="headerlink" title="基于枚举的单例模式"></a>基于枚举的单例模式</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token keyword">enum</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span><span class="token class-name">Instance</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="为什么使用单例模式而不使用静态类呢"><a href="#为什么使用单例模式而不使用静态类呢" class="headerlink" title="为什么使用单例模式而不使用静态类呢?"></a>为什么使用单例模式而不使用静态类呢?</h2><ol><li>单例模式有懒汉模式，可以按需进行资源加载，而静态类会直接加载进内存中</li><li>静态类每次创建使用之后，都会被GC掉，而单例对象不会被GC</li></ol>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目复习</title>
      <link href="/2021/11/16/xiang-mu-fu-xi/"/>
      <url>/2021/11/16/xiang-mu-fu-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="项目总体流程"><a href="#项目总体流程" class="headerlink" title="项目总体流程"></a>项目总体流程</h1><h2 id="通过Nginx搭建域名"><a href="#通过Nginx搭建域名" class="headerlink" title="通过Nginx搭建域名"></a>通过Nginx搭建域名</h2><ol><li><p>首先使用Nginx搭建了一个域名访问环境。</p><ul><li><p>为什么需要要使用nginx搭建这个域名访问呢？</p><p>首先从正向代理和反向代理来看：</p><ul><li>正向代理：就是客户端在访问某些网址的时候，通过代理服务器进行访问，这样就隐藏了自己的信息进行访问，保证客户端信息的安全</li><li>反向代理：就是搭建项目环境的时候，通过一个代理服务器，屏蔽内网的服务器信息，对外保暴露的是代理服务器的信息，这样别人通过访问代理服务器，然后代理服务器转发请求到内网服务器上进行访问</li><li><img src="D:\笔记\Typora\note\图片\image-20211026111446446.png" alt="image-20211026111446446"></li><li><img src="D:\笔记\Typora\note\图片\image-20211026153825451.png" alt="image-20211026153825451"></li></ul></li><li><p>为什么使用Nginx搭配网关进行搭建？<br>因为如果直接使用Nginx路由到端口上，那么如果在集群模式下，一个服务对应多个端口，就需要配置多个端口信息，这样很麻烦，所以通过网关进行路由，这样即使在集群环境下搭建的微服务，我们只需要路由到网管，然后让网关进行服务的调用即可</p></li></ul><p><img src="D:\笔记\Typora\note\图片\image-20211026110547414.png" alt="image-20211026110547414"></p><p>如何搭建的？</p><ul><li>首先安装Nginx，然后修改Nginx的配置文件，因为要映射到本机器上的网关上，所以首先配置一个上游服务器地址请求转发到网关上，配置了这个地址之后，再配置Nginx的代理地址，这个代理地址指向的是上游服务器的地址，那么通过这个代理地址，我们每次访问Nginx，都会访问它的80默认端口，然后Nginx会通过代理地址转发到上游服务器地址，再通过上游服务器地址访问网关。</li></ul><p>遇到的问题：一开始在阿里云上部署的Nginx，然后通过本地的域名访问阿里云上的Nginx，发现Nginx一直无法访问本地服务器，一直报服务器错误，然后网上查了一下说，本地服务器需要备案才能访问内网，然后我去阿里云上看了一下需要备案，还要搞好多东西，我心里想着就是做一个项目，没想到这么麻烦，就没有备案，在网上查了好多方法，然后看到一个可以内网穿透的软件，通过那个软件可以代理一个内网穿透的地址，这个地址可以访问内网，然后我就花了十来块钱买了一个月，本来心里想着这下没问题了吧，但是后面使用动静分离那一块，一直出现静态资源无法访问，最终，没办法，就在本地安装了一个Nginx，好了一切问题都解决了，但是这个代理好像没什么太大意义！！！</p></li></ol><h2 id="通过认证服务完成了社交登陆功能（验证码，接口防刷）"><a href="#通过认证服务完成了社交登陆功能（验证码，接口防刷）" class="headerlink" title="通过认证服务完成了社交登陆功能（验证码，接口防刷）"></a>通过认证服务完成了社交登陆功能（验证码，接口防刷）</h2><ul><li><p>首先是注册功能，这里使用了阿里云的验证码进行验证，验证成功之后就可以进行注册了，但是因为验证码的条数是要钱的，所以如果一直被别人刷的话，那验证码的条数就浪费了，因此做了一个接口防刷的功能</p><p><strong>如何实现接口防刷的？</strong></p><ul><li>这里使用到了Redis，每次发送短信验证码请求的时候，就会将这个手机号和验证码绑定在一起，然后一起存到redis中，并且设置过期时间为一分钟，如果下次相同的手机号再次发送短信验证，首先会将这个手机号获取，然后通过手机号查询redis中是否存在该手机号，如果存在，那么就直接返回错误信息，如果没有，那么就输入验证码进行注册功能。</li></ul><p><strong>除了使用这个方法进行防刷，你还了解其他的吗？</strong></p><ul><li>对单个手机号进行请求限制，如果这个手机号在规定时间段里发送的次数过多，就可以限制这个手机号此时间段内不能再发请求了</li><li>对单个Ip进行限制，这样虽然可以防止在一个ip地址下，多个手机号被刷的次数，但是同样的，因为一个小区可能都使用的一个ip地址，如果此时别人也在使用注册功能，那么将是一个很大的问题</li><li>网关进行控制，把当前时间段，同一个手机号多次恶意注册的请求拦截</li></ul><p><strong>如何实现密码的加密的？</strong></p><ul><li>密码加密主要是保证用户信息的安全性，即使用户信息不小心暴露出去，也不能通过账号和验证码进行登录。实现密码的加密方式主要是使用MD5进行加密的，因为在网上看到了很多对MD5进行破解的软件，因此这里我使用了MD5盐值加密，使用这个会随机的在密码的基础上加一个字符串，这样就能保证密码永远对应的都是不同MD5值，有更高的安全性</li></ul></li><li><p>社交登录功能</p><p><strong>什么是OAuth2.0</strong></p><ul><li>OAuth2.0就是开放授权，意思就是用户可以通过给第三方授权，然后获取自己的相关信息，而不需要将用户的账户和密码提供给第三方网站。</li></ul><p><strong>说说OAuth2.0的工作原理？</strong><br><img src="D:\笔记\Typora\note\图片\image-20211026165107270.png" alt="image-20211026165107270"></p><p><strong>如何实现社交登陆的？</strong></p><ul><li>这里首先是在微博的开放平台注册了一个个人应用，然后这个应用对应的域名就是本机服务的域名，注册成功。我们可以通过第三方的授权认证登录微博账户，然后通过这个微博注册的应用返回给我们该用户的相关信息，并且在登录的时候会判断这个用户信息是否存在，如果不存在则需要存储当前新用户，如果存在那么就登陆成功。</li></ul></li></ul><h2 id="Session共享问题"><a href="#Session共享问题" class="headerlink" title="Session共享问题"></a>Session共享问题</h2><p><strong>session的原理？</strong></p><p><img src="D:\笔记\Typora\note\图片\image-20211026190414554.png" alt="image-20211026190414554"></p><ul><li>首先用户第一次访问服务器进行登录，登陆成功之后，就会将用户信息保存在session中，然后session会将sessionId返回给浏览器，浏览器就会将这个sessionId存在cookie中，这样，下一次访问页面的时候会带上cookie进行访问。浏览器关闭，清除回话cookie，那么下一次再进来，就需要重新登录</li></ul><p><strong>session如果在集群环境下会出现什么问题？</strong></p><p><img src="D:\笔记\Typora\note\图片\image-20211026191241293.png" alt="image-20211026191241293"></p><ul><li>如果是在同一个域名，但是不同服务的情况下：<ul><li>在这种情况下，如果浏览器第一次访问当了第一个服务器，那么会在该服务器存储session，并且返回sessionId存储在浏览器中，但是如果浏览器下一次访问的时候，通过负载均衡直接转到另一个服务器上，那么这个时候带上之前的cookie显然是不能进行访问的。</li></ul></li><li>如果是在不同域名，不同服务下，session是不能共享的</li></ul><p><strong>如何解决这个session不能共享的问题呢？？？</strong></p><ul><li><img src="D:\笔记\Typora\note\图片\image-20211026191759759.png" alt="image-20211026191759759"></li><li><img src="D:\笔记\Typora\note\图片\image-20211026192011245.png" alt="image-20211026192011245"></li><li><img src="D:\笔记\Typora\note\图片\image-20211026192036706.png" alt="image-20211026192036706"></li><li><img src="D:\笔记\Typora\note\图片\image-20211026192234226.png" alt="image-20211026192234226"></li></ul><p><strong>通过Spring Session解决了session不能共享的问题</strong></p><ul><li><p>是怎么解决的呢？</p><p>首先导入SpringSession的依赖，然后这里在配置文件中指定存储类型为redis，然后写一个session配置类，主要用于放大作用域和解决序列化问题。解决的流程就是，将登录的用户的session通过redis进行保存，这样以后用户在访问页面的时候，不管访问哪个服务器，服务器都可以直接从redis中找出对应的session与之匹配，然后进行访问</p></li><li><p>SpringSession的核心原理是什么?</p><p><img src="D:\笔记\Typora\note\图片\image-20211026202113997.png" alt="image-20211026202113997"></p><p>​    <img src="D:\笔记\Typora\note\图片\image-20211026202153693.png" alt="image-20211026202153693"></p><ul><li>它的核心原理有两个重要的点：<ul><li>第一个：给容器中添加了一个SessionRepository的组件，这个组件主要的作用是让redis操作session，相当于redis的Dao</li><li>第二个：SessionRepositoryFilter，存储过滤器，这个过滤器在创建的时候就会自动的从容器中获取SessionRepository，最重要的就是它里面的doFilter方法，这个方法将原声的request和responce都包装成了Wrapper类型的request和responce，然后后续我们的操作中获取session中的信息，都是从SessionRepository中获取而不是在原声的服务器中获取。</li><li><strong>装饰者模式</strong>（责任链模式）</li></ul></li></ul></li></ul><h2 id="使用Redis做缓存提高性能"><a href="#使用Redis做缓存提高性能" class="headerlink" title="使用Redis做缓存提高性能"></a>使用Redis做缓存提高性能</h2><ul><li>使用缓存存在哪些问题呢？<ul><li>缓存穿透<ul><li><img src="D:\笔记\Typora\note\图片\image-20211028212006633.png" alt="image-20211028212006633"></li></ul></li><li>缓存击穿<ul><li><img src="D:\笔记\Typora\note\图片\image-20211028212745319.png" alt="image-20211028212745319"></li></ul></li><li>缓存雪崩<ul><li><img src="D:\笔记\Typora\note\图片\image-20211028212123327.png" alt="image-20211028212123327"></li></ul></li></ul></li></ul><h2 id="接口幂等性"><a href="#接口幂等性" class="headerlink" title="接口幂等性"></a>接口幂等性</h2><ul><li>什么是接口幂等？<ul><li>接口幂等就是，比如我们在进行一个提交操作的时候，这时候如果因为网络延迟，我们点了多次提交，然后就会出现多次重复提交的问题，这样可能我们自身只需要一次提交，但是却提交了很多次，这就是接口幂等</li></ul></li><li>哪些情况需要防止接口幂等<ul><li>用户多次点击提交按钮</li><li>用户页面回退，再次点击提交</li><li>微服务互相调用，因为网络或者别的原因调用失败，使用feign的失败重试机制</li><li>其他业务…</li></ul></li><li>怎么解决接口幂等性？<ul><li>Token（令牌）机制<ul><li>用户在提交请求的时候，首先会输入验证码，然后请求会将验证码一起携带传到服务器，服务器会根据传过来的验证码，和存在于redis中的验证码作比较，如果存在，那么就表示请求是第一次进来，如果不存在则表示请求是重复请求。</li><li><strong>存在哪些危险性呢？</strong><ul><li>验证完成之后，是先删除token再执行业务逻辑，还是先执行业务逻辑再删除呢？<ul><li>先删除token，可能业务还没有执行完成，但是服务器中断，导致这次请求调用失败</li><li>后删除token，可能业务完成了，但是token没来的及删除，服务器中断，导致下一次请求又会重新执行一次业务</li><li>最好是先删除token，这样即使服务调用失败，也不会造成什么损失</li></ul></li></ul></li><li><strong>如何解决呢？</strong><ul><li>Token获取、比较、删除必须是原子性的，所以如果使用令牌机制，那么就可以选择redis中的lua脚本进行原子性操作，这样就不会出现上述问题了。</li></ul></li></ul></li><li>各种锁机制</li><li>数据库唯一索引约束</li><li>redis防重</li><li>全局请求唯一ID</li></ul></li></ul><h2 id="多线程异步编排"><a href="#多线程异步编排" class="headerlink" title="多线程异步编排"></a>多线程异步编排</h2><ul><li><p><strong>初始化线程有哪几种方式？</strong></p><p>有四种方式</p><ul><li>继承Thread类</li><li>实现Runnable接口</li><li>实现callable接口</li><li>线程池</li></ul></li><li><p><strong>说说Runnable和Callable的区别</strong></p><p>1）Runnable提供run方法，无法通过throws抛出异常，所有CheckedException必须在run方法内部处理。Callable提供call方法，直接抛出Exception异常。</p><p>2）Runnable的run方法无返回值，Callable的call方法提供返回值用来表示任务运行的结果</p><p>3）Runnable可以作为Thread构造器的参数，通过开启新的线程来执行，也可以通过线程池来执行。而Callable只能通过线程池执行。</p><ul><li>Callable任务通过线程池的submit方法提交。且submit方法返回Future对象，通过Future的get方法可以获得具体的计算结果。而且get是个阻塞的方法，如果任务未执行完，则一直等待。</li></ul></li><li><p><strong>Future和FutureTask的区别</strong></p><ul><li>对于Calleble来说，Future和FutureTask均可以用来获取任务执行结果，不过Future是个接口，FutureTask是Future的具体实现，而且FutureTask还间接实现了Runnable接口，也就是说FutureTask可以作为Runnable任务提交给线程池。</li></ul></li><li><p><strong>什么是异步任务？什么情况下使用异步任务？</strong></p><ul><li><p>不等任务执行完，直接执行下一个任务。</p></li><li><p><img src="D:\笔记\Typora\note\图片\image-20211106110532332.png" alt="image-20211106110532332"></p><p>​    按照上面程序的执行顺序，如果是同步任务的话，会依次按照ABC进行执行，但是AC运行的比较快，如果等待B完成之后再完成AC，那么就会使整个程序运行的非常慢，因此使用异步任务，不用等B执行完成，直接运行AC,从而提高效率</p></li></ul></li><li><p><strong>线程池的七大参数知道吗？</strong></p><ul><li><img src="D:\笔记\Typora\note\图片\image-20211106111054642.png" alt="image-20211106111054642"></li><li>核心线程数：就是线程池创建的时候，里面就有的线程数，称为核心线程数</li><li>最大线程数：如果此时阻塞队列满了，核心线程全部都在运行，那么就会开始最大线程数来执行任务</li><li>存活时间：当开启了最大线程来完成了自己的任务的时候，并且任务执行完了，此时除了核心线程外，其他的额外线程就会在规定的时间里进行销毁</li><li>时间单位：存活时间的单位</li><li>阻塞队列：当线程都在运行，此时还有任务进来的时候，任务不会被直接，而是加入到阻塞队列中</li><li>线程工厂：指定创建线程的工厂</li><li>饱和策略：当开启了最大线程数，且阻塞队列也满了，但是现在还有任务正在加入，那么就会执行饱和策略，默认的饱和策略就是拒绝策略<ul><li>Abort策略：默认策略，新任务提交时直接抛出未检查的异常RejectedExecutionException，该异常可由调用者捕获。</li><li>CallerRuns策略：为调节机制，既不抛弃任务也不抛出异常，而是将某些任务回退到调用者。不会在线程池的线程中执行新的任务，而是在调用exector的线程中运行新的任务。</li><li>Discard策略：新提交的任务被抛弃。</li><li>DiscardOldest策略：队列的是“队头”的任务，然后尝试提交新的任务。（不适合工作队列为优先队列场景）</li></ul></li></ul></li><li><p><strong>为什么使用线程池？</strong></p><p><img src="D:\笔记\Typora\note\图片\image-20211106112026608.png" alt="image-20211106112026608"></p></li><li><p><strong>在业务中， 你是怎么使用多线程异步任务来完成的？</strong></p><ul><li>首先来看一下主要的方法</li><li><img src="D:\笔记\Typora\note\图片\image-20211106144546689.png" alt="image-20211106144546689"></li><li><img src="D:\笔记\Typora\note\图片\image-20211106145259026.png" alt="image-20211106145259026"></li><li><img src="D:\笔记\Typora\note\图片\image-20211106145200436.png" alt="image-20211106145200436"></li><li>具体实现</li><li><img src="D:\笔记\Typora\note\图片\image-20211106145633587.png" alt="image-20211106145633587"></li><li><img src="D:\笔记\Typora\note\图片\image-20211106145751611.png" alt="image-20211106145751611"></li></ul></li></ul><p><img src="D:\笔记\Typora\note\图片\image-20211106102203574.png" alt="image-20211106102203574"></p><h2 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h2><ul><li>分布式事务会存在那些问题？<ul><li>本地事务回滚，而远程服务不回滚</li></ul></li><li>怎么解决？<ul><li><img src="D:\笔记\Typora\note\图片\image-20211028095407700.png" alt="image-20211028095407700"></li></ul></li><li>CAP定理<ul><li><img src="D:\笔记\Typora\note\图片\image-20211028100639121.png" alt="image-20211028100639121"></li></ul></li><li>面临问题<br>现在互联网的集群规模越来越大，如果保证一致性，那么就要舍弃可用性，但是因为网络原因，或者节点故障而导致服务调用失败是常态，所以如果要保证可用性，就只能舍弃C而保证AP</li><li>BASE理论<ul><li>BASE理论是对CAP的一种延伸，意思就是即使无法做到强一致性，也可以做到弱一致性（最终一致性）</li></ul></li><li>使用Seata解决分布式事务</li></ul><h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><ul><li><p>消息队列的应用场景<br><img src="D:\笔记\Typora\note\图片\image-20211027105938326.png" alt="image-20211027105938326"></p><p>异步处理：比如一个注册功能，在注册的时候会首先将注册信息写入数据库，然后后面可能还需要发送邮件，发送信息等操作，这一系列操作都完成之后，才可以算真正的注册成功，但是这样非常的耗时，因此可以采用消息队列进行异步处理，也就是将用户的注册请求保存在消息队列中，然后直接让消息队列进行后续的异步处理逻辑</p><p><img src="D:\笔记\Typora\note\图片\image-20211027141911689.png" alt="image-20211027141911689"></p><p>应用解耦：比如现在有两个微服务，他们之间需要一起调用实现一组操作，这个时候，可以通过消息中间件将他们分开，也就是解耦，让后面的服务不再依赖前面的服务，前面服务只需要将请求和数据存到消息队列中，而后面的服务只需要取出这些请求和数据进行相应的处理即可</p><p><img src="D:\笔记\Typora\note\图片\image-20211027141923484.png" alt="image-20211027141923484"></p><p>流量控制：例如现在一个系统是百万级并发的秒杀系统，那么这时候可能会出现每秒百万的请求进来，这时候即使服务器能承受的了这么多的请求，但是等待处理的话，后续还有请求进来，将会一直阻塞，然后系统会崩溃，这时候就可以通过消息队列将这些请求全部存储起来，这样将请求的后续操作慢慢进行，就不会导致服务器崩溃的情况了。</p></li><li><p>消息队列的定义<br><img src="D:\笔记\Typora\note\图片\image-20211027144735349.png" alt="image-20211027144735349"></p></li><li><p>RabbitMQ的概念：</p><p><img src="D:\笔记\Typora\note\图片\image-20211027150940156.png" alt="image-20211027150940156"></p><ul><li>首先会有一个生产者来生产消息</li><li><strong>消息</strong>是由消息头和消息体组成的，这其中消息头中有一个重要属性：<strong>Route-Key：路由键</strong></li><li><strong>交换机</strong>用来接收生产者生产的消息的，并将消息路由给服务器中的队列</li><li><strong>Broker</strong>消息中间键的服务器</li><li><strong>Queue</strong>消息队列，用于存储消息的</li><li><strong>VHost</strong>虚拟主机，主机之间互相隔离，互不影响</li><li><strong>Consumer</strong>消费者</li></ul><p>具体工作流程：</p><p>​    首先生产者生产信息，然后将这些信息发送到消息服务器中，服务器会根据消息找到指定的交换机，然后交换机会通过路由键找到指定的队列，通过交换机与队列的绑定关系，将信息发送到队列中，然后由消费者通过与服务器建立连接，通过信道进行信息的传输</p></li><li><p>交换机类型<br><img src="D:\笔记\Typora\note\图片\image-20211027154236657.png" alt="image-20211027154236657"></p><p><img src="D:\笔记\Typora\note\图片\image-20211027155524216.png" alt="image-20211027155524216"></p><p><img src="D:\笔记\Typora\note\图片\image-20211027154304851.png" alt="image-20211027154304851"></p><p><img src="D:\笔记\Typora\note\图片\image-20211027154317506.png" alt="image-20211027154317506"></p></li><li><p>消息确认机制<br><img src="D:\笔记\Typora\note\图片\image-20211027165225226.png" alt="image-20211027165225226"></p></li><li><p>p-&gt;b</p><p><img src="D:\笔记\Typora\note\图片\image-20211027200533738.png" alt="image-20211027200533738"></p></li><li><p>e-&gt;q</p></li></ul><p><img src="D:\笔记\Typora\note\图片\image-20211027211744153.png" alt="image-20211027211744153"></p><ul><li><p>q-&gt;c</p><p><img src="D:\笔记\Typora\note\图片\image-20211027211937323.png" alt="image-20211027211937323"></p></li><li><p>延时队列</p><ul><li>使用场景<ul><li>下单成功之后，但是一直没有完成支付，那么在规定的时间内，如果一直没完成，那么时间结束，就会自动关单，并且将锁定的库存释放</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电商项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA复习面试</title>
      <link href="/2021/11/16/java-fu-xi-mian-shi/"/>
      <url>/2021/11/16/java-fu-xi-mian-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础复习"><a href="#Java基础复习" class="headerlink" title="Java基础复习"></a>Java基础复习</h1><blockquote><p>Java和c++的区别：</p></blockquote><ol><li>首先是都是面向对象的编程语言</li><li>其次Java是没有指针，对内存管理更加安全</li><li>Java是单继承的，c++是多继承的，但是Java的接口是多继承的</li><li>Java有自动的垃圾回收机制，无需手动释放内存</li><li>Java只支持方法的重载，但是c++支持方法重载和操作符的重载</li></ol><blockquote><p>import java 和javax有什么区别：</p></blockquote><p>​    没有本质的区别，因为当时javax是java api的扩展包，随着时间的推移，javax的api包，逐渐称为java扩展api的一部分，但是合并javax包到Java包中太麻烦，所以将javax作为Java标准api的一部分</p><blockquote><p>字符型常量和字符串常量的区别：</p></blockquote><ol><li>一个是单引号引用，一个是双引号引用，长度可以为0</li><li>字符型常量相当于一个ascll值，可以参与运算，但是字符串常量代表的是一个地址值(存放在内存中的地址值)</li><li>字符型常量的长度是2个字节，另一个占若干个字符</li></ol><blockquote><p>java中的注释有几种：</p></blockquote><ol><li>单行注释</li><li>多行注释</li><li>文本注释</li></ol><blockquote><p>continue、break、和 return 的区别是什么？</p></blockquote><ol><li>跳出当前循环，下面的循环继续进行</li><li>跳出整个循环体</li><li>返回 ：<ol><li>返回一个特定的值</li><li>直接返回，相当于方法的结束</li></ol></li></ol><blockquote><p>== 和equals的区别：</p></blockquote><p>==对于基本数据类型是值的比较，对于引用类型，比较的是引用比较，equals是引用比较，但是有的类重写了equals方法，例如String，Interger将引用比较变成了值比较</p><blockquote><p>为什么重写equals就必须重写hashcode？</p></blockquote><p>​    因为如果两个对象的hashcode的值相等，但是两个对象不是相等的，那么他们存储就会存在问题，所以重写equals也必须重写hashcode的算法来实现</p><p>例子：现在我们new两个对象，这两个对象都是自定义的相同的属性，如果这里我们不重写equals方法和hashcode方法，那么我们会发现计算这两个hashcode的值是不同的，但是实际上属性是相同的，那么存储到hashmap中，就会发现存储了两个一样的对象，因此在重写了equals方法之后，必须重写hashcode的计算方法，否则会出现存储的元素重复情况。</p><blockquote><p>介绍一下hashcode</p></blockquote><p>​    hashcode（）这个方法是返回一个int类型的值，这个值对应的就是对象存储在散列表中的位置</p><blockquote><p>为什么要有hashcode</p></blockquote><p>​    因为在散列表中存储对象的时候，如果没有hashcode，那么就以hashset为例子，我们需要对每个地址中的对象都进行equals比较，这样耗费太多的时间与性能，所以用hashcode就很好的解决了这个问题，我们首先在存储对象的时候，可以先根据这个对象所算出的散列值在散列表中查找，如果已经存在那么就不用再进行重复插入了，这个值已经存在，如果没有那么就可以进行插入。</p><blockquote><p>为什么两个对象有相同的hashcode值，但是他们却不相等</p></blockquote><p>​    因为这个涉及到hash算法的问题，越简单的算法就代表着重复的可能性会越高，所以不可避免的就是hashcode可能一样，但是对象不一样，以hashset为例子，在存储对象的时候，如果两个对象的hashcode值是相同的，这时候会用equals进行比较，如果相同那么就不会进行插入，如果不相同就会散列到其他位置</p><blockquote><p>Java中有哪几种数据类型：</p></blockquote><p>​    有八种数据类型：</p><p>​        数字类型：byte、short、int、long、float、double</p><p>​        字符类型：char</p><p>​        布尔类型：Boolean</p><blockquote><p>自动装箱与拆箱</p></blockquote><p>​    装箱：将基本数据类型包装成对应的引用类型</p><p>​        实质上：装箱就是用了valueof（）方法</p><p>​    拆箱：将引用类型转换为基本数据类型</p><p>​        实质上：拆箱就是用了***value（）方法</p><blockquote><p>什么是方法的返回值</p></blockquote><p>​    就是一个方法执行后，得到的结果</p><blockquote><p>方法有哪几种类型</p></blockquote><ol><li>无参无返回值</li><li>无参有返回值</li><li>有参无返回值</li><li>有参有返回值</li></ol><blockquote><p>在静态方法内调用一个非静态成员为什么是违法的</p></blockquote><p>​    因为静态方法是属于类的，在类加载的时候，就会分配内存给静态方法，因此静态方法可以用过类来调用，但是非静态成员是属于对象的，只有当对象创建的时候，非静态成员才会被创建，因此在类加载的时候调用内存中不存在的非静态成员是违法的。</p><blockquote><p>静态方法和实例方法有什么不同</p></blockquote><p>​    这里有两处不同：</p><ol><li><p>首先是方法的调用方式不同：</p><p>静态方法可以通过类名.方法名或者对象.方法名进行调用，但是实例方法只能是对象.方法名，但是为了不混淆，静态方法还是使用类型.方法名进行调用</p></li><li><p>成员变量访问限制：</p><p>静态方法只能访问静态变量，但是实例方法都可以访问</p></li></ol><blockquote><p>Java是按值传递的，不是按引用传递的</p></blockquote><ol><li>一个方法不能改变基本类型参数的值</li><li>一个方法可以改变对象的状态，但是不能让对象参数引用另一个对象</li></ol><blockquote><p>重写和重载：</p></blockquote><ol><li>重载：<ol><li>方法的重载一般是发生在一个类中，重载的方法必须有着相同的方法名，但是参数类型的数量、顺序、方法返回值和访问修饰符都可以不同</li><li>编译器在进行重载方法的匹配时，叫做重载解析</li></ol></li><li>重写：<ol><li>发生在父类和子类中，方法重写返回值类型、方法名以及参数都必须一致</li><li>这里返回值类型可以小于等于父类的返回值类型</li><li>抛出的异常可以小于等于返回值类型</li><li>访问修饰符要大于等于父类的访问修饰符</li></ol></li></ol><blockquote><p>深拷贝和浅拷贝：</p></blockquote><ul><li>浅拷贝：就是增加了一个新的指针，指向了原来的内存地址，当原地址发生变化，新的指针也跟着变化</li><li>深拷贝：也是增加了一个新指针，但是指向了一个新的内存地址，当原地址发生改变，新指针不会发生变化</li></ul><blockquote><p>面向对象和面向过程的区别</p></blockquote><ul><li>面向对象：面向对象没有面向过程的性能高，但是由于面向对象有着封装、继承、多态这些特性，所以有着易维护、易扩展、易复用的特点</li><li>面向过程：面向过程性能比面向对象高，但是类调用需要实例化，开销比较大。</li></ul><blockquote><p>成员变量和局部变量的区别：</p></blockquote><ul><li>成员变量可以被访问修饰符所修饰，但是局部变量不能，不过这里特殊情况就是他们都能被final所修饰</li><li>成员变量随着对象创建而产生，局部变量随着方法调用而消失</li><li>成员变量在对象实例化的时候会被赋给类型的默认值，但是局部变量不行</li><li>如果有static修饰符，那么成员变量时属于类的，但是如果成员变量没有static修饰符，就是数据实例化对象的。对象存储在堆中，而局部变量存储在栈中</li></ul><pre class="line-numbers language-none"><code class="language-none">创建一个对象用new运算符对象实例存在与堆内存中，对象引用存在与栈内存中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>对象的相等和指向他们引用的相等有什么区别</p></blockquote><p>​    对象的相等指的是对象的值相等，而对象引用的相等时指向他们内存的地址相等</p><blockquote><p>一个类的构造方法有什么作用？如果没有构造方法程序是否能正确执行，为什么</p></blockquote><ul><li>完成类的初始化工作</li><li>没有构造方法程序时可以执行的，因为即使类中没有声明构造方法，也会有默认的无参构造方法，如果有我们创建的构造方法，那么就必须使用我们自己创建的构造方法来初始化一个对象、</li></ul><blockquote><p>构造方法有哪些特点，可以被override吗？</p></blockquote><ul><li>构造方法的名字必须和类名相同</li><li>构造方法没有返回值，不能用void声明构造函数</li><li>构造方法自动执行，无需调用</li><li>构造方法不能被override，但是可以被重载，一个类中可以有多个构造方法</li></ul><blockquote><p>面向对象的三大特征：</p></blockquote><ul><li>封装：就是将对象中的属性，全部隐藏在对象内部，外部对象不能直接操作对象内部的属性，只能通过对象内部提供的方法来操作属性</li><li>继承：通过已有的类，创建出新类，也就是子类继承父类，子类拥有父类的所有属性和方法，并且子类可以重写父类的方法，以及可以定义自己的属性及方法，这里子类拥有父类的所有属性，但是不能直接访问父类的属性，只是拥有</li><li>多态：就是继承了父类或者接口的类，以多种不同的形态进行展示</li></ul><blockquote><p>String为什么是不可变的？</p></blockquote><p>​    因为String类中，是以final来定义字符串存储的数组，所以是不可变的</p><p>​    Java9之后，就改变成byte数组来进行存储字符串</p><blockquote><p>StringBuffer和StringBuilder以及String的区别：</p></blockquote><ul><li>StringBuffer和StringBuilder都继承了abstractStringBuilder类，在abstractStringBuilder中，保存字符串的修饰符并没有final字段进行限制</li><li>String中的对象是不可变的，所以可以理解为常量，线程安全，StringBuffer中的方法都加了同步锁，线程也是安全的，但是StringBuilder没有同步锁，所以线程是不安全的，但是StringBuilder的性能比StringBuffer的性能高处10％-15％</li><li>综上所述：<ul><li>操作少量数据用String</li><li>单线程下，操作大量数据使用StringBuilder</li><li>多线程下，操作大量数据使用StringBuffer</li></ul></li></ul><blockquote><p>何为反射？</p></blockquote><ul><li>反射就是在运行期间，我们拥有执行类的方法和分析类的能力</li><li>反射可以获取类的所有属性和方法，并且可以调用执行方法</li></ul><blockquote><p>反射机制的优缺点：</p></blockquote><ul><li>优点：可以让代码更加灵活，为各种框架提供开箱即用的便利性</li><li>缺点：让我们在运行期间拥有分析类和执行类的能力，这也造成了安全问题，性能也会有一定的影响</li></ul><blockquote><p>什么事序列化，什么是反序列化？</p></blockquote><ul><li>序列化：就是将要持久化的对象转换成机器能识别的二进制字节流的过程</li><li>反序列化：就是将二进制字节流转换成我们的对象</li></ul><blockquote><p>final关键字总结：</p></blockquote><ul><li>final关键字意为最终的，不可修改的，可以用来修饰类，方法以及变量<ul><li>用来修饰类：那么类不能被继承，而且这个类的所有成员方法都被隐式的用final修饰了</li><li>用来修饰方法：那么这个方法不能被重写</li><li>用来修饰变量：如果是基本类型，那么初始化后就不能被修改，如果是引用类型，那么在初始化之后，就不能指向别的对象</li></ul></li></ul><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>​    类中的所有接口都需要实现，一旦接口发生了改变，那么代理对象的方法也必须重写，因此会很麻烦</p><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>​    动态代理，不需要实现所有的接口，可以针对我们需要代理的对象，然后实现其方法</p><p>对比：动态代理比静态代理更加灵活，静态代理在编译的时候就将接口，实现类以及代理类变成了.class文件，而动态代理是在运行期将代理类，接口实现变成二进制字节码加载进jvm中</p><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><blockquote><p>集合存放单一元素：Collection接口</p></blockquote><h3 id="collection接口"><a href="#collection接口" class="headerlink" title="collection接口"></a>collection接口</h3><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><ul><li><p>ArrayList</p><ul><li><p>arrayList：object[]数组</p><ul><li><p>怎么进行初始化的？</p><ul><li>如果是默认无参构造，那么就会置为一个空数组</li><li>如果是有参，参数是大小，那么就会根据这个大小进行初始化数组的大小</li><li>如果参数是集合，首先判断传过来的集合大小是否为空，空则置为空数组，不为空就进行数组拷贝，数组大小就是集合传过来的数据大小</li></ul></li><li><p>怎么进行增删改查的？（<strong>扩容根据数据添加来讲解</strong>）</p><ul><li>增：首先判断数组是否为空，如果为空就将数组设为默认的大小10，然后进入到扩容判断，扩容判断是根据当前数组的大小和元素添加进数组之后的大小进行比较，如果大于那么就需要进行扩容，创建一个新数组，数组长度是原来数组的1.5倍，然后进行数组拷贝。</li><li>删：根据下标进行删除</li><li>改：set方法，首先判断下标是否越界，然后将旧值记录，将新值写入，返回旧值</li><li>查：通过下标进行查找</li></ul></li><li><p>如何解决线程安全？线程不安全表现？</p><ul><li>线程不安全表现：<ul><li>输出值为null;</li><li>数组越界异常;</li><li>某些线程没有输出值;</li><li>public static void main(String[] args) throws InterruptedException {<pre><code>List&lt;String&gt; list = new ArrayList&lt;&gt;();for (int i =1; i&lt;=30 ; i++) {    new Thread(() -&gt; {        list.add("a");        list.add("b");        list.add("c");        list.add("d");        System.out.println(list.toString());    }).start();}</code></pre>}</li></ul></li><li>解决办法：Vector、Collections.synchronizedList()、CopyOnWriteArrayList<ul><li>Vector在方法上添加了synchronize的锁，对代码进行加锁，力度大，所以代码执行效率低下</li><li>CopyOnWrite容器即写时复制的容器。往一个容器添加元索的时候，不直接往当前容器Object[]添加，而是先将当前容器Object[]进行Copy,复制出一个新的容器object[] newElements,然后往新的容器object[] newElements 里添加元素，添加完元素之后，再将原容器的引用指向新的容器setArray(newElements);。 这样做的好处是可以CopyOnWrite容器进行并发的读，而不需要加锁，因为当前容器不会添加任何元素。所以CopyOnWrite 容器也是一种读写分离的思想，读和写不同的容器</li></ul></li></ul></li><li><p>频繁扩容带来的影响？如何解决？</p><ul><li>添加效率低，可以通过初始化的时候设置容量大小，不过这样浪费空间。<strong>以空间换时间</strong></li></ul></li></ul></li></ul></li><li><p>LinkedList：jdk1.6之前是循环链表，之后变成了双向链表</p><ul><li>如何进行增删改查的？<ul><li>增：可以通过头插法和尾插法进行（<strong>中间插入</strong>：通过获取当前要插入节点的前面一个节点，然后通过指针进行添加），主要设置前驱节点后后驱节点的指向</li><li>删：删除头结点或者尾节点</li><li>改：首先查找要修改的节点，进行遍历找到，通过旧值返回，新值覆盖的操作进行修改。</li><li>查：通过下标索引进行查找，主要是遍历整个链表进行数据的返回</li></ul></li><li>线程安全？如何解决？什么情况下出现不安全？<ul><li>线程是不安全的</li><li>解决：Collections.synchronizedList()、ConcurrentLinkedQueue</li></ul></li></ul></li><li><p>Vector：object[]数组 <strong>线程安全！</strong></p></li></ul><h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><ul><li><p>HashSet</p><ul><li>底层用的hashMap存储数据</li><li>LinkHashSet：其实是hash set的子类，不过底层用的是LinkHashMap进行存储元素的</li><li>TreeSet：红黑树（自平衡的二叉树）</li></ul></li><li><p>LinkedHashSet</p></li><li><p>TreeSet</p></li></ul><h4 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h4><ul><li>queue<ul><li>PriorityQueue：object[]数组</li><li>ArraryQueue：object[]数组+双指针</li></ul></li><li>dequeue：双端队列<ul><li>怎么实现双端队列的?</li></ul></li></ul><h3 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h3><p>三大接口：</p><ul><li>hashTable</li><li>hashMap</li><li>SortedMap</li></ul><h4 id="HashMap详解"><a href="#HashMap详解" class="headerlink" title="HashMap详解"></a>HashMap详解</h4><h5 id="jdk1-7的hashmap："><a href="#jdk1-7的hashmap：" class="headerlink" title="jdk1.7的hashmap："></a>jdk1.7的hashmap：</h5><ol><li><p>hashmap的构造方法，基本上都是初始化一些基本参数，比如默认的容量为16，默认的负载因子是0.75，还有阈值是通过计算得出的</p><ol><li><p>为什么初始化的数组都是2的幂次</p><ol><li><p>方便与运算</p><p>因为我们计算出来了hash值之后，还需要根据hash值计算出对应的数组下标，而这里的计算都是通过<strong>与运算</strong>进行的，所以都需要转换成二进制进行计算，如果此时数组的长度不是2的幂次，那么得到的与运算只是数组下标的部分值。</p></li><li><p>均匀分布</p><p><strong>为2的幂次</strong>，length-1 为奇数，奇数的二进制最后一位是 1，这样便保证了 hash &amp;(length-1) 的最后一位可能为 0，也可能为 1（这取决于 h 的值），即 &amp; 运算后的结果可能为偶数，也可能为奇数，<strong>这样便可以保证散列的均匀性</strong>。</p><p>而如果 length 为奇数的话，很明显 length-1 为偶数，它的最后一位是 0，这样 hash &amp; (length-1) 的最后一位肯定为 0，即只能为偶数，这样任何 hash 值都只会被散列到数组的<strong>偶数下标位置</strong>上，这便<strong>浪费了近一半的空间</strong></p></li></ol></li><li><p>为什么计算hashcode需要右移以及进行异或运算？</p><p>用与运算计算完之后，会发现我们都是用低四位进行运算的，而高四位并没有进行运算，因此再进行了与运算之后，又将获取到的结果进行异或运算，这样高四位也得到了使用，这样就<strong>使散列更加均匀，减少了hash冲突的问题</strong>。</p></li><li><p>当我们存入的对象键是相同的，会进行怎么样的操作</p><p>会将原来的值进行覆盖</p></li><li><p>扩容机制：</p><p>在1.7的扩容机制是先判断是否扩容，再进行添加的，而在1.8之后，就是先插入后进行扩容的判断。</p><p>怎么进行扩容的？</p><p>​    1.7的扩容机制，首先判断size的大小是否超出阈值，如果超出了就会进行扩容，首先将数组的大小扩容到原来的两倍，也就是新创建一个数组，这个数组是原来的两倍，然后遍历这个数组中的链表，通过hashcode进行计算，是否需要rehash，如果得到的数组下标不变，那么就直接将这个链表转移到新的数组上，如果下标发生变化，就需要重新计算下标的值，然后将链表转移过去。</p></li></ol></li><li><p>插入：jdk1.7的HashMap的插入，实际上就是根据key然后算出一个hashcode，然后根据hashcode的值来找到相应的地址，然后将对象插入进去，当然在插入的过程中是很有可能发生hash冲突的，因此解决hash冲突我们需要将此节点下加上链表，使用链表进行冲突元素的存储，而且存储冲突元素是根据头插法进行插入的。将冲突元素插入到头部之后，还需要将头节点移动到数组下表位置，否则遍历的时候找不到头结点的元素。</p><ol><li><p>为什么使用<strong>头插法</strong>呢？ </p><p>因为头插法效率比尾插法高，因为使用头插法可以直接将当前要插入的元素的引用指向头结点就可以的，但是如果使用尾插法，那么我们还需要遍历整个链表，直到找到链表的尾部才能进行插入</p></li></ol></li><li><p>get方法：首先是通过key值计算hash，然后通过hash计算出数组的下标，然后找到这个数组下表对应的key值所对应的元素</p></li></ol><h5 id="jdk1-8的hashMap·"><a href="#jdk1-8的hashMap·" class="headerlink" title="jdk1.8的hashMap·"></a>jdk1.8的hashMap·</h5><ol><li><p>为什么1.8中新加了红黑树代替了链表？</p><p>因为对链表的添加很方便，但是遍历就会很麻烦，而红黑树对于添加和遍历都是差不多的，因此将红黑树代替了链表</p></li><li><p>为什么链表默认值大于等于8的时候变成红黑树，而链表默认值小于等于6的时候是链表，这两个临界值为什么不一样</p><p>因为当我们在这个临界值左右频繁的做增删操作的时候，如果这个临界值是一样的，那么就会导致频繁的在链表和红黑树之间进行转换，这样会严重的影响map的效率。</p></li><li><p>put方法：</p><p>首先根据key来计算hashcode，然后根据hashcode计算数组下标的位置，这里的计算也是同1.7一样，用与和异或来计算出来的，计算出来之后，就将这个元素插入进去，不过这里是尾插法，不再是1.7的头插法了；因为我们需要判断链表的长度，所以无论如何我们都需要对链表进行遍历，因此这里使用<strong>尾插法</strong>来插入元素，在插入过程中，依然会对这个键进行判断，如果重复则会进行覆盖。</p></li></ol><h5 id="线程安全问题"><a href="#线程安全问题" class="headerlink" title="线程安全问题"></a>线程安全问题</h5><p>Hashmap是线程不安全的</p><ul><li>为什么不安全？<ol><li>插入的时候不安全，如果此时有两个线程进来进行插入操作，插入的对象计算出来的下标是一样的，那么如果此时线程一进行插入操作之后，紧接着线程二也进行插入操作，那么就会出现线程二插入的数据覆盖了线程一所插入的数据</li><li>针对1.7扩容会出现<strong>死循环问题</strong>，因为1.7中使用的是头插法，比如现在两个线程都检测到hashmap应该进行扩容操作，那么线程会同时进行扩容，因为是头插法，会将之前的数据倒序，这样如果第一个线程记录了头结点以及头结点的next节点，但是此时线程一被挂起，线程二进行执行，并且完成了扩容操作，那么线程一此时指向的节点就是扩容后链表的尾节点，那么进行遍历会将尾节点的next指针指向前一个节点，这样就形成了一个环</li></ol></li></ul><p><strong>解决办法？</strong></p><ul><li>Hashtable：对put和get方法直接加了synchronized互斥锁，效率很低，不长用</li><li>ConcurrentHashMap</li><li>Collections.synchronizedMap：也是加了synchronized</li></ul><h4 id="LinkedHashMap详解"><a href="#LinkedHashMap详解" class="headerlink" title="LinkedHashMap详解:"></a>LinkedHashMap详解:</h4><blockquote><p>LinkedHashMap的底层实现因为它是继承HashMap，所以也是通过数组、链表和红黑树完成的，当然区别在于LinkedHashMap增加了两个指针，用于双向链表的维护。</p></blockquote><ol><li><p>添加元素操作</p><p>LinkedHashMap的插入操作其实是重写了HashMap的插入操作，只不过因为LinkedHashMap中有双向链表的操作，而HashMap中没有，因此在重写的方法中，添加了对双向链表的操作，首先将插入的元素new了一个新的Entry对象，然后将这个新的对象插入到链表中，然后通过后置的LinkNodeLast方法将两个指针指向链表的前置和后置</p></li><li><p>删除元素的操作</p><p>删除元素的操作，在LinkedHashMap中，其实也是重写了HashMap的remove方法，只不过这里还重写了一个AfterNodeRemove方法，这个方法就是在删除了节点之后的操作</p><p>主要的步骤：</p><ol><li>首先定位要删除的节点位置</li><li>然后删除这个节点</li><li>之后删除双向链表的指向</li></ol></li><li><p>访问顺序的维护</p><p>LinkedHashMap是按插入顺序维护链表的，不过我们可以在初始化的时候指定accessOrder为ture。这样就是使他按访问顺序维护链表，当我们访问一个节点的时候，就会将这个节点移到末尾。</p></li></ol><h4 id="ConcurrentHashmap详解：-https-blog-csdn-net-zycxnanwang-article-details-105424734-https-blog-csdn-net-wangnanwlw-article-details-111587507"><a href="#ConcurrentHashmap详解：-https-blog-csdn-net-zycxnanwang-article-details-105424734-https-blog-csdn-net-wangnanwlw-article-details-111587507" class="headerlink" title="ConcurrentHashmap详解：(https://blog.csdn.net/zycxnanwang/article/details/105424734)(https://blog.csdn.net/wangnanwlw/article/details/111587507)"></a>ConcurrentHashmap详解：(<a href="https://blog.csdn.net/zycxnanwang/article/details/105424734)(https://blog.csdn.net/wangnanwlw/article/details/111587507)">https://blog.csdn.net/zycxnanwang/article/details/105424734)(https://blog.csdn.net/wangnanwlw/article/details/111587507)</a></h4><h5 id="1-7ConcurrentHashmap"><a href="#1-7ConcurrentHashmap" class="headerlink" title="1.7ConcurrentHashmap"></a>1.7ConcurrentHashmap</h5><p>数据结构：Segment数组加链表</p><p><strong>怎么保证线程安全的？</strong></p><p>主要是通过获取Segment分段锁来保证线程安全的。</p><ul><li><p>get操作</p><p>1.7的时候，get操作并没有加锁，因为它所有的共享变量都定义成volatile类型，保证了变量在线程间的可见性</p></li><li><p>put操作</p><p>1.7的时候，首先获取segment锁，然后判断是否扩容，再进行添加操作</p></li></ul><h5 id="1-8ConcurrentHashmap"><a href="#1-8ConcurrentHashmap" class="headerlink" title="1.8ConcurrentHashmap"></a>1.8ConcurrentHashmap</h5><p>数据结构：数组+链表+红黑树</p><p><strong>怎么保证线程安全的？</strong></p><ul><li><p>初始化数组的时候怎么保证线程安全的？</p><p>在JDK1.8中，初始化ConcurrentHashMap的时候这个Node[]数组是还未初始化的，会等到第一次put方法调用时才初始化，线程如果要进行初始化，首先会通过CAS操作将标志位置为-1，别的线程同时进来进行初始化的时候，如果标志位不为0，那么就会等待，进来的线程就会完成初始化操作，这样就保证了只有一个线程完成初始化工作。</p></li><li><p>put操作怎么保证线程安全的?<br>putValue函数，首先调用spread函数，计算hash值，之后进入一个自旋循环过程，直到插入或替换成功，才会返回。如果table未被初始化，则调用initTable进行初始化。之后判断hash映射的位置是否为null,如果为null,直接通过CAS自旋操作，插入元素成功，则直接返回，如果映射的位置值为MOVED(-1),则直接去协助扩容，排除以上条件后，尝试对链头Node节点f加锁，加锁成功后，链表通过尾插遍历，进行插入或替换。红黑树通过查询遍历，进行插入或替换。之后如果当前链表节点数量大于阈值，则调用treeifyBin函数，转换为红黑树最后通过调用addCount,执行CAS操作，更新数组大小，并且判断是否需要进行扩容</p></li><li><p>扩容怎么保证线程安全？</p><ol><li>构建一个nextTable，大小为table的两倍。</li><li>把table的数据复制到nextTable中。</li></ol></li><li><p>get怎么保证线程安全？</p><ul><li><p>判断table是否为空，如果为空，直接返回null；</p></li><li><p>首先计算hash值，定位到该table索引位置，如果是首节点符合就返回；</p></li><li><p>如果遇到扩容的时候，会调用标志正在扩容节点ForwardingNode的find方法，查找该节点，匹配就返回</p></li><li><p>hash值为负值表示正在扩容，这个时候查的是ForwardingNode的find方法来定位到nextTable（扩容新数组）</p><ul><li>eh=-1，说明该节点是一个ForwardingNode，正在迁移，此时调用ForwardingNode的find方法去nextTable里找。</li><li>eh=-2，说明该节点是一个TreeBin，此时调用TreeBin的find方法遍历红黑树，由于红黑树有可能正在旋转变色，所以find里会有读写锁。</li></ul></li><li><p>以上都不符合的话，就往下遍历节点，匹配就返回，否则最后就返回null</p></li><li><p>eh&gt;=0，说明该节点下挂的是一个链表，直接遍历该链表即可。 通过遍历链表或则树结构找到对应的节点，返回value值。</p></li></ul></li></ul><h4 id="HashTable详解"><a href="#HashTable详解" class="headerlink" title="HashTable详解"></a>HashTable详解</h4><ul><li>底层数据结构：数组+链表</li><li>通过对方法加synchronize保证了线程安全，性能很差</li><li>初始化默认的容量为11，扩容机制就是2n+1</li></ul><h4 id="TreeMap底层实现："><a href="#TreeMap底层实现：" class="headerlink" title="TreeMap底层实现："></a>TreeMap底层实现：</h4><p>底层数据结构：红黑树</p><p>弄清楚了红黑树，基本上TreeMap就没有什么秘密了</p><h4 id="红黑树详解："><a href="#红黑树详解：" class="headerlink" title="红黑树详解："></a>红黑树详解：</h4><blockquote><p>定义：红黑树是一个自平衡的二叉树，一种高效的查找树，可以在O(logN）时间内完成增删查等操作。</p></blockquote><blockquote><p>性质：</p><ol><li>节点是红色或者黑色</li><li>根是黑色</li><li>所有叶子都是黑色</li><li>每个红色节点必须有两个黑色子节点，并且不能出现连续的两个红色节点</li><li>从任意节点到叶子节点，包含的黑色节点都是相同的</li></ol></blockquote><ol><li><p>插入：</p></li><li><p>删除：</p></li></ol><h3 id="List、set、queue、Map的区别？"><a href="#List、set、queue、Map的区别？" class="headerlink" title="List、set、queue、Map的区别？"></a>List、set、queue、Map的区别？</h3><blockquote><p>List、set、queue、map的区别：</p></blockquote><p>List：存储的数据是有序的，可重复的</p><p>set：存储的数据是无序的，不可重复的</p><p>queue：按照特定的顺序进行存储，数据可以重复</p><p>map：通过键值对进行存储，key只能是唯一的，value可以是重复的，他们都是无序的</p><h2 id="并发基础"><a href="#并发基础" class="headerlink" title="并发基础"></a>并发基础</h2><ol><li><p>什么是进程？</p><p>比如在电脑上运行一个程序，进程就是这个程序运行的基本单位，程序的一次运行就代表着进程的创建，运行到消亡的过程，因此进程是动态的。‘</p></li><li><p>什么是线程<br>线程是比进程更小的执行单位，一个进程中可以包含多个线程，与进程不同的是，同类的多个线程共享进程区的堆和方法区资源，而每个线程又拥有自己的程序计数器、虚拟机栈、本地方法栈。线程又被称为轻量级进程</p></li></ol><h3 id="对象的创建过程："><a href="#对象的创建过程：" class="headerlink" title="对象的创建过程："></a>对象的创建过程：</h3><ol><li>类加载检查：虚拟机遇到了new指令的时候，首先会检查这个指令的参数是否能在常量池中定位到这个类的引用，然后检查这个符号引用代表的类是否存在，如果不存在才会进行类加载过程</li><li>分配内存：在类加载完成之后，虚拟机就会分配一块堆的内存给这个对象。分配的方式有两种，这取决于Java堆是否规整，Java堆是否规整又取决于垃圾收集器是否带有压缩整理功能<ol><li>指针碰撞：适用于堆内存规整的情况，用过的内存全部分配到一边，没用过的内存全部分配到另一边，并且中间有一个分界指针</li><li>空闲列表：适用于对内存不规整的情况，虚拟机通过维护一个列表来分配内存，它会找一个足够大的堆内存划分给对象实例</li></ol></li><li>初始化零值</li><li>设置对象头</li><li>执行init方法</li></ol><h3 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h3><ol><li>句柄<br>通过句柄访问的话，首先在Java堆中就会分配一块内存用于存储句柄池，句柄池中存储着到对象实例和对象类型的指针；实例池存在于Java堆中，而对象类型则存储在方法区中</li><li>直接指针<br>如果使用直接指针，那么reference指向的直接就是对象实例的数据，这时候我们就需要考虑如何存放数据类型的相关信息</li></ol><h3 id="程序计数器为什么是私有的？"><a href="#程序计数器为什么是私有的？" class="headerlink" title="程序计数器为什么是私有的？"></a>程序计数器为什么是私有的？</h3><p>​    主要是因为线程切换后，能正确的恢复到执行位置</p><p>​    程序计数器的作用：</p><pre><code>1. 字节码解释器通过改变程序计数器来执行指令，从而实现代码的流程控制2. 在多线程的情况下，程序计数器用于记录当前线程执行的位置，从而能在线程切换回来的时候知道上次运行到哪了</code></pre><h3 id="虚拟机栈和本地内存栈为什么是私有的？"><a href="#虚拟机栈和本地内存栈为什么是私有的？" class="headerlink" title="虚拟机栈和本地内存栈为什么是私有的？"></a>虚拟机栈和本地内存栈为什么是私有的？</h3><p>虚拟机栈：因为每个Java方法在执行的同时都会创建一个栈针用于存储局部变量表，操作数栈，常量池引用等信息，从方法的执行到完成对应着，栈针在虚拟机栈中的入栈和出栈操作</p><p>本地内存栈：和虚拟机栈的作用是相同的，区别在于本地内存栈是为Native方法服务的，而虚拟机栈是为Java方法服务的。</p><h3 id="简单的介绍一下堆和方法区"><a href="#简单的介绍一下堆和方法区" class="headerlink" title="简单的介绍一下堆和方法区"></a>简单的介绍一下堆和方法区</h3><p>首先这两个都是线程的共享资源，堆是进程中最大的内存，主要用于存储新创建的对象，而方法区则用于存储已被加载的类信息、常量、静态变量等信息</p><h3 id="并发和并行的区别"><a href="#并发和并行的区别" class="headerlink" title="并发和并行的区别"></a>并发和并行的区别</h3><p>并发：同一时间内多个任务同时进行</p><p>并行：单位时间内，多个任务同时进行</p><h3 id="为什么要使用多线程呢？"><a href="#为什么要使用多线程呢？" class="headerlink" title="为什么要使用多线程呢？"></a>为什么要使用多线程呢？</h3><p>从计算机底层原理解释：线程也称之为轻量级进程，是程序的最小执行单位，线程的切换和调用的成本远远小于进程。然后现代的多核CPU的出现意味着多个线程可以同时运行，减少上下文切换的开销。</p><p>从互联网发展来看：现在的系统几乎都是要支持百万级甚至千万级的并发量，而多线程并发编程正是支持这些高并发的系统的基础，充分利用多线程就机制可以有效的提升高并发系统的性能</p><h3 id="使用多线程可能带来什么问题"><a href="#使用多线程可能带来什么问题" class="headerlink" title="使用多线程可能带来什么问题"></a>使用多线程可能带来什么问题</h3><p>内存泄露、死锁、线程不安全</p><h3 id="线程的生命周期和状态"><a href="#线程的生命周期和状态" class="headerlink" title="线程的生命周期和状态"></a>线程的生命周期和状态</h3><p>初始化-&gt;运行-&gt;阻塞-&gt;等待-&gt;超时等待-&gt;终止</p><h3 id="什么是上下文切换"><a href="#什么是上下文切换" class="headerlink" title="什么是上下文切换?"></a>什么是上下文切换?</h3><p>上下文切换意思就是，保存当前线程运行的条件和状态，当下次切换到这个线程的时候，可以恢复上次的状态进行运行。</p><h3 id="什么时候会发生上下文切换呢？"><a href="#什么时候会发生上下文切换呢？" class="headerlink" title="什么时候会发生上下文切换呢？"></a>什么时候会发生上下文切换呢？</h3><ol><li>主动让出了cpu。例如调用了sleep（）、wait（）方法</li><li>当前线程的时间片用完</li><li>调用阻塞类型的系统中断</li></ol><h3 id="什么是线程死锁？如何避免死锁"><a href="#什么是线程死锁？如何避免死锁" class="headerlink" title="什么是线程死锁？如何避免死锁"></a>什么是线程死锁？如何避免死锁</h3><p>死锁：多个线程同时被阻塞，他们中的一个或者多个都在等待某个资源的释放，因为这些线程被无限期的阻塞，导致程序无法正常终止。</p><p>产生死锁的必要条件：</p><ol><li>互斥条件：该资源任意时刻只能被一个线程占用</li><li>请求与保持</li><li>不剥夺</li><li>循环等待</li></ol><p>如何预防死锁呢？（破坏产生死锁的必要条件）</p><ol><li>破坏请求与保持条件</li><li>破坏不剥夺条件</li><li>破坏循环等待条件</li></ol><p>如何避免死锁？</p><p>就是在分配资源的时候借助算法（银行家算法）来对资源分配进行计算，使其进入安全状态</p><p>安全状态：系统能够按照某种推进顺序，为每个进程分配所需的资源，直到进程所需的资源全部完成分配。</p><h3 id="sleep和wait方法的异同"><a href="#sleep和wait方法的异同" class="headerlink" title="sleep和wait方法的异同"></a>sleep和wait方法的异同</h3><ol><li>sleep没有释放锁，wait释放锁</li><li>它们俩都可以暂停线程，但是wait通常用于线程的交互/通信，sleep通常用于线程的暂停</li><li>sleep方法暂停之后可以让线程自动苏醒，但是wait方法不会，除非在wait方法上设置一个超时时间，那么时间超时后就会自动苏醒，但是如果不设置超时时间，那么就必须调用notify或者notifyall方法让线程苏醒</li></ol><h3 id="为什么不能直接调用run方法，而是需要调用start来执行run方法"><a href="#为什么不能直接调用run方法，而是需要调用start来执行run方法" class="headerlink" title="为什么不能直接调用run方法，而是需要调用start来执行run方法"></a>为什么不能直接调用run方法，而是需要调用start来执行run方法</h3><p>因为如果直接使用run方法，那么就会将这个线程当做为main方法下的线程来执行，并不是以线程的方式来执行。而使用start方法运行run方法的时候，首先线程会先进入就绪状态，当有时间片分配到当前线程的时候，才会运行run方法，这是线程的完整的执行流程。</p><h3 id="对synchronize的理解"><a href="#对synchronize的理解" class="headerlink" title="对synchronize的理解"></a>对synchronize的理解</h3><ol><li><p>synchronize主要是解决多个线程之间访问资源的同步性</p></li><li><p>synchronize可以保证被它修饰的方法或者代码块只能被一个线程执行</p></li><li><p>synchronize在jdk6之前被称之为重量级锁，因为在6之前，synchronize是依靠操作系统的mutex lock进行实现的，这就相当于我们对线程的操作，都需要依靠操作系统来配合完成，会花费很长的时间成本。在6之后对synchronize进行了很大的优化，这就让原始的synchronize不再是重量级锁了，因为6之后加入了很多的新锁，比如首先是无锁状态，然后还有偏向锁，轻量级锁最后会变成重量级锁</p></li></ol><h3 id="自己是怎么使用synchronize？"><a href="#自己是怎么使用synchronize？" class="headerlink" title="自己是怎么使用synchronize？"></a>自己是怎么使用synchronize？</h3><ol><li>修饰实例方法：对当前对象的实例进行加锁</li><li>修饰静态方法：对当前类进行加锁</li><li>修饰代码块：给指定的对象加锁，给对象/类加锁</li></ol><h3 id="说说jdk6之后，对synchronize做了那些优化"><a href="#说说jdk6之后，对synchronize做了那些优化" class="headerlink" title="说说jdk6之后，对synchronize做了那些优化"></a>说说jdk6之后，对synchronize做了那些优化</h3><p>优化之后的synchronize，现在锁的状态主要有四种：无锁状态-&gt;偏向锁状态-&gt;轻量级锁状态-&gt;重量级锁状态，随着竞争的激烈，锁会逐渐升级，且锁只能升级成越来越重的锁，而不会降级，这种策略提高获取锁和释放锁的效率。</p><h3 id="锁升级的过程？"><a href="#锁升级的过程？" class="headerlink" title="锁升级的过程？"></a>锁升级的过程？</h3><p>锁的状态：无锁-&gt;偏向锁-&gt;轻量级锁-&gt;重量级锁</p><p><strong>偏向锁</strong></p><p>当一个线程访问同步块的时候，会在对象头和栈针中记录锁偏向的线程ID，然后下一次进来的时候就不用通过CAS操作来加锁和解锁，只需要简单的验证一下MarkWord里面指向的是否为当前线程的偏向锁，如果成功就获取锁，如果失败则需要再测试一下MarkWord中偏向锁的标志位是否为1，如果是则尝试使用Cas将对象头的偏向锁指向当前线程，如果不是则尝试CAS竞争锁。</p><h3 id="synchronize和reentrantlock的区别"><a href="#synchronize和reentrantlock的区别" class="headerlink" title="synchronize和reentrantlock的区别"></a>synchronize和reentrantlock的区别</h3><ol><li>两者都是可重入锁：可重入锁的意思就是当线程获取了一个对象的锁之后，锁没有被释放，但是还是可以再次获取这个锁，如果是不可重入锁那么就会造成死锁的状态，因为每个线程获取锁的时候，计数器会加1，而线程释放锁的时候计数器就-1也就是0才能释放锁。</li><li>synchronize是依赖JVM实现的，而reentrantlock是依赖于API实现的（jdk层面的实现，需要lock、unlock方法配合try/finally块来完成）</li><li>reentrantlock比synchronize新增了三个功能<ol><li>等待可中断：中断等待锁的机制，线程可以选择放弃等待改为做其他的事情</li><li>可实现公平锁：reentrantlock默认是非公平的，但是可以通过构造方法将它改成公平锁（先等待的线程先获得锁）</li><li>可实现选择性通知：一个Lock对象中可以创建多个condition对象，然后线程对象可以指定的注册在某个condition对象中，从而可以有选择性的进行线程的通知。（synchronize中Lock对象只有一个Condition对象，这样所有的线程对象都注册在这一个condition对象中，这样使得如果调用notifyall就会使所有的线程都进行了通知，会造成很大的效率问题）</li></ol></li></ol><h3 id="volatile关键字"><a href="#volatile关键字" class="headerlink" title="volatile关键字"></a>volatile关键字</h3><h4 id="CPU缓存模型"><a href="#CPU缓存模型" class="headerlink" title="CPU缓存模型"></a>CPU缓存模型</h4><p>为什么要使用CPU高速缓存模型呢？</p><p>​    用CPU高速缓存模型是为了解决CPU处理速度和内存处理速度不对等的问题。    </p><h4 id="说说JMM（Java内存模型）"><a href="#说说JMM（Java内存模型）" class="headerlink" title="说说JMM（Java内存模型）"></a>说说JMM（Java内存模型）</h4><p>volatile关键字除了防止JVM的指令重排，还保证了变量的可见性</p><h4 id="并发编程的三个重要特征"><a href="#并发编程的三个重要特征" class="headerlink" title="并发编程的三个重要特征"></a>并发编程的三个重要特征</h4><ol><li>原子性：一次或多次操作，要么全部执行成功，要么全部执行失败</li><li>可见性：当一个线程对共享变量进行了修改的时候，其他的线程都是可以立即看到修改后的值，volatile保证了共享变量了可见性</li><li>有序性：代码在执行的过程中有先后顺序，但是Java编译器在运行期间会进行优化，所以可能导致执行的顺序并不是编写代码时的顺序，volatile关键字可以防止指令重排保证代码执行的有序性</li></ol><h4 id="说说synchronize和volatile的区别"><a href="#说说synchronize和volatile的区别" class="headerlink" title="说说synchronize和volatile的区别"></a>说说synchronize和volatile的区别</h4><blockquote><p>它们是互补的存在，而不是对立的存在</p></blockquote><ol><li>volatile是线程同步的轻量级实现，性能比synchronize好，但是volatile只能用于变量，而synchronize可以用于方法和代码块</li><li>synchronize可以保证数据的原子性和可见性，但是volatile只能保证数据的可见性</li><li>volatile主要解决的是变量在多个线程间的可见性，而synchronize主要解决的是多个线程之间访问资源的同步性</li></ol><h3 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h3><p>简介：可以把ThreadLocal简单的比喻成数据盒子，这个数据盒子中存储着每个线程的私有数据，当线程访问这个ThreadLocal的时候，就会得到这个数据的副本。</p><h4 id="ThreadLocal内存泄露问题怎么解决"><a href="#ThreadLocal内存泄露问题怎么解决" class="headerlink" title="ThreadLocal内存泄露问题怎么解决"></a>ThreadLocal内存泄露问题怎么解决</h4><p>在ThreadLocalMap中，是以ThreadLocal为key的弱引用和强引用的value组成，如果ThreadLocal没有被强引用，在垃圾回收的时候会将key清除掉，而value还继续存在，这样就会形成一个键为null的entry对象， 如果不采取任何措施，那么value值将永远不会被Gc，这时候就会产生内存泄露的问题。ThreadLocal已经考虑了这种情况，在调用set、get方法的时候，会自动清除掉键为null的entry对象。建议：使用完ThreadLocal对象最好是手动调用remove方法</p><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><ol><li><p>为什么使用线程池</p><ol><li>降低资源的消耗：重复利用已经创建的线程来降低线程创建和销毁带来的消耗</li><li>提高响应速度：当任务到达的时候，不用等待线程的创建，直接就可以运行</li><li>提高线程的可管理性</li></ol></li><li><p>实现runnable接口和callable的区别 </p><p>主要的区别在于：runnable接口不会有返回值或者抛出异常，而callable就有；首先runnable接口是从1.0就有的，而callable接口是从1.5开始的，callable的出现主要解决runnable无法解决的情况。</p></li><li><p>执行execute方法和submit方法的区别<br>execute方法主要是用于提交没有返回值的任务，而submit主要是提交那些有返回值的任务，有返回值的任务可以通过Future类的get方法来获取返回值，如果调用get方法则会阻塞当前的任务（必须等任务完成）</p></li><li><p>ThreadPoolExecutor构造函数的七大重要参数</p><ol><li><strong>corePoolSize</strong>：核心线程数，定义了最小可以同时运行的线程数</li><li><strong>maximumPoolSize</strong>：当队列中存放的任务达到队列的容量的时候，就会将当前线程数变成最大线程数</li><li><strong>workQueue</strong>：当任务进来的时候，如果线程数达到核心线程数，就会将新任务存储到队列中</li><li><strong>keepAliveTime</strong>：当线程池中的线程数量大于核心线程数，这时候又没有新的任务提交，多出的线程数不会立即销毁，而是会等待一段时间之后再进行销毁</li><li><strong>unit</strong>：keepAliveTime的时间单位</li><li><strong>threadFactory</strong>：executor创建线程会用到</li><li><strong>handler</strong>:饱和策略<ol><li>AbortPolicy（拒绝策略）：当有新任务时，直接拒绝执行，并且报拒绝异常</li><li>CallerRunsPolicy：这个是调用自己的线程来执行任务，但是这个会延迟任务的提交速度，如果程序能等待这么久，或者你的每一个线程必须执行，那么就可以使用这种策略</li><li>DiscordPolicy：不执行，直接抛弃的策略</li><li>Discord01destPolicy：丢弃最早未处理的线程策略</li></ol></li></ol></li></ol><h3 id="创建线程池有哪几种方式？"><a href="#创建线程池有哪几种方式？" class="headerlink" title="创建线程池有哪几种方式？"></a>创建线程池有哪几种方式？</h3><ol><li>可以直接使用构造方法进行创建</li><li>可以使用executor的框架工具类executors进行创建<ol><li>fixedThreadPool：该方法创建了一个固定线程数量的线程池。当任务线程进来之后，如果线程池有空闲，那么就执行该任务，如果线程池没有空闲，那么就会将任务存放到任务队列中</li><li>SingleThreadExecutor：该方法创建的是只有一个线程的线程池。若多余任务进来，那么就会将任务暂存到任务队列中，等线程池空闲之后，就将任务队列中的任务取出进行运行，这些任务的执行顺序遵循先进先出</li><li>CachedThreadPool：该任务创建了一个可以根据实际情况来改变线程数量的线程池。当多余任务进来时，如果线程池有空闲的线程就会复用空闲的线程，如果没有，那么就会新创建一个线程对当前任务进行执行</li></ol></li></ol><h3 id="线程池原理分析"><a href="#线程池原理分析" class="headerlink" title="线程池原理分析"></a>线程池原理分析</h3><p>​    线程池到底是依据什么原理进行运行的呢？</p><p>​        首先当有任务进来的时候，先判断核心线程数是否满了，如果没满那么就创建线程对任务进行执行，如果满了那么就加入任务队列，然后当任务不断进来的时候，核心线程数满了，这时候要考虑任务队列是否满了，如果任务队列没满，就将新任务先添加到任务队列中，如果满了就将核心线程数变成最大线程数，这时候，如果线程数足够使用，那么就创建线程对任务执行，如果不够用加进任务队列，如果队列也满了，那么就会根据定制的饱和策略进行处理。</p><h3 id="JUC中的原子类有哪几种？"><a href="#JUC中的原子类有哪几种？" class="headerlink" title="JUC中的原子类有哪几种？"></a>JUC中的原子类有哪几种？</h3><p>一共有四类</p><ol><li>基本类型<ul><li>AtomicInteger</li><li>AtomicLong</li><li>AtomicBoolean</li></ul></li><li>数组类型<ul><li>AtomicIntegerArray</li><li>AtomicLongArray</li><li>AtomicReferenceArray：引用类型数组原子类</li></ul></li><li>引用类型<ul><li>AtomicReference：引用类型</li><li>AtomicStampedReference：带有版本号的引用类型</li><li>AtomicMarkableReference：带有标记的引用类型</li></ul></li><li>对象属性修改类型<ul><li><code>AtomicIntegerFieldUpdater</code>：原子更新整形字段的更新器</li><li><code>AtomicLongFieldUpdater</code>：原子更新长整形字段的更新器</li><li><code>AtomicReferenceFieldUpdater</code>：原子更新引用类型字段的更新器</li></ul></li></ol><h3 id="JUC中Atomic原子类的总结"><a href="#JUC中Atomic原子类的总结" class="headerlink" title="JUC中Atomic原子类的总结"></a>JUC中Atomic原子类的总结</h3><h3 id="什么是AQS？"><a href="#什么是AQS？" class="headerlink" title="什么是AQS？"></a>什么是AQS？</h3><p>AQS是用来构建锁和同步器的框架</p><h3 id="AQS原理分析"><a href="#AQS原理分析" class="headerlink" title="AQS原理分析"></a>AQS原理分析</h3><p>AQS的核心思想就是，如果共享资源是空闲状态，那么就将当前请求资源的线程设置为有效工作线程。如果当前共享资源是被占有的状态，那么就会将这些获取不到锁的线程都加入到CLH队列中，这个队列有一套阻塞等待以及唤醒锁的机制。<strong>CLH</strong>队列是一个虚拟双向队列，这个队列遵从先进先出的原则。AQS使用原子操作，实现对值的修改。</p><h3 id="AQS对资源共享的方式"><a href="#AQS对资源共享的方式" class="headerlink" title="AQS对资源共享的方式"></a>AQS对资源共享的方式</h3><ol><li>Exclusive（独占）：只有一个线程能执行。这里分为两种情况：公平和非公平竞争</li><li>Share：可以多个线程同时执行</li></ol><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><h3 id="有哪几种类加载器"><a href="#有哪几种类加载器" class="headerlink" title="有哪几种类加载器"></a>有哪几种类加载器</h3><p><img src="D:\笔记\Typora\note\图片\image-20210924164846691.png" alt="image-20210924164846691"></p><h3 id="简单介绍一下程序计数器"><a href="#简单介绍一下程序计数器" class="headerlink" title="简单介绍一下程序计数器"></a>简单介绍一下程序计数器</h3><p>程序计数器是线程私有的，每个线程都有一个程序计数器，它是随着线程的创建而创建，随着线程的销毁而销毁</p><p>它有两个作用：</p><ol><li>字节码解释器通过改变程序计数器的值依次读取指令，从而实现代码的流程控制</li><li>在多线程情况下，记录上一次程序执行的地方，保证在上下文切换的时候可以回到上一次线程执行的位置。</li></ol><h3 id="简单说一下虚拟机栈和本地方法栈"><a href="#简单说一下虚拟机栈和本地方法栈" class="headerlink" title="简单说一下虚拟机栈和本地方法栈"></a>简单说一下虚拟机栈和本地方法栈</h3><p>它们俩都属于线程私有的，生命周期和线程也是相同的。</p><p>虚拟机栈主要是Java方法的运行，而本地方法栈主要是Native方法服务。虚拟机栈在运行方法的时候，都会有一个栈针对应这个方法，被压入方法栈中，带待所有方法都被执行完成的时候，就会一一弹出。每个栈针中都会存在局部变量表、操作数栈、方法出口、动态连接等信息。栈都会出现OOM和StackOverFlowError错误</p><h3 id="简单的说一下堆"><a href="#简单的说一下堆" class="headerlink" title="简单的说一下堆"></a>简单的说一下堆</h3><p>首先堆在1.8之前分为新生代、老年代和永久代，在1.8的时候就变成了新生代、老年代、元空间。而新生代又分为Eden区，Survivor区，survivor有两个区，一个是from 一个是to区。然后新生代是发生GC的频繁区域，而且它的大小大约占用整个新生区的三分之一。而且GC算法有四种：在新生区用的都是<strong>复制算法</strong>而在老年区用的都是<strong>标记清除</strong>和<strong>标记压缩算法</strong></p><p>经常发生的错误：OOM</p><ol><li>内存不足而出现的OOM</li><li>GC时间太长出现的OOM</li></ol><h3 id="简单说一下方法区"><a href="#简单说一下方法区" class="headerlink" title="简单说一下方法区"></a>简单说一下方法区</h3><p>主要用于存储已经被虚拟机加载的类信息、常量、静态变量，即时编译器编译后的数据</p><h4 id="方法区和永久代有什么区别？"><a href="#方法区和永久代有什么区别？" class="headerlink" title="方法区和永久代有什么区别？"></a>方法区和永久代有什么区别？</h4><p>永久代是方法区的一种实现</p><h3 id="为什么元空间替换永久代"><a href="#为什么元空间替换永久代" class="headerlink" title="为什么元空间替换永久代"></a>为什么元空间替换永久代</h3><p>因为之前的永久代都是需要自定义大小的，内存很受限制，很容易出现内存不足的异常，为了解决这个问题，直接将元空间代替永久带，并且移入本地内存区，这样不管是类的加载还是数据的存放，都只受本地内存的影响，并且很少出现内存异常</p><h3 id="空间分配担保"><a href="#空间分配担保" class="headerlink" title="空间分配担保"></a>空间分配担保</h3><p>什么是空间分配担保呢？？</p><p>​    首先在发生minorGc之前，虚拟机会检查老年代的剩余空间大小是否大于新生代的空间大小，如果成立那么就会进行一次minorGC，如果不成立那么就会判断虚拟机中的担保参数，如果设置了这个担保参数为ture，那么就会检查历代新生区中晋升对象的平均大小空间，如果小于老年代的剩余空间，那么就允许这次GC进行，如果小于那么就不允许这次的GC进行，而是进行FUllGC</p><h3 id="有哪几种垃圾收集器"><a href="#有哪几种垃圾收集器" class="headerlink" title="有哪几种垃圾收集器"></a>有哪几种垃圾收集器</h3><ol><li>serial（串行）收集器：这个串行收集器是一个单线程收集器，它的单线程不仅仅在于收集垃圾的时候使用的是一个线程进行的，而是在垃圾回收期间暂停其他所有的线程进行垃圾回收的<ul><li>优点：因为是单线程的垃圾收集器，它没有线程交互的额外开销，所以它是很高效的。</li></ul></li><li>ParNew收集器：这个收集器就是serial的多线程版本，其他都和serial是一致的</li><li>parallelScanvege收集器：这个收集器和ParNew没什么区别，主要的区别是这个收集器更注重于吞吐量的提升，可以自定义参数，最大效率的利用了cpu</li></ol><h3 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h3><ol><li>加载：加载第一步主要完成下面三件事<ol><li>通过类的全限定名来获取该类的二进制字节流</li><li>将这个字节流所代表的静态存储结构转换成方法区的运行时数据结构</li><li>在内存区生成一个代表此类的class对象，作为方法区这个类的各种数据访问入口</li></ol></li><li>连接<ol><li>验证<ol><li>文件格式验证：验证字节流是否符合class文件格式的规范（例如：魔数、版本、常量池。。。）</li><li>元数据验证：主要是对类的元数据进行语意校验，保证不存在与Java语言规范相悖的元数据信息</li><li>字节码验证：是最复杂的一个阶段，主要目的是通过数据流分析和控制流分析，确定程序语意是否合法、符合逻辑</li><li>符号引用验证：确保解析动作能够正确执行</li></ol></li><li>准备：这里的准备阶段就是将类的静态变量进行内存分配。这里进行内存分配的时候类变量都是初始值，而不是我们给定的值，只有在后面的初始化之后，才会加载给定的值</li><li>解析：这个阶段主要就是将常量池中的符号引用全部转换成直接饮用的过程，也就是得到类、字段、方法在内存中的地址或者偏移量</li></ol></li><li>初始化：虚拟机执行字节码操作</li><li>卸载<ol><li>该类的所有的实例对象都已被 GC，也就是说堆不存在该类的实例对象。</li><li>该类没有在其他任何地方被引用</li><li>该类的类加载器的实例已被 GC</li></ol></li></ol><h2 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h2><h3 id="何为索引？有什么作用"><a href="#何为索引？有什么作用" class="headerlink" title="何为索引？有什么作用"></a>何为索引？有什么作用</h3><p>索引是一种快速查询和检索的数据结构。常见的索引结构：B树，B+树和hash</p><p>索引通俗易懂的解释：其实索引就相当于一本书的目录一样，有了索引我们就可以根据目录快速查询我们想看的数据，不然全面扫描会很慢</p><h3 id="索引的优缺点"><a href="#索引的优缺点" class="headerlink" title="索引的优缺点"></a>索引的优缺点</h3><ul><li><p>优点</p><ul><li>使用检索可以大大的提升查询速度，这也是创建索引的最主要原因</li><li>通过创建唯一索引，可以保证数据库中的每一行数据的唯一性</li></ul></li><li><p>缺点</p><ul><li>创建索引和维护索引需要耗费很多时间。</li><li>增删改的时候，如果数据有索引，那么就会在操作的时候索引也需要动态修改，这样会降低sql的效率</li><li>索引需要物理空间的存储，这样也会耗费一些资源</li></ul></li></ul><p>问题：索引一定可以提高查询性能吗？</p><p>​                大多数情况下索引比全盘扫描的效率是更高的，但是如果数据库的数据量不是很大的话，那么查询效率也不会提高太多，反而会增加创建索引维护索引带来的资源消耗。</p><h3 id="索引的底层数据结构"><a href="#索引的底层数据结构" class="headerlink" title="索引的底层数据结构"></a>索引的底层数据结构</h3><h4 id="hash表-amp-b-树"><a href="#hash表-amp-b-树" class="headerlink" title="hash表&amp;b+树"></a>hash表&amp;b+树</h4><p>因为hash表中存储的数据都是以键值对的格式，所以通过hash算法，我们可以很容易通过键来获取相应的value。但是同样的也存在hash冲突的问题，解决hash冲突的问题就是通过链地址的方法。</p><p>问题：既然hash索引的这么快，为什么MySQL不使用hash作为索引的数据结构呢？</p><ol><li>首先是因为hash冲突的原因，但是这不是根本原因</li><li>根本原因是：Hash索引不支持顺序和范围查询（例如：我们要对数据库的数据进行排序或者范围查询，那么将是很大的问题）</li></ol><h4 id="B树-amp-B-树"><a href="#B树-amp-B-树" class="headerlink" title="B树&amp;B+树"></a>B树&amp;B+树</h4><p>问题：它们俩有什么异同点？</p><ul><li>b树的所有节点都存放键也存放data，但是b+树只在叶子节点存放key和data，其他的节点都只存放key。</li><li>b树的叶子节点都是独立的，但是b+树的叶子节点都有一条引用链指向相邻的叶子节点</li><li>b树的检索对范围内所有的节点的关键字都做二分查找，而b+树则是从根节点到叶子节点依次进行检索</li></ul><h3 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h3><h4 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h4><p>数据表中主键使用的就是主键索引</p><h4 id="二级索引"><a href="#二级索引" class="headerlink" title="二级索引"></a>二级索引</h4><p>定义：二级索引称为辅助索引，因为其叶子节点存储的数据是主键，我们可以通过二级索引来定义主键的位置</p><ol><li>唯一索引：唯一索引也是一种约束。唯一索引的属性列不能出现重复的数据，但是允许值为null，一张表可以创建多个唯一索引。建立唯一索引一般不是为了查询效率，而是保证数据的唯一性</li><li>普通索引：普通索引唯一作用就是提高查询速度，一张表中允许创建多个普通索引，并且允许数据重复和null</li><li>前缀索引：前缀索引只适用于字符类型的数据，前缀索引对文本的前几个字符创建索引，相比普通索引它的数据更小</li><li>全文索引：全文检索主要是检索大文件数据中的关键字</li></ol><h3 id="聚集索引和非聚集索引"><a href="#聚集索引和非聚集索引" class="headerlink" title="聚集索引和非聚集索引"></a>聚集索引和非聚集索引</h3><h4 id="聚集索引"><a href="#聚集索引" class="headerlink" title="聚集索引"></a>聚集索引</h4><p>索引结构和数据存放在一起的叫聚集索引，主键索引叫聚集索引</p><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><p>聚集索引的查询速度非常快</p><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ol><li>依赖有顺序的数据：因为B+树是多路平衡树，如果索引的数据不是有序的，那么在插入的时候就会进行排序，如果这个排序的是整型还好，如果不是整形像是字符串或者UUID之类的，排序比较难，这样在插入和查询到时候效率会大打折扣</li><li>更新代价大：因为如果数据修改的时候会影响到索引的修改，因为聚集索引的数据和索引都存在一起，修改的代价很大，所以一般主键索引都不允许修改主键</li></ol><h4 id="非聚集索引"><a href="#非聚集索引" class="headerlink" title="非聚集索引"></a>非聚集索引</h4><p>非聚集索引就是索引的数据和索引是分开存放的</p><p>二级索引属于非聚集索引</p><h5 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h5><p>更新代价小于聚集索引，因为它的节点没有存放数据</p><h5 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h5><ol><li>依赖有序的数据（和聚集索引一样）</li><li>可能会二次查询（最大的缺点）：当找到索引所对应的指针或者主键后，可能会根据指针或者主键再进行一次查询</li></ol><h3 id="创建索引需要注意的事项"><a href="#创建索引需要注意的事项" class="headerlink" title="创建索引需要注意的事项"></a>创建索引需要注意的事项</h3><ol><li>选择合适的字段创建索引</li><li>被频繁更新的字段应该谨慎建索引</li><li>尽可能建立联合索引而不是单列索引</li><li>避免冗余索引</li><li>考虑在字符串类型上使用前缀索引代替普通索引</li></ol><h3 id="Innodb和MyiSAM对比"><a href="#Innodb和MyiSAM对比" class="headerlink" title="Innodb和MyiSAM对比"></a>Innodb和MyiSAM对比</h3><ol><li>Innodb支持行锁和表锁   MYISAM只支持表锁</li><li>Innodb支持事务   MYISAM不支持事务</li><li>Innodb支持外键   MYISAM不支持外键</li><li>Innodb支持数据恢复   MYISAM不支持系统崩溃后的数据恢复</li></ol><h3 id="Mysql-Innodb是怎样实现ACID的"><a href="#Mysql-Innodb是怎样实现ACID的" class="headerlink" title="Mysql Innodb是怎样实现ACID的"></a>Mysql Innodb是怎样实现ACID的</h3><ol><li>Innodb使用redo log 来保证事务的持久性 </li><li>Innodb使用undo log 来保证事务的原子性</li><li>Innodb使用锁机制、MVCC 来保证事务的隔离性</li><li>保证了以上的事务性质，才能保证一致性</li></ol><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><h4 id="并发事务会存在哪些问题"><a href="#并发事务会存在哪些问题" class="headerlink" title="并发事务会存在哪些问题"></a>并发事务会存在哪些问题</h4><ol><li>脏读：当一个事务对数据进行修改的时候，这个数据还没有进行提交，但是另外一个事务又过来了，它查询得到的数据是没有提交的脏数据，这时候就发生了脏读的情况</li><li>丢失修改：意思就是当两个事务同时查询了一个数据，然后同时要对这个数据进行修改，但是后面的修改就会覆盖前面的修改，这就叫丢失修改</li><li>不可重复读：也比喻是两个事务，第一个事务读取到了数据之后，第二个事务也读取到了数据，这时候第二个事务对数据进行了修改，然后第一个事务发现前后得到的数据不一致，这种情况就是不可重读读</li><li>幻读：比喻两个事务，第一个事务读取了几条数据之后，第二个事务对数据进行了增加或者删除，这时候第一个事务发现前后得到的数据不一致，这个就叫幻读</li></ol><ul><li><p>不可重复读和幻读的区别：</p><p>不可重复读针对的是修改前后的数据，而幻读针对的是增加或者删除前后的数据</p></li></ul><h4 id="事务隔离级别有哪些？"><a href="#事务隔离级别有哪些？" class="headerlink" title="事务隔离级别有哪些？"></a>事务隔离级别有哪些？</h4><ol><li>读取未提交</li><li>读取已提交</li><li>可重复读</li><li>可串行化</li></ol><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><h3 id="简单介绍一下redis"><a href="#简单介绍一下redis" class="headerlink" title="简单介绍一下redis"></a>简单介绍一下redis</h3><p>​    redis是c语言开发的数据库，它与别的数据库不同的是它的数据是存在内存中的，所以读写是非常快的，因此它经常用于缓存、分布式锁甚至是消息队列。</p><h2 id="Spring框架"><a href="#Spring框架" class="headerlink" title="Spring框架"></a>Spring框架</h2><ul><li>spring的模块有七种：</li></ul><p><img src="D:\笔记\Typora\note\图片\image-20211023102751258.png" alt="image-20211023102751258"></p><h3 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h3><ul><li><p>什么是IOC？</p><p>IOC（控制反转），是一种设计思想，DI（依赖注入）是IOC的一种实现方法，之前是手动创建对象，由程序自己控制，现在是将对象的创建交给IOC容器来控制</p></li><li><p>使用IOC有什么好处呢？</p><p>解耦，使对象之间的耦合关系变低</p><p>使用单例模式，减少内存开销，提高性能</p><p>只用去写Bean的实现，而不用具体去创建Bean的实现</p></li><li><p>什么是依赖注入？<br>依赖注入是IOC的一种实现方式</p></li><li><p>依赖注入的方式有哪几种？<br>三种方式：</p><ul><li>接口注入</li><li>setter方法注入</li><li>构造器注入</li></ul></li><li><p>IOC装配Bean的方式有哪几种？</p><ul><li>XML配置文件</li><li>Java类<ul><li>@Configuration</li></ul></li><li>注解<ul><li>@Autowire</li><li>@Primary（首选注入bean）</li><li>@Qualifier（按指定的bean名称进行注入）</li></ul></li></ul></li><li><p>IOC的作用域</p><ul><li>Singleton（单例）</li><li>prototype（多例）：对象如果有多个状态，那么就是用多例</li><li>request</li><li>session</li><li>global session</li></ul></li><li><p>IOC的初始化过程</p><p><img src="D:\笔记\Typora\note\图片\image-20211022103840462.png" alt="image-20211022103840462"></p></li><li><p>IOC怎么实现对象的创建和依赖管理<br><img src="D:\笔记\Typora\note\图片\image-20211022142345255.png" alt="image-20211022142345255"></p><p>首先从加载Bean的配置信息到容器中，然后创建一个Bean定义的注册表，通过这个注册表实例化Bean，然后将实例化的Bean添加到Map缓存区中，供应用程序调用</p></li><li><p>Spring容器可以简单分成两种</p><ul><li>BeanFactory：面向Spring</li><li>ApplicationContext：面向使用者（主要包含一下两种常用的实现类）<ul><li>ClasspathXmlApplicationContext</li><li>FileSystemXmlApplicationContext</li><li>WebApplicationContext（主要用于Web应用）</li></ul></li></ul></li><li><p>Bean的生命周期<br><img src="D:\笔记\Typora\note\图片\image-20211022153911436.png" alt="image-20211022153911436"></p><p>大致可以分为：</p><ul><li>实例化Bean：Ioc容器通过获取BeanDefinition对象中的信息进行实例化，实例化对象被包装在BeanWrapper对象中</li><li>设置对象属性（DI）：通过BeanWrapper提供的设置属性的接口完成属性依赖注入；</li><li>注入Aware接口（BeanFactoryAware， 可以用这个方式来获取其它 Bean，ApplicationContextAware）：Spring会检测该对象是否实现了xxxAware接口，并将相关的xxxAware实例注入给bean</li><li>BeanPostProcessor：自定义的处理（分前置处理和后置处理）</li><li>InitializingBean和init-method：执行我们自己定义的初始化方法</li><li>使用</li><li>destroy：bean的销毁</li></ul></li></ul><h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><ul><li><p>什么是AOP？<br>AOP就是面向切面编程，主要使用动态代理的方式实现，将相同逻辑的重复代码横向抽取出来，使用动态代理技术将这些重复代码织入到目标对象方法中，实现和原来一样的功能。</p></li><li><p>为什么使用AOP？</p><p>减少相同代码的冗余度，提高代码的可维护性</p></li><li><p>怎么使用AOP？</p><ul><li>配置切面</li><li>配置切入点</li><li>配置切入表达式</li></ul></li><li><p>代理能干嘛？</p><p>增强对象的行为，在调用对象方法的时候，拦截方法，对方法进行改造增强</p></li><li><p>什么是静态代理？什么是动态代理？它们有什么区别?</p><ul><li>静态代理：由程序员创建或者工具生成代理类，也就是在程序运行之前，就已经确定了代理类和委托类之间的关系<ul><li>优点：业务类只需要关注业务逻辑的本身。</li><li>缺点<ol><li>代理对象一个接口只服务于一种类型对象，如果接口方法过多，还需要对每个方法进行代理，多了很多繁琐的业务</li><li>如果接口增加了方法，那么下面实现接口的所有代理类都会将这个方法进行重写，增加代码维护难度</li></ol></li></ul></li><li>动态代理：在程序运行期间，由JVM通过反射等机制动态生成，代理类和委托类是在运行期间确定关系的<ul><li>优点：可以灵活的实现接口中的方法，而不是像静态代理一样全部都实现</li></ul></li></ul></li><li><p>Aop的动态代理有那些方式？</p><ul><li><p>JDK动态代理</p></li><li><p>Cglib动态代理</p><p>AOP默认使用的是JDK动态代理，如果代理对象没有实现的接口那么就使用Cglib进行代理</p></li></ul></li><li><p>JDK和Cglib这两种方式有什么区别？</p><p>JDK是基于接口进行代理的，而Cglib是基于父类进行代理的，如果被代理的对象没有实现的接口，那么就需要使用Cglib进行代理</p></li><li><p>怎么选择JDK和Cglib这两种代理，原因是什么？</p><ul><li>如果是单例模式就使用Cglib，如果是多例模式就使用JDK</li><li>原因：JDK创建对象的性能比Cglib高，而Cglib生成代理对象的性能比JDK高</li></ul></li><li><p>Spring中AOP有哪几种实现方式？</p><ul><li>基于注解的方式@AspctJ</li><li>基于代理（自定义代码进行实现）</li><li>使用XML进行实现（POJO）</li></ul></li></ul><h3 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h3><ul><li><p>SpringMVC原理是什么？</p><p>简单原理：</p><p><img src="D:\笔记\Typora\note\图片\image-20211023091518741.png" alt="image-20211023091518741"></p><p>详细原理：</p><p><img src="D:\笔记\Typora\note\图片\image-20211023091707882.png" alt="image-20211023091707882"></p><p>流程讲解：</p><ul><li>首先用户发送请求，然后请求进入到DispatcherServlet</li><li>DispatcherServlet根据请求信息从HandlerMapping中找到对应的handler</li><li>找到之后，然后再请求handler适配器进行处理</li><li>handler适配器根据传过来的handler进行请求的处理</li><li>处理完成之后就会返回一个ModelAndView对象</li><li>View resolver会根据返回的ModelAndView中的View信息进行解析，并返回对应的View</li><li>然后将返回的Model数据添加进View中，进行视图渲染</li><li>最后返回给浏览器</li></ul></li></ul><h3 id="循环依赖"><a href="#循环依赖" class="headerlink" title="循环依赖"></a>循环依赖</h3><p>什么是循环依赖？怎么解决循环依赖呢？<br>循环依赖就是比如有两个对象A和B，它们之间互相引用形成一个环，这样的情况叫做循环依赖</p><ul><li><p>怎么解决呢？<br>如果是通过构造器方式进行对象注入，那么是无法解决的，会直接报错，如果是setter方法进行注入的，那么就可以解决</p><ul><li><p>为什么通过构造器创建对象就不能解决循环依赖呢？</p><p>因为Spring解决循环依赖是依靠Bean的中间态进行解决的，中间态指的就是，对象已经实例化，但是还没有初始化。而构造器是直接初始化了，所以无法解决。</p></li></ul><p>Spring采用三级缓存的方式进行处理循环依赖问题。</p></li></ul><h3 id="spring中使用了哪些设计模式"><a href="#spring中使用了哪些设计模式" class="headerlink" title="spring中使用了哪些设计模式"></a>spring中使用了哪些设计模式</h3><ul><li>工厂模式：spring中的BeanFactory就是简单工厂模式的体现，根据传入唯一的标识来获得bean对象；</li><li>单例模式：提供了全局的访问点BeanFactory；</li><li>代理模式：AOP功能的原理就使用代理模式（1、JDK动态代理。2、CGLib字节码生成技术代理。）</li><li>装饰器模式：依赖注入就需要使用BeanWrapper；</li><li>观察者模式：spring中Observer模式常用的地方是listener的实现。如ApplicationListener。</li><li>策略模式：Bean的实例化的时候决定采用何种方式初始化bean实例（反射或者CGLIB动态字节码生成）</li></ul><h3 id="面试问题"><a href="#面试问题" class="headerlink" title="面试问题"></a>面试问题</h3><ul><li><p>Spring的事务的特性是什么？<br>ACID</p><ul><li>Atomicity：原子性</li><li>Consistency：一致性</li><li>Isolation：隔离性</li><li>Isolation：持久性</li></ul></li><li><p>事务的传播行为有哪些？</p><p>七种行为：</p><p>支持当前事务的情况：</p><ul><li>propagation_requierd：如果当前没有事务，就创建一个事务，如果当前已经存在一个事务，那么就加入到这个事务中</li><li>propagation_supports：支持当前事务，如果当前没有事务，就以非事务方法执行</li><li>propagation_mandatory：使用当前事务，如果没有就抛出异常</li></ul><p>不支持当前事务的情况：</p><ul><li>propagation_required_new：新建事务，如果当前存在事务，就将当前事务挂起</li><li>propagation_not_supported：以非事务方式执行，如果当前存在事务，就将当前事务挂起</li><li>propagation_never：以非事务方式执行，如果当前存在事务那么抛出异常</li></ul><p>特殊情况：</p><ul><li>propagation_nested：如果当前存在事务就嵌入到该事务中，如果没有就执行require一样的操作</li></ul></li><li><p>事务的隔离级别</p><ul><li>读未提交</li><li>读已提交</li><li>可重复读</li><li>串行化</li></ul></li><li><p>如果不设置事务，会出现哪些问题</p><ul><li>脏读</li><li>不可重复读</li><li>幻读</li></ul></li></ul><h2 id="Mybatis框架"><a href="#Mybatis框架" class="headerlink" title="Mybatis框架"></a>Mybatis框架</h2><p><strong>架构图</strong></p><p><img src="D:\笔记\Typora\note\图片\image-20211024205336743.png" alt="image-20211024205336743"></p><ul><li><p>什么是JDBC<br>Java DataBase Connection，意思就是使用Java语言操作数据库</p></li><li><p>什么是ORM<br>ORM就是持久层，意思就是将数据存储到硬盘</p></li><li><p>什么是Mybatis<br>就是优秀的ORM框架</p></li><li><p>Mybatis和JDBC什么关系</p></li></ul><h2 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h2><p>什么是BIO、NIO、AIO？</p><ul><li>BIO：同步阻塞I/O模式，保证读写都是又一个线程来完成的，在不高的并发量下是没有问题的，但是如果是百万级并发量，那么BIO会显得很无力</li><li>NIO：同步非阻塞I/O模式，这个相较于传统的BIO就有了很大的提升，主要是它支持面向缓冲，基于通道的I/O实现方式，可以适用于高并发的情景</li><li>AIO：异步非阻塞I/O模式，这种模式主要是有回调机制的实现，在应用操作之后就会直接返回给用户信息，然后后台再通知相应的线程完成剩余的事情。</li></ul><p>什么是Netty？</p><ol><li>Netty是基于NIO的一种客户端服务器的框架</li><li>它极大的优化了TCP和UDP套接字服务器的性能，并且安全性也有很高的提升</li><li>支持多种协议（FTP、HTTP、SMTP）</li></ol><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><ol><li><p>什么是面向对象？</p><p>面向对象就是我们在设计任何东西的时候，都是以角色进行划分的，而不是关心其过程，如果关心其过程那么就是面向过程编程。面向对象易于维护、复用和扩展。</p><p>面向对象的三大特性：封装、继承、多态</p></li><li><p>如何选用集合？</p><ul><li><p>如果我们要通过键值来获取数据的时候那么就选用map</p><ul><li>如果需要排序就选择TreeMap</li><li>如果不需要排序就选择HashMap</li><li>如果需要保证线程安全就选择ConcurrentHashMap</li></ul></li><li><p>如果我们只存储元素值的时候就选择Collection集合</p><ul><li>如果保证元素唯一就选择Set</li><li>不需要就选择Arraylist或者LinkedList</li></ul></li></ul></li><li><p>为什么要使用集合？ </p><p>因为如果在实际开发中使用数组会有很多的局限性，比如数组一旦定义，那么长度和类型就不能改变，而且存储的类型是可重复、单一的，因此选择集合就能充分解决上述所有的问题，集合是非常灵活多变的。</p></li><li><p>ArrayList和Vector有什么区别？</p><p>他们底层都是用数组实现的，但是ArrayList线程不安全，而Vector线程安全</p></li><li><p>ArrayList和LinkedList的区别</p><ol><li><p>它们都是不同步的，也就是它们线程都是不安全的</p></li><li><p>底层数据结构不同，ArrayList的底层数据结构是数组，而LinkedList底层数据结构是双向链表，在1.6之前是循环链表</p></li><li><p>插入和删除：</p><p>ArrayList因为底层数据结构是数组，所以在查找元素的时候很快，但是在插入和删除元素的时候，复杂度为O（n-i）；LinkedList底层数据结构是双向链表，双向链表对于头尾插入和删除都是非常方便的，但是如果对一个指定的位置进行插入和删除，那么时间复杂度就为O（n）</p></li><li><p>是否支持快速访问</p><p>ArrayList支持快速访问，LinedList不支持</p></li><li><p>内存空间占用</p><p>ArrayList的空间浪费，就是List的初始化都会预留一定的空间；而LinkedList的空间浪费是在存储每一个节点的时候，会有多出的空间来存储这个节点的指针。</p></li></ol></li><li><p>无序性和不可重复性的含义：</p><p>无序性：意思就是存储在底层的数据结构不是按数组索引存储的，而是按照哈希值决定的</p><p>不可重复性：不可重复的意思就是指添加元素是按equals进行判断的，并且判断结果为false才进行存储，需要同时重写equals和hashcode方法</p></li><li><p>比较HashSet、LinkedHashSet、TreeSet的异同</p><ul><li>HashSet是Set的实现类，HashSet底层是HashMap，线程不安全，可以存储null值</li><li>LinkedHashSet是HashSet的子类，可以按照添加顺序进行遍历</li><li>TreeSet底层是红黑树，元素是有序的，排序的方法有自然排序和定制排序</li></ul></li><li><p>Queue和Deque的区别</p><ul><li>Queue：<ul><li>是单端队列，只能从一端插入元素，另一端删除元素，遵循先进先出原则</li><li>Queue扩展了Collection接口因容量问题而导致操作失败后处理问题的方式不同：<ul><li>操作失败后抛出异常</li><li>返回特殊值</li></ul></li></ul></li><li>Deque<ul><li>Deque是双端队列，可以在两端进行插入和删除</li><li>Deque扩展了Queue接口，增加了在队头队尾的增加和删除功能，失败后处理的方式不同，分为两类：抛出异常、返回特殊值</li></ul></li><li>ArrayDeque和LinkdeList的区别：它们都实现了Deque，都具有队列功能，但是有什么区别呢？<ul><li>ArrayDeque是通过可变长的数组和双指针实现的，而LinkedList是通过链表实现的</li><li>ArrayQueue不支持存储null值，而LinkedList支持</li><li>ArrayQueue是在1.6引入的，而LinkedList是1.2就已经引入了</li><li>ArrayDeque插入时可能就存在扩容，但是均摊后，插入的时间依然为O(1)，LinkedList虽然不存在扩容，但是每插入一个都需要申请新的存储空间，均摊性比较差</li></ul></li></ul></li><li><p>HashMap和HashTable的区别</p><ol><li>HashMap的线程是不安全的，而HashTable是线程安全的，因为HashTable方法基本都经过了synchronized修饰，如果要保证线程安全，那么可以使用ConcurrentHashMap</li><li>HashMap的效率比HashTable的效率，而且HashTable现在几乎不用了</li><li>HashMap可以存储null值和null键，但是HashTable不行，如果插入则会报空指针异常</li><li>如果没有指定容量的默认值，那么HashMap的默认容量是16，而HashTable的容量是11，而且每次扩容HashMap都是原有的两倍，而HashTable是原来的2n+1。</li><li>底层数据结构：HashMap在1.8以后有很大的改动，首先是扩容机制，之前的扩容就是数组的扩容，但是1。8之后，首先是判断数组的长度是否＜64，如果＜那么就会先将数组扩容，而不是将链表变成红黑树，如果数组长度大于64，而且链表的长度大于8，那么就会将链表转换成红黑树</li></ol></li><li><p>HashMap和HashSet的区别</p><ol><li>HashMap实现了Map接口，HashSet实现了Set接口</li><li>HashMap存储的是键值对，HashSet存储的是对象</li><li>HashMap调用put进行添加，HashSet调用add进行添加</li><li>HashMap的hashcode是通过键来计算的，HashSet是通过对象进行计算的，如果两个对象的hashCode值一样，那么就会进行equals判断</li></ol></li><li><p>HashMap和TreeMap的区别</p><p>TreeMap主要是多了对集合中元素的排序功能和对元素的搜索功能</p></li><li><p>HashMap常见的遍历方式有哪几种？</p><ol><li><p>使用iterator EntrySet进行遍历</p></li><li><p>使用iterator KeySet进行遍历</p></li><li><p>使用for each EntrySet进行遍历</p></li><li><p>使用for each KeySet进行遍历</p></li><li><p>使用Lambda表达式进行遍历</p></li><li><p>使用Streams API 单线程方式遍历</p></li><li><p>使用Streams API多线程方式遍历</p><p>性能比较：EntrySet最快，KeySet最慢</p><p>删除数据的安全性：用map.remove()是不安全的，用iterator.remove()是安全的，</p><p>总结：不管是遍历还是删除数据，建议都使用Iterator的EntrySet来操作</p></li></ol></li><li><p>ConcurrentHashMap和HashTable的区别</p><p>主要的区别：实现线程的安全的方式不同</p><ul><li>ConcurrentHashMap的数据结构1.7是分段数组+链表，1.8是数组+链表+红黑树；HashTable的底层数据结构数组+链表</li><li>ConcurrentHashMap在1.7的时候，它使用的锁是分段式锁，也就是将数据分开进行加锁，这样做在高并发下就不会因为抢占一把锁而造成阻塞，从而提高并发的效率；在1.8的时候使用的是synchronized+CAS来实现锁；HashTable使用的加锁机制是synchronized，同一把锁，这样加锁确实可以保证线程的安全，但是效率非常低，当同时访问一个同步方法的时候，可能会造成阻塞或者轮询，效率大打折扣。</li></ul></li><li><p>ConcurrentHashMap线程安全底层的具体实现</p><ul><li>在1.7的时候，因为它的底层数据结构是分段数组+链表进行实现的，这个分段数组相当于HashMap里面的数组，里面包含链表，也就是HashEntry，每个分段数组守护着一个链表，当我们对HashEntry里面的数据进行修改的时候，就必须先获取分段锁。</li><li>在1.8的时候，因为它的底层数据结构变成了数组+链表+红黑树，取消了分段锁，使用的是synchronized和CAS对链表的头结点进行加锁，因为只要hash不冲突，那么就不会产生并发。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络的组成</title>
      <link href="/2021/11/16/ji-suan-ji-wang-luo-de-zu-cheng/"/>
      <url>/2021/11/16/ji-suan-ji-wang-luo-de-zu-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络的组成"><a href="#计算机网络的组成" class="headerlink" title="计算机网络的组成"></a>计算机网络的组成</h1><p><img src="D:\笔记\Typora\note\图片\image-20211102191506179.png" alt="image-20211102191506179"></p><h1 id="计算机网络的分类"><a href="#计算机网络的分类" class="headerlink" title="计算机网络的分类"></a>计算机网络的分类</h1><p><img src="D:\笔记\Typora\note\图片\image-20211102192038977.png" alt="image-20211102192038977"></p><h1 id="OSI七层模型"><a href="#OSI七层模型" class="headerlink" title="OSI七层模型"></a>OSI七层模型</h1><p><img src="https://img-blog.csdn.net/20170704164137407?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvU0NVX0NpbmR5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"></p><ul><li>物理层<ul><li>作用：该层为上层协议提供了一个传输数据的物理媒体</li><li>协议：EIA/TIA RS-232、EIA/TIA RS-449、V.35、RJ-45</li></ul></li><li>数据链路层<ul><li>作用：数据链路层在不可靠的物理介质上提供可靠的传输。该层的作用包括：物理地址寻址、数据的成帧、流量控制、数据的检错、重发等。</li><li>协议：ARP、RARP、MAC、SDLC、HDLC、PPP、STP、帧中继等</li></ul></li><li>网络层<ul><li>作用：网络层负责对子网间的数据包进行路由选择。网络层还可以实现拥塞控制、网际互连等功能。</li><li>协议：ARP、RARP、IP、IPX、RIP、OSPF等</li></ul></li><li>传输层<ul><li>作用：传输层是第一个端到端，即主机到主机的层次。传输层负责将上层数据分段并提供端到端的、可靠的或不可靠的传输。此外，传输层还要处理端到端的<strong>差错控制和流量控制</strong>问题。</li><li>协议：TCP、UDP、SPX等。</li></ul></li><li>会话层<ul><li>作用：会话层管理主机之间的会话进程，即负责建立、管理、终止进程之间的会话。会话层还利用在数据中插入校验点来实现数据的同步。</li><li>协议：RPC、SQL、NFS 、X WINDOWS、ASP</li></ul></li><li>表示层<ul><li>作用：表示层对上层数据或信息进行变换以保证一个主机应用层信息可以被另一个主机的应用程序理解。表示层的数据转换包括数据的加密、压缩、格式转换等。</li><li>协议：ASCII、PICT、TIFF、JPEG、 MIDI、MPEG</li></ul></li><li>应用层<ul><li>作用：应用层为操作系统或网络应用程序提供访问网络服务的接口。</li><li>协议：万维网、HTTP、FTP、SMTP</li></ul></li></ul><h1 id="你知道的协议"><a href="#你知道的协议" class="headerlink" title="你知道的协议"></a>你知道的协议</h1><h2 id="TCP-UDP"><a href="#TCP-UDP" class="headerlink" title="TCP/UDP"></a>TCP/UDP</h2><ul><li><strong>TCP/UDP是什么？</strong><br>TCP — Transmission Control Protocol，传输控制协议。<br>UDP — User Data Protocol，用户数据报协议。</li></ul><h3 id="TCP-UDP的区别（优缺点）？"><a href="#TCP-UDP的区别（优缺点）？" class="headerlink" title="TCP/UDP的区别（优缺点）？"></a>TCP/UDP的区别（优缺点）？</h3><p><img src="https://pic3.zhimg.com/v2-0a749b8af6d8facd140874859b681ef6_r.jpg" alt="preview"></p><p>​    <img src="https://pic1.zhimg.com/v2-06bdd52997add27938607b33edea4068_r.jpg" alt="preview"></p><p>(1)、TCP是面向连接的，UDP是面向无连接的。TCP在通信之前必须通过三次握手机制与对方建立连接，而UDP通信不必与对方建立连接，不管对方的状态就直接把数据发送给对方<br>(2)、TCP连接过程耗时，UDP不耗时<br>(3)、TCP连接过程中出现的延时增加了被攻击的可能，安全性不高，而UDP不需要连接，安全性较高<br>(4)、TCP是可靠的，保证数据传输的正确性，不易丢包;UDP是不可靠的，易丢包<br>(5)、tcp传输速率较慢，实时性差，udp传输速率较快。tcp建立连接需要耗时，并且tcp首部信息太多，每次传输的有用信息较少，实时性差。<br>(6)、tcp是流模式，udp是数据包模式。tcp只要不超过缓冲区的大小就可以连续发送数据到缓冲区上，接收端只要缓冲区上有数据就可以读取，可以一次读取多个数据包，而udp一次只能读取一个数据包，数据包之间独立</p><h3 id="TCP三次握手过程"><a href="#TCP三次握手过程" class="headerlink" title="TCP三次握手过程"></a><strong>TCP三次握手过程</strong></h3><p><strong>STEP 1</strong>：主机A通过向主机B发送一个含有同步序列号的标志位的数据段给主机B，向主机B请求建立连接,通过这个数据段，主机A告诉主机B两件事:我想要和你通信；你可以用哪个序列号作为起始数据段来回应我。<br><strong>STEP 2</strong>：主机B收到主机A的请求后,用一个带有确认应答(ACK)和同步序列号(SYN)标志位的数据段响应主机A，也告诉主机A两件事：我已经收到你的请求了，你可以传输数据了；你要用哪佧序列号作为起始数据段来回应我。<br><strong>STEP 3</strong>：主机A收到这个数据段后，再发送一个确认应答，确认已收到主机B的数据段：”我已收到回复，我现在要开始传输实际数据了。这样3次握手就完成了，主机A和主机B就可以传输数据了。</p><p><img src="https://pic2.zhimg.com/v2-33aa25d94114f0d1f9065b1d806f56e5_r.jpg" alt="preview"></p><p><strong>为什么需要三次握手？</strong></p><p>我们假设client发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。</p><p>本来这是一个早已失效的报文段。但server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求。于是就向client发出确认报文段，同意建立连接。</p><p>假设不采用“三次握手”，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的运输连接已经建立，并一直等待client发来数据。这样，server的很多资源就白白浪费掉了。</p><p>所以，采用“三次握手”的办法可以防止上述现象发生。例如刚才那种情况，client不会向server的确认发出确认。server由于收不到确认，就知道client并没有要求建立连接。</p><h3 id="TCP四次挥手过程"><a href="#TCP四次挥手过程" class="headerlink" title="TCP四次挥手过程"></a>TCP四次挥手过程</h3><p>当 TCP 数据段的传输结束时，双方都需要发送 FIN 段和 ACK 段来终止 TCP 会话。这个方式叫做<strong>四次挥手</strong>，详细过程如下：</p><ol><li>主机 A 想要终止连接，发送序列号为 p 的段，FIN 置位，表示 FIN 管理段。</li><li>主机 B 收到主机 A 发送的 FIN 段后，发送 ACK 段，确认号为 p + 1 ，同时关闭连接。</li><li>主机 B 发送序列号为 q的段，FIN 置位，通知连接关闭。</li><li>主机 A 收到主机 B 发送的 FIN 段后，发送 ACK 段，确认号为 q + 1 ，同时关闭连接。TCP 连接至此结束。</li></ol><p><img src="https://pic4.zhimg.com/80/v2-d2f656340118d2530ad6904b01402de7_1440w.jpg" alt="img"></p><ul><li><p><strong>注意</strong><br>此时需要注意的是，<strong>TCP建立连接要进行3次握手，而断开连接要进行4次</strong>。</p></li><li><p><strong>名词解释</strong><br><strong>ACK</strong>：TCP报头的控制位之一，对数据进行确认，确认由目的端发出，用它来告诉发送端这个序列号之前的数据段都收到了。比如，确认号为X，则表示前X-1个数据段都收到了，只有当ACK=1时，确认号才有效，当ACK=0时，确认号无效，这时会要求重传数据，保证数据的完整性。<br><strong>SYN</strong>：同步序列号，TCP建立连接时将这个位置1。<br><strong>FIN</strong> ：发送端完成发送任务位，当TCP完成数据传输需要断开时，提出断开连接的一方将这位置1。</p></li><li><p><strong>为什么连接的时候是三次握手，关闭的时候却是四次握手？</strong></p><p>建立连接时因为当Server端收到Client端的SYN连接请求报文后，可以直接发送<strong>SYN+ACK</strong>报文。其中ACK报文是用来应答的，SYN报文是用来同步的。所以建立连接只需要三次握手。</p><p>由于TCP协议是一种面向连接的、可靠的、基于字节流的运输层通信协议，TCP是<strong>全双工模式</strong>。<br>这就意味着，关闭连接时，当Client端发出FIN报文段时，只是表示Client端告诉Server端数据已经发送完毕了。当Server端收到FIN报文并返回ACK报文段，表示它已经知道Client端没有数据发送了，但是Server端还是可以发送数据到Client端的，所以Server很可能并不会立即关闭SOCKET，直到Server端把数据也发送完毕。<br>当Server端也发送了FIN报文段时，这个时候就表示Server端也没有数据要发送了，就会告诉Client端，我也没有数据要发送了，之后彼此就会愉快的中断这次TCP连接。</p></li><li><p><strong>为什么要等待2MSL？</strong></p><p><strong>MSL</strong>：报文段最大生存时间，它是任何报文段被丢弃前在网络内的最长时间。<br>有以下两个原因：</p><ul><li><strong>第一点：保证TCP协议的全双工连接能够可靠关闭</strong>：<br>由于IP协议的不可靠性或者是其它网络原因，导致了Server端没有收到Client端的ACK报文，那么Server端就会在超时之后重新发送FIN，如果此时Client端的连接已经关闭处于<code>CLOESD</code>状态，那么重发的FIN就找不到对应的连接了，从而导致连接错乱，所以，Client端发送完最后的ACK不能直接进入<code>CLOSED</code>状态，而要保持<code>TIME_WAIT</code>，当再次收到FIN的收，能够保证对方收到ACK，最后正确关闭连接。</li><li><strong>第二点：保证这次连接的重复数据段从网络中消失</strong><br>如果Client端发送最后的ACK直接进入<code>CLOSED</code>状态，然后又再向Server端发起一个新连接，这时不能保证新连接的与刚关闭的连接的端口号是不同的，也就是新连接和老连接的端口号可能一样了，那么就可能出现问题：如果前一次的连接某些数据滞留在网络中，这些延迟数据在建立新连接后到达Client端，由于新老连接的端口号和IP都一样，TCP协议就认为延迟数据是属于新连接的，新连接就会接收到脏数据，这样就会导致数据包混乱。所以TCP连接需要在TIME_WAIT状态等待2倍MSL，才能保证本次连接的所有数据在网络中消失。</li></ul></li></ul><h3 id="TCP可靠性的四大手段"><a href="#TCP可靠性的四大手段" class="headerlink" title="TCP可靠性的四大手段"></a><strong>TCP可靠性的四大手段</strong></h3><p>(1)、<strong>顺序编号</strong>：tcp在传输文件的时候，会将文件拆分为多个tcp数据包，每个装满的数据包大小大约在1k左右，tcp协议为保证可靠传输，会将这些数据包顺序编号 </p><p>​    <img src="D:\笔记\Typora\note\图片\image-20211103170301406.png" alt="image-20211103170301406"></p><p>(2)、<strong>确认机制</strong>：当数据包成功的被发送方发送给接收方，接收方会根据tcp协议反馈给发送方一个成功接收的ACK信号，信号中包含了当前包的序号<br><img src="D:\笔记\Typora\note\图片\image-20211103170121448.png" alt="image-20211103170121448"></p><p>(3)、<strong>超时重传</strong>：当发送方发送数据包给接收方时，会为每一个数据包设置一个定时器，当在设定的时间内，发送方仍没有收到接收方的ACK信号，会再次发送该数据包，直到收到接收方的ACK信号或者连接已断开 </p><p>​    <img src="D:\笔记\Typora\note\图片\image-20211103170215737.png" alt="image-20211103170215737"><br>(4)、<strong>校验信息</strong>：tcp首部校验信息较多，udp首部校验信息较少。</p><p><strong>流控制</strong></p><p>接收端处于高负荷状态时，可能无法处理接收的数据，并丢弃数据，就会触发重发机制，导致网络流量无端浪费。</p><p>为了防止这种情况，TCP 提供一种机制可以让发送端根据接收端的实际接收能力控制发送的数据量，这就是<strong>流控制</strong>。它的具体操作是，接收端主机通知发送端主机自己可以接收数据的大小，于是发送端会发送不超过这个限度的数据。这个限度的大小就是窗口大小。</p><p>TCP 头部中有一个字段用来通知窗口大小。接收主机将缓冲区大小放入这个字段发送给接收端。当接收端的缓存不足或处理能力有限时，窗口大小的值会降低一半，从而控制数据发送量。也就是说，发送端主机会根据接收端主机的指示，对发送数据的量进行控制，也就形成了一个完整的 TCP 流控制。</p><p>若接收端要求窗口大小为 0 ，表示接收端已经接收全部数据，或者接收端应用程序没有时间读取数据，要求暂停发送。</p><p>如果窗口更新的报文丢失，可能会导致无法继续通信。为避免这个问题，发送端主机会时不时的发送一个叫<strong>窗口探测</strong>的数据段，此数据段仅含一个字节以获取最新的窗口大小信息。</p><p><strong>拥塞控制</strong></p><p>有了 TCP 的窗口控制，收发主机之间不再以一个数据段为单位发送确认应答，也能够连续发送大量数据包。在网络出现拥堵时，如果突然发送一个较大量的数据，有可能会导致整个网络瘫痪。</p><p>为了防止这个问题出现，在通信开始时，就会通过一个叫<strong>慢启动</strong>的算法得出的数值，对发送数据量进行控制。</p><p>为了在发送端调节发送数据的量，需要使用拥塞窗口。在慢启动时，将拥塞窗口的大小设置为 1 MSS 发送数据，之后每收到一次确认应答（ ACK ）,拥塞窗口的值就加 1 。在发送数据包时，将拥塞窗口的大小与接收端主机通知的窗口大小做比较，选择它们当中较小的值发送数据。这样可以有效减少通信开始时连续发包导致网络拥堵，还可以避免网络拥塞的发生。</p><h2 id="TCP粘包，拆包问题"><a href="#TCP粘包，拆包问题" class="headerlink" title="TCP粘包，拆包问题"></a>TCP粘包，拆包问题</h2><p>我们都知道TCP属于传输层的协议，传输层除了有TCP协议外还有UDP协议。那么UDP是否会发生粘包或拆包的现象呢？答案是不会。UDP是基于报文发送的，从UDP的帧结构可以看出，在UDP首部采用了16bit来指示UDP数据报文的长度，因此在应用层能很好的将不同的数据报文区分开，从而避免粘包和拆包的问题。而TCP是基于字节流的，虽然应用层和TCP传输层之间的数据交互是大小不等的数据块，但是TCP把这些数据块仅仅看成一连串无结构的字节流，没有边界；另外从TCP的帧结构也可以看出，在TCP的首部没有表示数据长度的字段，基于上面两点，在使用TCP传输数据时，才有粘包或者拆包现象发生的可能。</p><p><strong>粘包、拆包发生原因</strong></p><p> 1、要发送的数据大于TCP发送缓冲区剩余空间大小，将会发生拆包。</p><p> 2、待发送数据大于MSS（最大报文长度），TCP在传输前将进行拆包。</p><p> 3、要发送的数据小于TCP发送缓冲区的大小，TCP将多次写入缓冲区的数据一次发送出去，将会发生粘包。</p><p> 4、接收数据端的应用层没有及时读取接收缓冲区中的数据，将发生粘包。</p><p><strong>粘包、拆包解决办法</strong></p><p> 通过以上分析，我们清楚了粘包或拆包发生的原因，那么如何解决这个问题呢？解决问题的关键在于如何给每个数据包添加边界信息，常用的方法有如下几个：</p><p> 1、发送端给每个数据包添加包首部，首部中应该至少包含数据包的长度，这样接收端在接收到数据后，通过读取包首部的长度字段，便知道每一个数据包的实际长度了。</p><p> 2、发送端将每个数据包封装为固定长度（不够的可以通过补0填充），这样接收端每次从接收缓冲区中读取固定长度的数据就自然而然的把每个数据包拆分开来。</p><p> 3、可以在数据包之间设置边界，如添加特殊符号，这样，接收端通过这个边界就可以将不同的数据包拆分开。</p><h2 id="如何区分通信的区别？"><a href="#如何区分通信的区别？" class="headerlink" title="如何区分通信的区别？"></a><strong>如何区分通信的区别？</strong></h2><p>网络通信中通常采用 5 个信息来识别一个通信。它们是<strong>源 IP 地址</strong>、<strong>目的 IP 地址</strong>、<strong>协议号</strong>、<strong>源端口号</strong>、<strong>目的端口号</strong>。只要其中一项不同，就会认为是不同的通信。</p><p><img src="D:\笔记\Typora\note\图片\image-20211103165549958.png" alt="image-20211103165549958"></p><h2 id="ARP的工作原理如下（RARP工作原理与之相反）"><a href="#ARP的工作原理如下（RARP工作原理与之相反）" class="headerlink" title="ARP的工作原理如下（RARP工作原理与之相反）"></a><strong>ARP的工作原理如下</strong>（RARP工作原理与之相反）</h2><ol><li>首先，每台主机都会在自己的ARP缓冲区 (ARP Cache)中建立一个 ARP列表，以表示IP地址和MAC地址的对应关系。</li><li>当源主机需要将一个数据包要发送到目的主机时，会首先检查自己 ARP列表中是否存在该 IP地址对应的MAC地址，如果有﹐就直接将数据包发送到这个MAC地址；如果没有，就向本地网段发起一个ARP请求的广播包，查询此目的主机对应的MAC地址。此ARP请求数据包里包括源主机的IP地址、硬件地址、以及目的主机的IP地址。</li><li>网络中所有的主机收到这个ARP请求后，会检查数据包中的目的IP是否和自己的IP地址一致。如果不相同就忽略此数据包；如果相同，该主机首先将发送端的MAC地址和IP地址添加到自己的ARP列表中，如果ARP表中已经存在该IP的信息，则将其覆盖，然后给源主机发送一个 ARP响应数据包，告诉对方自己是它需要查找的MAC地址；</li><li>源主机收到这个ARP响应数据包后，将得到的目的主机的IP地址和MAC地址添加到自己的ARP列表中，并利用此信息开始数据的传输。如果源主机一直没有收到ARP响应数据包，表示ARP查询失败。</li></ol><h1 id="在浏览器输入URL回车之后发生了什么？"><a href="#在浏览器输入URL回车之后发生了什么？" class="headerlink" title="在浏览器输入URL回车之后发生了什么？"></a><a href="https://www.cnblogs.com/jin-zhe/p/11586327.html">在浏览器输入URL回车之后发生了什么？</a></h1><h1 id="http1-0、http1-1、http2-0的区别"><a href="#http1-0、http1-1、http2-0的区别" class="headerlink" title="http1.0、http1.1、http2.0的区别"></a>http1.0、http1.1、http2.0的区别</h1>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/11/08/hello-world/"/>
      <url>/2021/11/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
